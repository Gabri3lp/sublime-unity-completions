{
	"scope": "source.cs",

	"completions":
	[
		// Editor Attributes
		{ "trigger": "CustomEditor", "contents": "CustomEditor" },
		{ "trigger": "CustomEditor(inspectedType)", "contents": "CustomEditor(${1:System.Type inspectedType});" },
		{ "trigger": "DrawGizmo", "contents": "DrawGizmo" },
		{ "trigger": "DrawGizmo(gizmo)", "contents": "DrawGizmo(${1:GizmoType gizmo});" },
		{ "trigger": "DrawGizmo(gizmo, drawnGizmoType)", "contents": "DrawGizmo(${1:GizmoType gizmo}, ${2:Type drawnGizmoType});" },
		{ "trigger": "PostProcessAttribute", "contents": "PostProcessAttribute" },
		{ "trigger": "CanEditMultipleObjects", "contents": "CanEditMultipleObjects" },
		{ "trigger": "MenuItem", "contents": "MenuItem" },
		{ "trigger": "MenuItem(itemName, isValidateFunction, priority)", "contents": "MenuItem(${1:String itemName}, ${2:boolean isValidateFunction}, ${3:int priority});" },
		{ "trigger": "MenuItem(itemName, isValidateFunction)", "contents": "MenuItem(${1:String itemName}, ${2:boolean isValidateFunction});" },
		{ "trigger": "MenuItem(itemName)", "contents": "MenuItem(${1:String itemName});" },
		{ "trigger": "PreferenceItem", "contents": "PreferenceItem" },
		{ "trigger": "PreferenceItem(name)", "contents": "PreferenceItem(${1:String name});" },
		{ "trigger": "CustomPropertyDrawer", "contents": "CustomPropertyDrawer" },
		{ "trigger": "CustomPropertyDrawer(type)", "contents": "CustomPropertyDrawer(${1:System.Type type});" },

		// Runtime Classes
		{ "trigger": "AudioLowPassFilter", "contents": "AudioLowPassFilter" },
		{ "trigger": "AudioLowPassFilter.lowpassResonaceQ", "contents": "AudioLowPassFilter.lowpassResonaceQ" },
		{ "trigger": "AudioLowPassFilter.cutoffFrequency", "contents": "AudioLowPassFilter.cutoffFrequency" },
		{ "trigger": "Projector", "contents": "Projector" },
		{ "trigger": "Projector.ignoreLayers", "contents": "Projector.ignoreLayers" },
		{ "trigger": "Projector.fieldOfView", "contents": "Projector.fieldOfView" },
		{ "trigger": "Projector.material", "contents": "Projector.material" },
		{ "trigger": "Projector.nearClipPlane", "contents": "Projector.nearClipPlane" },
		{ "trigger": "Projector.farClipPlane", "contents": "Projector.farClipPlane" },
		{ "trigger": "Projector.orthographicSize", "contents": "Projector.orthographicSize" },
		{ "trigger": "Projector.orthographic", "contents": "Projector.orthographic" },
		{ "trigger": "Projector.aspectRatio", "contents": "Projector.aspectRatio" },
		{ "trigger": "Time", "contents": "Time" },
		{ "trigger": "Time.fixedTime", "contents": "Time.fixedTime" },
		{ "trigger": "Time.smoothDeltaTime", "contents": "Time.smoothDeltaTime" },
		{ "trigger": "Time.timeScale", "contents": "Time.timeScale" },
		{ "trigger": "Time.realtimeSinceStartup", "contents": "Time.realtimeSinceStartup" },
		{ "trigger": "Time.deltaTime", "contents": "Time.deltaTime" },
		{ "trigger": "Time.timeSinceLevelLoad", "contents": "Time.timeSinceLevelLoad" },
		{ "trigger": "Time.fixedDeltaTime", "contents": "Time.fixedDeltaTime" },
		{ "trigger": "Time.captureFramerate", "contents": "Time.captureFramerate" },
		{ "trigger": "Time.time", "contents": "Time.time" },
		{ "trigger": "Time.maximumDeltaTime", "contents": "Time.maximumDeltaTime" },
		{ "trigger": "Time.frameCount", "contents": "Time.frameCount" },
		{ "trigger": "Ping", "contents": "Ping" },
		{ "trigger": "Ping.ip", "contents": "Ping.ip" },
		{ "trigger": "Ping(address)", "contents": "Ping(${1:String address});" },
		{ "trigger": "Ping.isDone", "contents": "Ping.isDone" },
		{ "trigger": "Ping.time", "contents": "Ping.time" },
		{ "trigger": "Microphone", "contents": "Microphone" },
		{ "trigger": "Microphone.GetDeviceCaps(deviceName, out minFreq, out maxFreq)", "contents": "Microphone.GetDeviceCaps(${1:String deviceName}, ${2:int out minFreq}, ${3:int out maxFreq});" },
		{ "trigger": "Microphone.End(deviceName)", "contents": "Microphone.End(${1:String deviceName});" },
		{ "trigger": "Microphone.IsRecording(deviceName)", "contents": "Microphone.IsRecording(${1:String deviceName});" },
		{ "trigger": "Microphone.devices", "contents": "Microphone.devices" },
		{ "trigger": "Microphone.Start(deviceName, loop, lengthSec, frequency)", "contents": "Microphone.Start(${1:String deviceName}, ${2:boolean loop}, ${3:int lengthSec}, ${4:int frequency});" },
		{ "trigger": "Microphone.GetPosition(deviceName)", "contents": "Microphone.GetPosition(${1:String deviceName});" },
		{ "trigger": "SpringJoint", "contents": "SpringJoint" },
		{ "trigger": "SpringJoint.spring", "contents": "SpringJoint.spring" },
		{ "trigger": "SpringJoint.maxDistance", "contents": "SpringJoint.maxDistance" },
		{ "trigger": "SpringJoint.minDistance", "contents": "SpringJoint.minDistance" },
		{ "trigger": "SpringJoint.damper", "contents": "SpringJoint.damper" },
		{ "trigger": "OffMeshLink", "contents": "OffMeshLink" },
		{ "trigger": "OffMeshLink.occupied", "contents": "OffMeshLink.occupied" },
		{ "trigger": "OffMeshLink.costOverride", "contents": "OffMeshLink.costOverride" },
		{ "trigger": "OffMeshLink.activated", "contents": "OffMeshLink.activated" },
		{ "trigger": "Debug", "contents": "Debug" },
		{ "trigger": "Debug.LogWarning(message)", "contents": "Debug.LogWarning(${1:object message});" },
		{ "trigger": "Debug.LogWarning(message, context)", "contents": "Debug.LogWarning(${1:object message}, ${2:Object context});" },
		{ "trigger": "Debug.LogError(message)", "contents": "Debug.LogError(${1:object message});" },
		{ "trigger": "Debug.LogError(message, context)", "contents": "Debug.LogError(${1:object message}, ${2:Object context});" },
		{ "trigger": "Debug.Log(message)", "contents": "Debug.Log(${1:object message});" },
		{ "trigger": "Debug.Log(message, context)", "contents": "Debug.Log(${1:object message}, ${2:Object context});" },
		{ "trigger": "Debug.DrawLine(start, end, color, duration, depthTest)", "contents": "Debug.DrawLine(${1:Vector3 start}, ${2:Vector3 end}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:boolean depthTest = true});" },
		{ "trigger": "Debug.isDebugBuild", "contents": "Debug.isDebugBuild" },
		{ "trigger": "Debug.Break()", "contents": "Debug.Break();" },
		{ "trigger": "Debug.LogException(exception)", "contents": "Debug.LogException(${1:Exception exception});" },
		{ "trigger": "Debug.LogException(exception, context)", "contents": "Debug.LogException(${1:Exception exception}, ${2:Object context});" },
		{ "trigger": "Debug.DrawRay(start, dir, color, duration, depthTest)", "contents": "Debug.DrawRay(${1:Vector3 start}, ${2:Vector3 dir}, ${3:Color color = Color.white}, ${4:float duration = 0.0f}, ${5:boolean depthTest = true});" },
		{ "trigger": "NavMeshAgent", "contents": "NavMeshAgent" },
		{ "trigger": "NavMeshAgent.walkableMask", "contents": "NavMeshAgent.walkableMask" },
		{ "trigger": "NavMeshAgent.pathPending", "contents": "NavMeshAgent.pathPending" },
		{ "trigger": "NavMeshAgent.desiredVelocity", "contents": "NavMeshAgent.desiredVelocity" },
		{ "trigger": "NavMeshAgent.height", "contents": "NavMeshAgent.height" },
		{ "trigger": "NavMeshAgent.SamplePathPosition(passableMask, maxDistance, out hit)", "contents": "NavMeshAgent.SamplePathPosition(${1:int passableMask}, ${2:float maxDistance}, ${3:NavMeshHit out hit});" },
		{ "trigger": "NavMeshAgent.obstacleAvoidanceType", "contents": "NavMeshAgent.obstacleAvoidanceType" },
		{ "trigger": "NavMeshAgent.radius", "contents": "NavMeshAgent.radius" },
		{ "trigger": "NavMeshAgent.SetDestination(target)", "contents": "NavMeshAgent.SetDestination(${1:Vector3 target});" },
		{ "trigger": "NavMeshAgent.CompleteOffMeshLink()", "contents": "NavMeshAgent.CompleteOffMeshLink();" },
		{ "trigger": "NavMeshAgent.nextOffMeshLinkData", "contents": "NavMeshAgent.nextOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.speed", "contents": "NavMeshAgent.speed" },
		{ "trigger": "NavMeshAgent.isOnOffMeshLink", "contents": "NavMeshAgent.isOnOffMeshLink" },
		{ "trigger": "NavMeshAgent.acceleration", "contents": "NavMeshAgent.acceleration" },
		{ "trigger": "NavMeshAgent.ResetPath()", "contents": "NavMeshAgent.ResetPath();" },
		{ "trigger": "NavMeshAgent.hasPath", "contents": "NavMeshAgent.hasPath" },
		{ "trigger": "NavMeshAgent.Resume()", "contents": "NavMeshAgent.Resume();" },
		{ "trigger": "NavMeshAgent.updatePosition", "contents": "NavMeshAgent.updatePosition" },
		{ "trigger": "NavMeshAgent.destination", "contents": "NavMeshAgent.destination" },
		{ "trigger": "NavMeshAgent.Stop(stopUpdates)", "contents": "NavMeshAgent.Stop(${1:boolean stopUpdates = false});" },
		{ "trigger": "NavMeshAgent.autoRepath", "contents": "NavMeshAgent.autoRepath" },
		{ "trigger": "NavMeshAgent.Raycast(targetPosition, out hit)", "contents": "NavMeshAgent.Raycast(${1:Vector3 targetPosition}, ${2:NavMeshHit out hit});" },
		{ "trigger": "NavMeshAgent.isPathStale", "contents": "NavMeshAgent.isPathStale" },
		{ "trigger": "NavMeshAgent.steeringTarget", "contents": "NavMeshAgent.steeringTarget" },
		{ "trigger": "NavMeshAgent.autoTraverseOffMeshLink", "contents": "NavMeshAgent.autoTraverseOffMeshLink" },
		{ "trigger": "NavMeshAgent.nextPosition", "contents": "NavMeshAgent.nextPosition" },
		{ "trigger": "NavMeshAgent.avoidancePriority", "contents": "NavMeshAgent.avoidancePriority" },
		{ "trigger": "NavMeshAgent.pathStatus", "contents": "NavMeshAgent.pathStatus" },
		{ "trigger": "NavMeshAgent.angularSpeed", "contents": "NavMeshAgent.angularSpeed" },
		{ "trigger": "NavMeshAgent.ActivateCurrentOffMeshLink(activated)", "contents": "NavMeshAgent.ActivateCurrentOffMeshLink(${1:boolean activated});" },
		{ "trigger": "NavMeshAgent.path", "contents": "NavMeshAgent.path" },
		{ "trigger": "NavMeshAgent.SetPath(path)", "contents": "NavMeshAgent.SetPath(${1:NavMeshPath path});" },
		{ "trigger": "NavMeshAgent.updateRotation", "contents": "NavMeshAgent.updateRotation" },
		{ "trigger": "NavMeshAgent.SetLayerCost(layer, cost)", "contents": "NavMeshAgent.SetLayerCost(${1:int layer}, ${2:float cost});" },
		{ "trigger": "NavMeshAgent.GetLayerCost(layer)", "contents": "NavMeshAgent.GetLayerCost(${1:int layer});" },
		{ "trigger": "NavMeshAgent.stoppingDistance", "contents": "NavMeshAgent.stoppingDistance" },
		{ "trigger": "NavMeshAgent.Move(offset)", "contents": "NavMeshAgent.Move(${1:Vector3 offset});" },
		{ "trigger": "NavMeshAgent.currentOffMeshLinkData", "contents": "NavMeshAgent.currentOffMeshLinkData" },
		{ "trigger": "NavMeshAgent.baseOffset", "contents": "NavMeshAgent.baseOffset" },
		{ "trigger": "NavMeshAgent.CalculatePath(targetPosition, path)", "contents": "NavMeshAgent.CalculatePath(${1:Vector3 targetPosition}, ${2:NavMeshPath path});" },
		{ "trigger": "NavMeshAgent.velocity", "contents": "NavMeshAgent.velocity" },
		{ "trigger": "NavMeshAgent.FindClosestEdge(out hit)", "contents": "NavMeshAgent.FindClosestEdge(${1:NavMeshHit out hit});" },
		{ "trigger": "NavMeshAgent.remainingDistance", "contents": "NavMeshAgent.remainingDistance" },
		{ "trigger": "Screen", "contents": "Screen" },
		{ "trigger": "Screen.fullScreen", "contents": "Screen.fullScreen" },
		{ "trigger": "Screen.autorotateToPortrait", "contents": "Screen.autorotateToPortrait" },
		{ "trigger": "Screen.autorotateToLandscapeLeft", "contents": "Screen.autorotateToLandscapeLeft" },
		{ "trigger": "Screen.orientation", "contents": "Screen.orientation" },
		{ "trigger": "Screen.showCursor", "contents": "Screen.showCursor" },
		{ "trigger": "Screen.lockCursor", "contents": "Screen.lockCursor" },
		{ "trigger": "Screen.height", "contents": "Screen.height" },
		{ "trigger": "Screen.width", "contents": "Screen.width" },
		{ "trigger": "Screen.autorotateToLandscapeRight", "contents": "Screen.autorotateToLandscapeRight" },
		{ "trigger": "Screen.currentResolution", "contents": "Screen.currentResolution" },
		{ "trigger": "Screen.autorotateToPortraitUpsideDown", "contents": "Screen.autorotateToPortraitUpsideDown" },
		{ "trigger": "Screen.sleepTimeout", "contents": "Screen.sleepTimeout" },
		{ "trigger": "Screen.resolutions", "contents": "Screen.resolutions" },
		{ "trigger": "Screen.SetResolution(width, height, fullscreen, preferredRefreshRate)", "contents": "Screen.SetResolution(${1:int width}, ${2:int height}, ${3:boolean fullscreen}, ${4:int preferredRefreshRate = 0});" },
		{ "trigger": "Screen.dpi", "contents": "Screen.dpi" },
		{ "trigger": "IAchievement", "contents": "IAchievement" },
		{ "trigger": "IAchievement.lastReportedDate", "contents": "IAchievement.lastReportedDate" },
		{ "trigger": "IAchievement.ReportProgress(callback)", "contents": "IAchievement.ReportProgress(${1:System.Action<bool> callback});" },
		{ "trigger": "IAchievement.completed", "contents": "IAchievement.completed" },
		{ "trigger": "IAchievement.id", "contents": "IAchievement.id" },
		{ "trigger": "IAchievement.hidden", "contents": "IAchievement.hidden" },
		{ "trigger": "IAchievement.percentCompleted", "contents": "IAchievement.percentCompleted" },
		{ "trigger": "ParticleSystem", "contents": "ParticleSystem" },
		{ "trigger": "ParticleSystem.Pause(withChildren)", "contents": "ParticleSystem.Pause(${1:boolean withChildren = true});" },
		{ "trigger": "ParticleSystem.randomSeed", "contents": "ParticleSystem.randomSeed" },
		{ "trigger": "ParticleSystem.particleCount", "contents": "ParticleSystem.particleCount" },
		{ "trigger": "ParticleSystem.duration", "contents": "ParticleSystem.duration" },
		{ "trigger": "ParticleSystem.playbackSpeed", "contents": "ParticleSystem.playbackSpeed" },
		{ "trigger": "ParticleSystem.playOnAwake", "contents": "ParticleSystem.playOnAwake" },
		{ "trigger": "ParticleSystem.Play(withChildren)", "contents": "ParticleSystem.Play(${1:boolean withChildren = true});" },
		{ "trigger": "ParticleSystem.startRotation", "contents": "ParticleSystem.startRotation" },
		{ "trigger": "ParticleSystem.Stop(withChildren)", "contents": "ParticleSystem.Stop(${1:boolean withChildren = true});" },
		{ "trigger": "ParticleSystem.GetParticles(particles)", "contents": "ParticleSystem.GetParticles(${1:ParticleSystem.Particle[] particles});" },
		{ "trigger": "ParticleSystem.isStopped", "contents": "ParticleSystem.isStopped" },
		{ "trigger": "ParticleSystem.SetParticles(particles, size)", "contents": "ParticleSystem.SetParticles(${1:ParticleSystem.Particle[] particles}, ${2:int size});" },
		{ "trigger": "ParticleSystem.Simulate(t, withChildren, restart)", "contents": "ParticleSystem.Simulate(${1:float t}, ${2:boolean withChildren = true}, ${3:boolean restart = true});" },
		{ "trigger": "ParticleSystem.startLifetime", "contents": "ParticleSystem.startLifetime" },
		{ "trigger": "ParticleSystem.startColor", "contents": "ParticleSystem.startColor" },
		{ "trigger": "ParticleSystem.Clear(withChildren)", "contents": "ParticleSystem.Clear(${1:boolean withChildren = true});" },
		{ "trigger": "ParticleSystem.time", "contents": "ParticleSystem.time" },
		{ "trigger": "ParticleSystem.startSize", "contents": "ParticleSystem.startSize" },
		{ "trigger": "ParticleSystem.startDelay", "contents": "ParticleSystem.startDelay" },
		{ "trigger": "ParticleSystem.isPlaying", "contents": "ParticleSystem.isPlaying" },
		{ "trigger": "ParticleSystem.Emit(count)", "contents": "ParticleSystem.Emit(${1:int count});" },
		{ "trigger": "ParticleSystem.Emit(position, velocity, size, lifetime, color)", "contents": "ParticleSystem.Emit(${1:Vector3 position}, ${2:Vector3 velocity}, ${3:float size}, ${4:float lifetime}, ${5:Color32 color});" },
		{ "trigger": "ParticleSystem.Emit(particle)", "contents": "ParticleSystem.Emit(${1:ParticleSystem.Particle particle});" },
		{ "trigger": "ParticleSystem.gravityModifier", "contents": "ParticleSystem.gravityModifier" },
		{ "trigger": "ParticleSystem.IsAlive(withChildren)", "contents": "ParticleSystem.IsAlive(${1:boolean withChildren = true});" },
		{ "trigger": "ParticleSystem.emissionRate", "contents": "ParticleSystem.emissionRate" },
		{ "trigger": "ParticleSystem.enableEmission", "contents": "ParticleSystem.enableEmission" },
		{ "trigger": "ParticleSystem.isPaused", "contents": "ParticleSystem.isPaused" },
		{ "trigger": "ParticleSystem.startSpeed", "contents": "ParticleSystem.startSpeed" },
		{ "trigger": "ParticleSystem.loop", "contents": "ParticleSystem.loop" },
		{ "trigger": "NavMeshObstacle", "contents": "NavMeshObstacle" },
		{ "trigger": "NavMeshObstacle.velocity", "contents": "NavMeshObstacle.velocity" },
		{ "trigger": "NavMeshObstacle.radius", "contents": "NavMeshObstacle.radius" },
		{ "trigger": "NavMeshObstacle.height", "contents": "NavMeshObstacle.height" },
		{ "trigger": "AssetBundleRequest", "contents": "AssetBundleRequest" },
		{ "trigger": "AssetBundleRequest.asset", "contents": "AssetBundleRequest.asset" },
		{ "trigger": "WaitForEndOfFrame", "contents": "WaitForEndOfFrame" },
		{ "trigger": "SplatPrototype", "contents": "SplatPrototype" },
		{ "trigger": "SplatPrototype.normalMap", "contents": "SplatPrototype.normalMap" },
		{ "trigger": "SplatPrototype.tileOffset", "contents": "SplatPrototype.tileOffset" },
		{ "trigger": "SplatPrototype.texture", "contents": "SplatPrototype.texture" },
		{ "trigger": "SplatPrototype.tileSize", "contents": "SplatPrototype.tileSize" },
		{ "trigger": "LODGroup", "contents": "LODGroup" },
		{ "trigger": "LODGroup.localReferencePoint", "contents": "LODGroup.localReferencePoint" },
		{ "trigger": "LODGroup.lodCount", "contents": "LODGroup.lodCount" },
		{ "trigger": "LODGroup.RecalculateBounds()", "contents": "LODGroup.RecalculateBounds();" },
		{ "trigger": "LODGroup.enabled", "contents": "LODGroup.enabled" },
		{ "trigger": "LODGroup.SetLODS(scriptingLODs)", "contents": "LODGroup.SetLODS(${1:LOD[] scriptingLODs});" },
		{ "trigger": "LODGroup.ForceLOD(index)", "contents": "LODGroup.ForceLOD(${1:int index});" },
		{ "trigger": "LODGroup.size", "contents": "LODGroup.size" },
		{ "trigger": "Object", "contents": "Object" },
		{ "trigger": "Object.DontDestroyOnLoad(target)", "contents": "Object.DontDestroyOnLoad(${1:Object target});" },
		{ "trigger": "Object.name", "contents": "Object.name" },
		{ "trigger": "Object.Instantiate(original, position, rotation)", "contents": "Object.Instantiate(${1:Object original}, ${2:Vector3 position}, ${3:Quaternion rotation});" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:Object original});" },
		{ "trigger": "Object.Instantiate(original)", "contents": "Object.Instantiate(${1:T original});" },
		{ "trigger": "Object.FindObjectsOfType(type)", "contents": "Object.FindObjectsOfType(${1:Type type});" },
		{ "trigger": "Object.FindObjectOfType(type)", "contents": "Object.FindObjectOfType(${1:Type type});" },
		{ "trigger": "Object.GetInstanceID()", "contents": "Object.GetInstanceID();" },
		{ "trigger": "Object.ToString()", "contents": "Object.ToString();" },
		{ "trigger": "Object.DestroyImmediate(obj, allowDestroyingAssets)", "contents": "Object.DestroyImmediate(${1:Object obj}, ${2:boolean allowDestroyingAssets = false});" },
		{ "trigger": "Object.hideFlags", "contents": "Object.hideFlags" },
		{ "trigger": "Object.Destroy(obj, t)", "contents": "Object.Destroy(${1:Object obj}, ${2:float t = 0.0F});" },
		{ "trigger": "ADError", "contents": "ADError" },
		{ "trigger": "ADError.reason", "contents": "ADError.reason" },
		{ "trigger": "ADError.code", "contents": "ADError.code" },
		{ "trigger": "ADError.description", "contents": "ADError.description" },
		{ "trigger": "BitStream", "contents": "BitStream" },
		{ "trigger": "BitStream.isWriting", "contents": "BitStream.isWriting" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:boolean ref value});" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:char ref value});" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:short ref value});" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:int ref value});" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:float ref value}, ${2:float maxDelta = 0.00001F});" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Quaternion ref value}, ${2:float maxDelta = 0.00001F});" },
		{ "trigger": "BitStream.Serialize(ref value, maxDelta)", "contents": "BitStream.Serialize(${1:Vector3 ref value}, ${2:float maxDelta = 0.00001F});" },
		{ "trigger": "BitStream.Serialize(ref value)", "contents": "BitStream.Serialize(${1:NetworkPlayer ref value});" },
		{ "trigger": "BitStream.Serialize(ref viewID)", "contents": "BitStream.Serialize(${1:NetworkViewID ref viewID});" },
		{ "trigger": "BitStream.isReading", "contents": "BitStream.isReading" },
		{ "trigger": "Texture2D", "contents": "Texture2D" },
		{ "trigger": "Texture2D.GetPixels32(miplevel)", "contents": "Texture2D.GetPixels32(${1:int miplevel = 0});" },
		{ "trigger": "Texture2D.GetPixelBilinear(u, v)", "contents": "Texture2D.GetPixelBilinear(${1:float u}, ${2:float v});" },
		{ "trigger": "Texture2D(width, height)", "contents": "Texture2D(${1:int width}, ${2:int height});" },
		{ "trigger": "Texture2D(width, height, format, mipmap)", "contents": "Texture2D(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:boolean mipmap});" },
		{ "trigger": "Texture2D(width, height, format, mipmap, linear)", "contents": "Texture2D(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:boolean mipmap}, ${5:boolean linear});" },
		{ "trigger": "Texture2D.GetPixels(miplevel)", "contents": "Texture2D.GetPixels(${1:int miplevel = 0});" },
		{ "trigger": "Texture2D.GetPixels(x, y, blockWidth, blockHeight, miplevel)", "contents": "Texture2D.GetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight}, ${5:int miplevel = 0});" },
		{ "trigger": "Texture2D.format", "contents": "Texture2D.format" },
		{ "trigger": "Texture2D.Compress(highQuality)", "contents": "Texture2D.Compress(${1:boolean highQuality});" },
		{ "trigger": "Texture2D.ReadPixels(source, destX, destY, recalculateMipMaps)", "contents": "Texture2D.ReadPixels(${1:Rect source}, ${2:int destX}, ${3:int destY}, ${4:boolean recalculateMipMaps = true});" },
		{ "trigger": "Texture2D.PackTextures(textures, padding, maximumAtlasSize, makeNoLongerReadable)", "contents": "Texture2D.PackTextures(${1:Texture2D[] textures}, ${2:int padding}, ${3:int maximumAtlasSize = 2048}, ${4:boolean makeNoLongerReadable = false});" },
		{ "trigger": "Texture2D.SetPixel(x, y, color)", "contents": "Texture2D.SetPixel(${1:int x}, ${2:int y}, ${3:Color color});" },
		{ "trigger": "Texture2D.SetPixels(colors, miplevel)", "contents": "Texture2D.SetPixels(${1:Color[] colors}, ${2:int miplevel = 0});" },
		{ "trigger": "Texture2D.SetPixels(x, y, blockWidth, blockHeight, colors, miplevel)", "contents": "Texture2D.SetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight}, ${5:Color[] colors}, ${6:int miplevel = 0});" },
		{ "trigger": "Texture2D.EncodeToPNG()", "contents": "Texture2D.EncodeToPNG();" },
		{ "trigger": "Texture2D.mipmapCount", "contents": "Texture2D.mipmapCount" },
		{ "trigger": "Texture2D.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Texture2D.Apply(${1:boolean updateMipmaps = true}, ${2:boolean makeNoLongerReadable = false});" },
		{ "trigger": "Texture2D.LoadImage(data)", "contents": "Texture2D.LoadImage(${1:byte[] data});" },
		{ "trigger": "Texture2D.GetPixel(x, y)", "contents": "Texture2D.GetPixel(${1:int x}, ${2:int y});" },
		{ "trigger": "Texture2D.Resize(width, height, format, hasMipMap)", "contents": "Texture2D.Resize(${1:int width}, ${2:int height}, ${3:TextureFormat format}, ${4:boolean hasMipMap});" },
		{ "trigger": "Texture2D.Resize(width, height)", "contents": "Texture2D.Resize(${1:int width}, ${2:int height});" },
		{ "trigger": "Texture2D.SetPixels32(colors, miplevel)", "contents": "Texture2D.SetPixels32(${1:Color32[] colors}, ${2:int miplevel = 0});" },
		{ "trigger": "BoneWeight", "contents": "BoneWeight" },
		{ "trigger": "BoneWeight.weight3", "contents": "BoneWeight.weight3" },
		{ "trigger": "BoneWeight.weight2", "contents": "BoneWeight.weight2" },
		{ "trigger": "BoneWeight.weight1", "contents": "BoneWeight.weight1" },
		{ "trigger": "BoneWeight.weight0", "contents": "BoneWeight.weight0" },
		{ "trigger": "BoneWeight.boneIndex0", "contents": "BoneWeight.boneIndex0" },
		{ "trigger": "BoneWeight.boneIndex1", "contents": "BoneWeight.boneIndex1" },
		{ "trigger": "BoneWeight.boneIndex2", "contents": "BoneWeight.boneIndex2" },
		{ "trigger": "BoneWeight.boneIndex3", "contents": "BoneWeight.boneIndex3" },
		{ "trigger": "Path", "contents": "Path" },
		{ "trigger": "Path.GetFileName(path)", "contents": "Path.GetFileName(${1:String path});" },
		{ "trigger": "Path.AltDirectorySeparatorChar", "contents": "Path.AltDirectorySeparatorChar" },
		{ "trigger": "Path.DirectorySeparatorChar", "contents": "Path.DirectorySeparatorChar" },
		{ "trigger": "Path.GetFileNameWithoutExtension(path)", "contents": "Path.GetFileNameWithoutExtension(${1:String path});" },
		{ "trigger": "Path.Combine(path1, path2)", "contents": "Path.Combine(${1:String path1}, ${2:String path2});" },
		{ "trigger": "Path.GetExtension(path)", "contents": "Path.GetExtension(${1:String path});" },
		{ "trigger": "Path.GetDirectoryName(path)", "contents": "Path.GetDirectoryName(${1:String path});" },
		{ "trigger": "MaterialPropertyBlock", "contents": "MaterialPropertyBlock" },
		{ "trigger": "MaterialPropertyBlock.AddVector(name, value)", "contents": "MaterialPropertyBlock.AddVector(${1:String name}, ${2:Vector4 value});" },
		{ "trigger": "MaterialPropertyBlock.AddVector(nameID, value)", "contents": "MaterialPropertyBlock.AddVector(${1:int nameID}, ${2:Vector4 value});" },
		{ "trigger": "MaterialPropertyBlock.Clear()", "contents": "MaterialPropertyBlock.Clear();" },
		{ "trigger": "MaterialPropertyBlock.AddMatrix(name, value)", "contents": "MaterialPropertyBlock.AddMatrix(${1:String name}, ${2:Matrix4x4 value});" },
		{ "trigger": "MaterialPropertyBlock.AddMatrix(nameID, value)", "contents": "MaterialPropertyBlock.AddMatrix(${1:int nameID}, ${2:Matrix4x4 value});" },
		{ "trigger": "MaterialPropertyBlock.AddFloat(name, value)", "contents": "MaterialPropertyBlock.AddFloat(${1:String name}, ${2:float value});" },
		{ "trigger": "MaterialPropertyBlock.AddFloat(nameID, value)", "contents": "MaterialPropertyBlock.AddFloat(${1:int nameID}, ${2:float value});" },
		{ "trigger": "MaterialPropertyBlock.AddColor(name, value)", "contents": "MaterialPropertyBlock.AddColor(${1:String name}, ${2:Color value});" },
		{ "trigger": "MaterialPropertyBlock.AddColor(nameID, value)", "contents": "MaterialPropertyBlock.AddColor(${1:int nameID}, ${2:Color value});" },
		{ "trigger": "AssetBundleCreateRequest", "contents": "AssetBundleCreateRequest" },
		{ "trigger": "AssetBundleCreateRequest.assetBundle", "contents": "AssetBundleCreateRequest.assetBundle" },
		{ "trigger": "Rect", "contents": "Rect" },
		{ "trigger": "Rect.MinMaxRect(left, top, right, bottom)", "contents": "Rect.MinMaxRect(${1:float left}, ${2:float top}, ${3:float right}, ${4:float bottom});" },
		{ "trigger": "Rect.Set(left, top, width, height)", "contents": "Rect.Set(${1:float left}, ${2:float top}, ${3:float width}, ${4:float height});" },
		{ "trigger": "Rect.center", "contents": "Rect.center" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:Vector2 point});" },
		{ "trigger": "Rect.Contains(point)", "contents": "Rect.Contains(${1:Vector3 point});" },
		{ "trigger": "Rect.height", "contents": "Rect.height" },
		{ "trigger": "Rect.width", "contents": "Rect.width" },
		{ "trigger": "Rect.ToString()", "contents": "Rect.ToString();" },
		{ "trigger": "Rect.ToString(format)", "contents": "Rect.ToString(${1:String format});" },
		{ "trigger": "Rect.xMax", "contents": "Rect.xMax" },
		{ "trigger": "Rect.xMin", "contents": "Rect.xMin" },
		{ "trigger": "Rect.x", "contents": "Rect.x" },
		{ "trigger": "Rect.yMin", "contents": "Rect.yMin" },
		{ "trigger": "Rect.y", "contents": "Rect.y" },
		{ "trigger": "Rect(left, top, width, height)", "contents": "Rect(${1:float left}, ${2:float top}, ${3:float width}, ${4:float height});" },
		{ "trigger": "Rect.yMax", "contents": "Rect.yMax" },
		{ "trigger": "GUILayoutUtility", "contents": "GUILayoutUtility" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style)", "contents": "GUILayoutUtility.GetRect(${1:GUIContent content}, ${2:GUIStyle style});" },
		{ "trigger": "GUILayoutUtility.GetRect(content, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height});" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUIStyle style});" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, params options)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetRect(width, height, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:float width}, ${2:float height}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight});" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUIStyle style});" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, params options)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetRect(minWidth, maxWidth, minHeight, maxHeight, style, params options)", "contents": "GUILayoutUtility.GetRect(${1:float minWidth}, ${2:float maxWidth}, ${3:float minHeight}, ${4:float maxHeight}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect});" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUIStyle style});" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, params options)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetAspectRect(aspect, style, params options)", "contents": "GUILayoutUtility.GetAspectRect(${1:float aspect}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayoutUtility.GetLastRect()", "contents": "GUILayoutUtility.GetLastRect();" },
		{ "trigger": "ScriptableObject", "contents": "ScriptableObject" },
		{ "trigger": "ScriptableObject.OnDestroy()", "contents": "ScriptableObject.OnDestroy();" },
		{ "trigger": "ScriptableObject.CreateInstance(className)", "contents": "ScriptableObject.CreateInstance(${1:String className});" },
		{ "trigger": "ScriptableObject.CreateInstance(type)", "contents": "ScriptableObject.CreateInstance(${1:Type type});" },
		{ "trigger": "ScriptableObject.CreateInstance()", "contents": "ScriptableObject.CreateInstance();" },
		{ "trigger": "ScriptableObject.OnDisable()", "contents": "ScriptableObject.OnDisable();" },
		{ "trigger": "ScriptableObject.OnEnable()", "contents": "ScriptableObject.OnEnable();" },
		{ "trigger": "AnimationCurve", "contents": "AnimationCurve" },
		{ "trigger": "AnimationCurve.postWrapMode", "contents": "AnimationCurve.postWrapMode" },
		{ "trigger": "AnimationCurve.RemoveKey(index)", "contents": "AnimationCurve.RemoveKey(${1:int index});" },
		{ "trigger": "AnimationCurve(params keys)", "contents": "AnimationCurve(${1:Keyframe[] params keys});" },
		{ "trigger": "AnimationCurve()", "contents": "AnimationCurve();" },
		{ "trigger": "AnimationCurve.keys", "contents": "AnimationCurve.keys" },
		{ "trigger": "AnimationCurve.Evaluate(time)", "contents": "AnimationCurve.Evaluate(${1:float time});" },
		{ "trigger": "AnimationCurve.EaseInOut(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.EaseInOut(${1:float timeStart}, ${2:float valueStart}, ${3:float timeEnd}, ${4:float valueEnd});" },
		{ "trigger": "AnimationCurve.preWrapMode", "contents": "AnimationCurve.preWrapMode" },
		{ "trigger": "AnimationCurve.length", "contents": "AnimationCurve.length" },
		{ "trigger": "AnimationCurve.this [int index]", "contents": "AnimationCurve.this [int index]" },
		{ "trigger": "AnimationCurve.AddKey(time, value)", "contents": "AnimationCurve.AddKey(${1:float time}, ${2:float value});" },
		{ "trigger": "AnimationCurve.AddKey(key)", "contents": "AnimationCurve.AddKey(${1:Keyframe key});" },
		{ "trigger": "AnimationCurve.SmoothTangents(index, weight)", "contents": "AnimationCurve.SmoothTangents(${1:int index}, ${2:float weight});" },
		{ "trigger": "AnimationCurve.MoveKey(index, key)", "contents": "AnimationCurve.MoveKey(${1:int index}, ${2:Keyframe key});" },
		{ "trigger": "AnimationCurve.Linear(timeStart, valueStart, timeEnd, valueEnd)", "contents": "AnimationCurve.Linear(${1:float timeStart}, ${2:float valueStart}, ${3:float timeEnd}, ${4:float valueEnd});" },
		{ "trigger": "ParticleSystemRenderer", "contents": "ParticleSystemRenderer" },
		{ "trigger": "ParticleSystemRenderer.lengthScale", "contents": "ParticleSystemRenderer.lengthScale" },
		{ "trigger": "ParticleSystemRenderer.mesh", "contents": "ParticleSystemRenderer.mesh" },
		{ "trigger": "ParticleSystemRenderer.maxParticleSize", "contents": "ParticleSystemRenderer.maxParticleSize" },
		{ "trigger": "ParticleSystemRenderer.velocityScale", "contents": "ParticleSystemRenderer.velocityScale" },
		{ "trigger": "ParticleSystemRenderer.renderMode", "contents": "ParticleSystemRenderer.renderMode" },
		{ "trigger": "ParticleSystemRenderer.cameraVelocityScale", "contents": "ParticleSystemRenderer.cameraVelocityScale" },
		{ "trigger": "AudioSettings", "contents": "AudioSettings" },
		{ "trigger": "AudioSettings.GetDSPBufferSize(out bufferLength, out numBuffers)", "contents": "AudioSettings.GetDSPBufferSize(${1:int out bufferLength}, ${2:int out numBuffers});" },
		{ "trigger": "AudioSettings.speakerMode", "contents": "AudioSettings.speakerMode" },
		{ "trigger": "AudioSettings.outputSampleRate", "contents": "AudioSettings.outputSampleRate" },
		{ "trigger": "AudioSettings.SetDSPBufferSize(bufferLength, numBuffers)", "contents": "AudioSettings.SetDSPBufferSize(${1:int bufferLength}, ${2:int numBuffers});" },
		{ "trigger": "AudioSettings.driverCaps", "contents": "AudioSettings.driverCaps" },
		{ "trigger": "ADBannerView", "contents": "ADBannerView" },
		{ "trigger": "ADBannerView.autoPosition", "contents": "ADBannerView.autoPosition" },
		{ "trigger": "ADBannerView.autoSize", "contents": "ADBannerView.autoSize" },
		{ "trigger": "ADBannerView.CancelAction()", "contents": "ADBannerView.CancelAction();" },
		{ "trigger": "ADBannerView.Show()", "contents": "ADBannerView.Show();" },
		{ "trigger": "ADBannerView.GetSizeFromSizeIdentifier(identifier)", "contents": "ADBannerView.GetSizeFromSizeIdentifier(${1:ADSizeIdentifier identifier});" },
		{ "trigger": "ADBannerView.actionInProgress", "contents": "ADBannerView.actionInProgress" },
		{ "trigger": "ADBannerView.Hide()", "contents": "ADBannerView.Hide();" },
		{ "trigger": "ADBannerView.requiredSizeIdentifiers", "contents": "ADBannerView.requiredSizeIdentifiers" },
		{ "trigger": "ADBannerView.currentSizeIdentifier", "contents": "ADBannerView.currentSizeIdentifier" },
		{ "trigger": "ADBannerView.visible", "contents": "ADBannerView.visible" },
		{ "trigger": "ADBannerView()", "contents": "ADBannerView();" },
		{ "trigger": "ADBannerView.error", "contents": "ADBannerView.error" },
		{ "trigger": "ADBannerView.position", "contents": "ADBannerView.position" },
		{ "trigger": "ADBannerView.loaded", "contents": "ADBannerView.loaded" },
		{ "trigger": "ParticleSystem.Particle", "contents": "ParticleSystem.Particle" },
		{ "trigger": "ParticleSystem.Particle.randomSeed", "contents": "ParticleSystem.Particle.randomSeed" },
		{ "trigger": "ParticleSystem.Particle.color", "contents": "ParticleSystem.Particle.color" },
		{ "trigger": "ParticleSystem.Particle.angularVelocity", "contents": "ParticleSystem.Particle.angularVelocity" },
		{ "trigger": "ParticleSystem.Particle.position", "contents": "ParticleSystem.Particle.position" },
		{ "trigger": "ParticleSystem.Particle.startLifetime", "contents": "ParticleSystem.Particle.startLifetime" },
		{ "trigger": "ParticleSystem.Particle.velocity", "contents": "ParticleSystem.Particle.velocity" },
		{ "trigger": "ParticleSystem.Particle.rotation", "contents": "ParticleSystem.Particle.rotation" },
		{ "trigger": "ParticleSystem.Particle.lifetime", "contents": "ParticleSystem.Particle.lifetime" },
		{ "trigger": "ParticleSystem.Particle.size", "contents": "ParticleSystem.Particle.size" },
		{ "trigger": "JointMotor", "contents": "JointMotor" },
		{ "trigger": "JointMotor.force", "contents": "JointMotor.force" },
		{ "trigger": "JointMotor.freeSpin", "contents": "JointMotor.freeSpin" },
		{ "trigger": "JointMotor.targetVelocity", "contents": "JointMotor.targetVelocity" },
		{ "trigger": "Social", "contents": "Social" },
		{ "trigger": "Social.CreateAchievement()", "contents": "Social.CreateAchievement();" },
		{ "trigger": "Social.localUser", "contents": "Social.localUser" },
		{ "trigger": "Social.ShowAchievementsUI()", "contents": "Social.ShowAchievementsUI();" },
		{ "trigger": "Social.LoadUsers(userIds, callback)", "contents": "Social.LoadUsers(${1:string[] userIds}, ${2:Action<IUserProfile[]> callback});" },
		{ "trigger": "Social.CreateLeaderboard()", "contents": "Social.CreateLeaderboard();" },
		{ "trigger": "Social.ReportProgress(id, progress, callback)", "contents": "Social.ReportProgress(${1:String id}, ${2:double progress}, ${3:System.Action<bool> callback});" },
		{ "trigger": "Social.LoadAchievements(callback)", "contents": "Social.LoadAchievements(${1:System.Action<IAchievement[]> callback});" },
		{ "trigger": "Social.LoadAchievementDescriptions(callback)", "contents": "Social.LoadAchievementDescriptions(${1:System.Action<IAchievementDescription[]> callback});" },
		{ "trigger": "Social.Active", "contents": "Social.Active" },
		{ "trigger": "Social.ReportScore(score, board, callback)", "contents": "Social.ReportScore(${1:Int64 score}, ${2:String board}, ${3:System.Action<bool> callback});" },
		{ "trigger": "Social.ShowLeaderboardUI()", "contents": "Social.ShowLeaderboardUI();" },
		{ "trigger": "Social.LoadScores(leaderboardID, callback)", "contents": "Social.LoadScores(${1:String leaderboardID}, ${2:System.Action<Score[]> callback});" },
		{ "trigger": "JointSpring", "contents": "JointSpring" },
		{ "trigger": "JointSpring.spring", "contents": "JointSpring.spring" },
		{ "trigger": "JointSpring.targetPosition", "contents": "JointSpring.targetPosition" },
		{ "trigger": "JointSpring.damper", "contents": "JointSpring.damper" },
		{ "trigger": "LayerMask", "contents": "LayerMask" },
		{ "trigger": "LayerMask.NameToLayer(layerName)", "contents": "LayerMask.NameToLayer(${1:String layerName});" },
		{ "trigger": "LayerMask.value", "contents": "LayerMask.value" },
		{ "trigger": "LayerMask.LayerToName(layer)", "contents": "LayerMask.LayerToName(${1:int layer});" },
		{ "trigger": "GL", "contents": "GL" },
		{ "trigger": "GL.QUADS", "contents": "GL.QUADS" },
		{ "trigger": "GL.End()", "contents": "GL.End();" },
		{ "trigger": "GL.PopMatrix()", "contents": "GL.PopMatrix();" },
		{ "trigger": "GL.TexCoord3(x, y, z)", "contents": "GL.TexCoord3(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "GL.modelview", "contents": "GL.modelview" },
		{ "trigger": "GL.LINES", "contents": "GL.LINES" },
		{ "trigger": "GL.LoadIdentity()", "contents": "GL.LoadIdentity();" },
		{ "trigger": "GL.MultiTexCoord2(unit, x, y)", "contents": "GL.MultiTexCoord2(${1:int unit}, ${2:float x}, ${3:float y});" },
		{ "trigger": "GL.ClearWithSkybox(clearDepth, camera)", "contents": "GL.ClearWithSkybox(${1:boolean clearDepth}, ${2:Camera camera});" },
		{ "trigger": "GL.MultiTexCoord3(unit, x, y, z)", "contents": "GL.MultiTexCoord3(${1:int unit}, ${2:float x}, ${3:float y}, ${4:float z});" },
		{ "trigger": "GL.IssuePluginEvent(eventID)", "contents": "GL.IssuePluginEvent(${1:int eventID});" },
		{ "trigger": "GL.Begin(mode)", "contents": "GL.Begin(${1:int mode});" },
		{ "trigger": "GL.InvalidateState()", "contents": "GL.InvalidateState();" },
		{ "trigger": "GL.wireframe", "contents": "GL.wireframe" },
		{ "trigger": "GL.Vertex(v)", "contents": "GL.Vertex(${1:Vector3 v});" },
		{ "trigger": "GL.LoadPixelMatrix()", "contents": "GL.LoadPixelMatrix();" },
		{ "trigger": "GL.LoadPixelMatrix(left, right, bottom, top)", "contents": "GL.LoadPixelMatrix(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top});" },
		{ "trigger": "GL.LoadOrtho()", "contents": "GL.LoadOrtho();" },
		{ "trigger": "GL.PushMatrix()", "contents": "GL.PushMatrix();" },
		{ "trigger": "GL.TexCoord2(x, y)", "contents": "GL.TexCoord2(${1:float x}, ${2:float y});" },
		{ "trigger": "GL.Clear(clearDepth, clearColor, backgroundColor)", "contents": "GL.Clear(${1:boolean clearDepth}, ${2:boolean clearColor}, ${3:Color backgroundColor});" },
		{ "trigger": "GL.Viewport(pixelRect)", "contents": "GL.Viewport(${1:Rect pixelRect});" },
		{ "trigger": "GL.Vertex3(x, y, z)", "contents": "GL.Vertex3(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "GL.LoadProjectionMatrix(mat)", "contents": "GL.LoadProjectionMatrix(${1:Matrix4x4 mat});" },
		{ "trigger": "GL.TRIANGLE_STRIP", "contents": "GL.TRIANGLE_STRIP" },
		{ "trigger": "GL.MultMatrix(mat)", "contents": "GL.MultMatrix(${1:Matrix4x4 mat});" },
		{ "trigger": "GL.SetRevertBackfacing(revertBackFaces)", "contents": "GL.SetRevertBackfacing(${1:boolean revertBackFaces});" },
		{ "trigger": "GL.MultiTexCoord(unit, v)", "contents": "GL.MultiTexCoord(${1:int unit}, ${2:Vector3 v});" },
		{ "trigger": "GL.Color(c)", "contents": "GL.Color(${1:Color c});" },
		{ "trigger": "GL.TexCoord(v)", "contents": "GL.TexCoord(${1:Vector3 v});" },
		{ "trigger": "GL.GetGPUProjectionMatrix(proj, renderIntoTexture)", "contents": "GL.GetGPUProjectionMatrix(${1:Matrix4x4 proj}, ${2:boolean renderIntoTexture});" },
		{ "trigger": "GL.TRIANGLES", "contents": "GL.TRIANGLES" },
		{ "trigger": "ProceduralPropertyDescription", "contents": "ProceduralPropertyDescription" },
		{ "trigger": "ProceduralPropertyDescription.group", "contents": "ProceduralPropertyDescription.group" },
		{ "trigger": "ProceduralPropertyDescription.name", "contents": "ProceduralPropertyDescription.name" },
		{ "trigger": "ProceduralPropertyDescription.hasRange", "contents": "ProceduralPropertyDescription.hasRange" },
		{ "trigger": "ProceduralPropertyDescription.maximum", "contents": "ProceduralPropertyDescription.maximum" },
		{ "trigger": "ProceduralPropertyDescription.step", "contents": "ProceduralPropertyDescription.step" },
		{ "trigger": "ProceduralPropertyDescription.minimum", "contents": "ProceduralPropertyDescription.minimum" },
		{ "trigger": "ProceduralPropertyDescription.enumOptions", "contents": "ProceduralPropertyDescription.enumOptions" },
		{ "trigger": "ProceduralPropertyDescription.type", "contents": "ProceduralPropertyDescription.type" },
		{ "trigger": "Animator", "contents": "Animator" },
		{ "trigger": "Animator.IsParameterControlledByCurve(name)", "contents": "Animator.IsParameterControlledByCurve(${1:String name});" },
		{ "trigger": "Animator.IsParameterControlledByCurve(id)", "contents": "Animator.IsParameterControlledByCurve(${1:int id});" },
		{ "trigger": "Animator.GetFloat(name)", "contents": "Animator.GetFloat(${1:String name});" },
		{ "trigger": "Animator.GetFloat(id)", "contents": "Animator.GetFloat(${1:int id});" },
		{ "trigger": "Animator.GetNextAnimatorStateInfo(layerIndex)", "contents": "Animator.GetNextAnimatorStateInfo(${1:int layerIndex});" },
		{ "trigger": "Animator.layerCount", "contents": "Animator.layerCount" },
		{ "trigger": "Animator.SetIKPositionWeight(goal, value)", "contents": "Animator.SetIKPositionWeight(${1:AvatarIKGoal goal}, ${2:float value});" },
		{ "trigger": "Animator.targetRotation", "contents": "Animator.targetRotation" },
		{ "trigger": "Animator.GetInteger(name)", "contents": "Animator.GetInteger(${1:String name});" },
		{ "trigger": "Animator.GetInteger(id)", "contents": "Animator.GetInteger(${1:int id});" },
		{ "trigger": "Animator.deltaRotation", "contents": "Animator.deltaRotation" },
		{ "trigger": "Animator.GetBoneTransform(humanBoneId)", "contents": "Animator.GetBoneTransform(${1:HumanBodyBones humanBoneId});" },
		{ "trigger": "Animator.SetIKRotation(goal, goalRotation)", "contents": "Animator.SetIKRotation(${1:AvatarIKGoal goal}, ${2:Quaternion goalRotation});" },
		{ "trigger": "Animator.bodyRotation", "contents": "Animator.bodyRotation" },
		{ "trigger": "Animator.targetPosition", "contents": "Animator.targetPosition" },
		{ "trigger": "Animator.cullingMode", "contents": "Animator.cullingMode" },
		{ "trigger": "Animator.deltaPosition", "contents": "Animator.deltaPosition" },
		{ "trigger": "Animator.speed", "contents": "Animator.speed" },
		{ "trigger": "Animator.GetIKRotationWeight(goal)", "contents": "Animator.GetIKRotationWeight(${1:AvatarIKGoal goal});" },
		{ "trigger": "Animator.GetLayerWeight(layerIndex)", "contents": "Animator.GetLayerWeight(${1:int layerIndex});" },
		{ "trigger": "Animator.SetFloat(name, value)", "contents": "Animator.SetFloat(${1:String name}, ${2:float value});" },
		{ "trigger": "Animator.SetFloat(name, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:String name}, ${2:float value}, ${3:float dampTime}, ${4:float deltaTime});" },
		{ "trigger": "Animator.SetFloat(id, value)", "contents": "Animator.SetFloat(${1:int id}, ${2:float value});" },
		{ "trigger": "Animator.SetFloat(id, value, dampTime, deltaTime)", "contents": "Animator.SetFloat(${1:int id}, ${2:float value}, ${3:float dampTime}, ${4:float deltaTime});" },
		{ "trigger": "Animator.rootRotation", "contents": "Animator.rootRotation" },
		{ "trigger": "Animator.pivotWeight", "contents": "Animator.pivotWeight" },
		{ "trigger": "Animator.SetIKPosition(goal, goalPosition)", "contents": "Animator.SetIKPosition(${1:AvatarIKGoal goal}, ${2:Vector3 goalPosition});" },
		{ "trigger": "Animator.isMatchingTarget", "contents": "Animator.isMatchingTarget" },
		{ "trigger": "Animator.GetQuaternion(name)", "contents": "Animator.GetQuaternion(${1:String name});" },
		{ "trigger": "Animator.GetQuaternion(id)", "contents": "Animator.GetQuaternion(${1:int id});" },
		{ "trigger": "Animator.GetCurrentAnimatorStateInfo(layerIndex)", "contents": "Animator.GetCurrentAnimatorStateInfo(${1:int layerIndex});" },
		{ "trigger": "Animator.GetVector(name)", "contents": "Animator.GetVector(${1:String name});" },
		{ "trigger": "Animator.GetVector(id)", "contents": "Animator.GetVector(${1:int id});" },
		{ "trigger": "Animator.SetBool(name, value)", "contents": "Animator.SetBool(${1:String name}, ${2:boolean value});" },
		{ "trigger": "Animator.SetBool(id, value)", "contents": "Animator.SetBool(${1:int id}, ${2:boolean value});" },
		{ "trigger": "Animator.GetIKPosition(goal)", "contents": "Animator.GetIKPosition(${1:AvatarIKGoal goal});" },
		{ "trigger": "Animator.GetIKPositionWeight(goal)", "contents": "Animator.GetIKPositionWeight(${1:AvatarIKGoal goal});" },
		{ "trigger": "Animator.isHuman", "contents": "Animator.isHuman" },
		{ "trigger": "Animator.GetLayerName(layerIndex)", "contents": "Animator.GetLayerName(${1:int layerIndex});" },
		{ "trigger": "Animator.avatar", "contents": "Animator.avatar" },
		{ "trigger": "Animator.GetCurrentAnimationClipState(layerIndex)", "contents": "Animator.GetCurrentAnimationClipState(${1:int layerIndex});" },
		{ "trigger": "Animator.stabilizeFeet", "contents": "Animator.stabilizeFeet" },
		{ "trigger": "Animator.SetLookAtWeight(weight, bodyWeight, headWeight, eyesWeight, clampWeight)", "contents": "Animator.SetLookAtWeight(${1:float weight}, ${2:float bodyWeight = 0.00f}, ${3:float headWeight = 1.00f}, ${4:float eyesWeight = 0.00f}, ${5:float clampWeight = 0.50f});" },
		{ "trigger": "Animator.SetLookAtPosition(lookAtPosition)", "contents": "Animator.SetLookAtPosition(${1:Vector3 lookAtPosition});" },
		{ "trigger": "Animator.gravityWeight", "contents": "Animator.gravityWeight" },
		{ "trigger": "Animator.ForceStateNormalizedTime(normalizedTime)", "contents": "Animator.ForceStateNormalizedTime(${1:float normalizedTime});" },
		{ "trigger": "Animator.SetInteger(name, value)", "contents": "Animator.SetInteger(${1:String name}, ${2:int value});" },
		{ "trigger": "Animator.SetInteger(id, value)", "contents": "Animator.SetInteger(${1:int id}, ${2:int value});" },
		{ "trigger": "Animator.SetQuaternion(name, value)", "contents": "Animator.SetQuaternion(${1:String name}, ${2:Quaternion value});" },
		{ "trigger": "Animator.SetQuaternion(id, value)", "contents": "Animator.SetQuaternion(${1:int id}, ${2:Quaternion value});" },
		{ "trigger": "Animator.layersAffectMassCenter", "contents": "Animator.layersAffectMassCenter" },
		{ "trigger": "Animator.bodyPosition", "contents": "Animator.bodyPosition" },
		{ "trigger": "Animator.GetAnimatorTransitionInfo(layerIndex)", "contents": "Animator.GetAnimatorTransitionInfo(${1:int layerIndex});" },
		{ "trigger": "Animator.pivotPosition", "contents": "Animator.pivotPosition" },
		{ "trigger": "Animator.humanScale", "contents": "Animator.humanScale" },
		{ "trigger": "Animator.GetBool(name)", "contents": "Animator.GetBool(${1:String name});" },
		{ "trigger": "Animator.GetBool(id)", "contents": "Animator.GetBool(${1:int id});" },
		{ "trigger": "Animator.applyRootMotion", "contents": "Animator.applyRootMotion" },
		{ "trigger": "Animator.IsInTransition(layerIndex)", "contents": "Animator.IsInTransition(${1:int layerIndex});" },
		{ "trigger": "Animator.SetIKRotationWeight(goal, value)", "contents": "Animator.SetIKRotationWeight(${1:AvatarIKGoal goal}, ${2:float value});" },
		{ "trigger": "Animator.SetTarget(targetIndex, targetNormalizedTime)", "contents": "Animator.SetTarget(${1:AvatarTarget targetIndex}, ${2:float targetNormalizedTime});" },
		{ "trigger": "Animator.MatchTarget(matchPosition, matchRotation, targetBodyPart, weightMask, startNormalizedTime, targetNormalizedTime)", "contents": "Animator.MatchTarget(${1:Vector3 matchPosition}, ${2:Quaternion matchRotation}, ${3:AvatarTarget targetBodyPart}, ${4:MatchTargetWeightMask weightMask}, ${5:float startNormalizedTime}, ${6:float targetNormalizedTime = 1});" },
		{ "trigger": "Animator.SetLayerWeight(layerIndex, weight)", "contents": "Animator.SetLayerWeight(${1:int layerIndex}, ${2:float weight});" },
		{ "trigger": "Animator.feetPivotActive", "contents": "Animator.feetPivotActive" },
		{ "trigger": "Animator.animatePhysics", "contents": "Animator.animatePhysics" },
		{ "trigger": "Animator.GetIKRotation(goal)", "contents": "Animator.GetIKRotation(${1:AvatarIKGoal goal});" },
		{ "trigger": "Animator.GetNextAnimationClipState(layerIndex)", "contents": "Animator.GetNextAnimationClipState(${1:int layerIndex});" },
		{ "trigger": "Animator.StringToHash(name)", "contents": "Animator.StringToHash(${1:String name});" },
		{ "trigger": "Animator.InterruptMatchTarget(completeMatch)", "contents": "Animator.InterruptMatchTarget(${1:boolean completeMatch = true});" },
		{ "trigger": "Animator.SetVector(name, value)", "contents": "Animator.SetVector(${1:String name}, ${2:Vector3 value});" },
		{ "trigger": "Animator.SetVector(id, value)", "contents": "Animator.SetVector(${1:int id}, ${2:Vector3 value});" },
		{ "trigger": "Animator.IsControlled(transform)", "contents": "Animator.IsControlled(${1:Transform transform});" },
		{ "trigger": "Animator.rootPosition", "contents": "Animator.rootPosition" },
		{ "trigger": "LightmapData", "contents": "LightmapData" },
		{ "trigger": "LightmapData.lightmapNear", "contents": "LightmapData.lightmapNear" },
		{ "trigger": "LightmapData.lightmapFar", "contents": "LightmapData.lightmapFar" },
		{ "trigger": "Random", "contents": "Random" },
		{ "trigger": "Random.onUnitSphere", "contents": "Random.onUnitSphere" },
		{ "trigger": "Random.rotationUniform", "contents": "Random.rotationUniform" },
		{ "trigger": "Random.value", "contents": "Random.value" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:float min}, ${2:float max});" },
		{ "trigger": "Random.Range(min, max)", "contents": "Random.Range(${1:int min}, ${2:int max});" },
		{ "trigger": "Random.seed", "contents": "Random.seed" },
		{ "trigger": "Random.insideUnitCircle", "contents": "Random.insideUnitCircle" },
		{ "trigger": "Random.rotation", "contents": "Random.rotation" },
		{ "trigger": "Random.insideUnitSphere", "contents": "Random.insideUnitSphere" },
		{ "trigger": "Terrain", "contents": "Terrain" },
		{ "trigger": "Terrain.CreateTerrainGameObject(assignTerrain)", "contents": "Terrain.CreateTerrainGameObject(${1:TerrainData assignTerrain});" },
		{ "trigger": "Terrain.activeTerrain", "contents": "Terrain.activeTerrain" },
		{ "trigger": "Terrain.SetNeighbors(left, top, right, bottom)", "contents": "Terrain.SetNeighbors(${1:Terrain left}, ${2:Terrain top}, ${3:Terrain right}, ${4:Terrain bottom});" },
		{ "trigger": "Terrain.lightmapIndex", "contents": "Terrain.lightmapIndex" },
		{ "trigger": "Terrain.treeBillboardDistance", "contents": "Terrain.treeBillboardDistance" },
		{ "trigger": "Terrain.AddTreeInstance(instance)", "contents": "Terrain.AddTreeInstance(${1:TreeInstance instance});" },
		{ "trigger": "Terrain.heightmapPixelError", "contents": "Terrain.heightmapPixelError" },
		{ "trigger": "Terrain.castShadows", "contents": "Terrain.castShadows" },
		{ "trigger": "Terrain.terrainData", "contents": "Terrain.terrainData" },
		{ "trigger": "Terrain.basemapDistance", "contents": "Terrain.basemapDistance" },
		{ "trigger": "Terrain.Flush()", "contents": "Terrain.Flush();" },
		{ "trigger": "Terrain.treeMaximumFullLODCount", "contents": "Terrain.treeMaximumFullLODCount" },
		{ "trigger": "Terrain.treeCrossFadeLength", "contents": "Terrain.treeCrossFadeLength" },
		{ "trigger": "Terrain.SampleHeight(worldPosition)", "contents": "Terrain.SampleHeight(${1:Vector3 worldPosition});" },
		{ "trigger": "Terrain.heightmapMaximumLOD", "contents": "Terrain.heightmapMaximumLOD" },
		{ "trigger": "Terrain.editorRenderFlags", "contents": "Terrain.editorRenderFlags" },
		{ "trigger": "Terrain.detailObjectDensity", "contents": "Terrain.detailObjectDensity" },
		{ "trigger": "Terrain.detailObjectDistance", "contents": "Terrain.detailObjectDistance" },
		{ "trigger": "Terrain.treeDistance", "contents": "Terrain.treeDistance" },
		{ "trigger": "Terrain.GetPosition()", "contents": "Terrain.GetPosition();" },
		{ "trigger": "Terrain.materialTemplate", "contents": "Terrain.materialTemplate" },
		{ "trigger": "AudioClip", "contents": "AudioClip" },
		{ "trigger": "AudioClip.PCMSetPositionCallback(position)", "contents": "AudioClip.PCMSetPositionCallback(${1:int position});" },
		{ "trigger": "AudioClip.PCMReaderCallback(data)", "contents": "AudioClip.PCMReaderCallback(${1:float[] data});" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream)", "contents": "AudioClip.Create(${1:String name}, ${2:int lengthSamples}, ${3:int channels}, ${4:int frequency}, ${5:boolean _3D}, ${6:boolean stream});" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback)", "contents": "AudioClip.Create(${1:String name}, ${2:int lengthSamples}, ${3:int channels}, ${4:int frequency}, ${5:boolean _3D}, ${6:boolean stream}, ${7:PCMReaderCallback pcmreadercallback});" },
		{ "trigger": "AudioClip.Create(name, lengthSamples, channels, frequency, _3D, stream, pcmreadercallback, pcmsetpositioncallback)", "contents": "AudioClip.Create(${1:String name}, ${2:int lengthSamples}, ${3:int channels}, ${4:int frequency}, ${5:boolean _3D}, ${6:boolean stream}, ${7:PCMReaderCallback pcmreadercallback}, ${8:PCMSetPositionCallback pcmsetpositioncallback});" },
		{ "trigger": "AudioClip.channels", "contents": "AudioClip.channels" },
		{ "trigger": "AudioClip.isReadyToPlay", "contents": "AudioClip.isReadyToPlay" },
		{ "trigger": "AudioClip.length", "contents": "AudioClip.length" },
		{ "trigger": "AudioClip.frequency", "contents": "AudioClip.frequency" },
		{ "trigger": "AudioClip.samples", "contents": "AudioClip.samples" },
		{ "trigger": "AudioClip.GetData(data, offsetSamples)", "contents": "AudioClip.GetData(${1:float[] data}, ${2:int offsetSamples});" },
		{ "trigger": "AudioClip.SetData(data, offsetSamples)", "contents": "AudioClip.SetData(${1:float[] data}, ${2:int offsetSamples});" },
		{ "trigger": "CombineInstance", "contents": "CombineInstance" },
		{ "trigger": "CombineInstance.mesh", "contents": "CombineInstance.mesh" },
		{ "trigger": "CombineInstance.transform", "contents": "CombineInstance.transform" },
		{ "trigger": "CombineInstance.subMeshIndex", "contents": "CombineInstance.subMeshIndex" },
		{ "trigger": "Collision", "contents": "Collision" },
		{ "trigger": "Collision.rigidbody", "contents": "Collision.rigidbody" },
		{ "trigger": "Collision.collider", "contents": "Collision.collider" },
		{ "trigger": "Collision.contacts", "contents": "Collision.contacts" },
		{ "trigger": "Collision.gameObject", "contents": "Collision.gameObject" },
		{ "trigger": "Collision.transform", "contents": "Collision.transform" },
		{ "trigger": "Collision.relativeVelocity", "contents": "Collision.relativeVelocity" },
		{ "trigger": "NotificationServices", "contents": "NotificationServices" },
		{ "trigger": "NotificationServices.scheduledLocalNotifications", "contents": "NotificationServices.scheduledLocalNotifications" },
		{ "trigger": "NotificationServices.CancelAllLocalNotifications()", "contents": "NotificationServices.CancelAllLocalNotifications();" },
		{ "trigger": "NotificationServices.localNotifications", "contents": "NotificationServices.localNotifications" },
		{ "trigger": "NotificationServices.GetRemoteNotification(index)", "contents": "NotificationServices.GetRemoteNotification(${1:int index});" },
		{ "trigger": "NotificationServices.UnregisterForRemoteNotifications()", "contents": "NotificationServices.UnregisterForRemoteNotifications();" },
		{ "trigger": "NotificationServices.GetLocalNotification(index)", "contents": "NotificationServices.GetLocalNotification(${1:int index});" },
		{ "trigger": "NotificationServices.ScheduleLocalNotification(notification)", "contents": "NotificationServices.ScheduleLocalNotification(${1:LocalNotification notification});" },
		{ "trigger": "NotificationServices.enabledRemoteNotificationTypes", "contents": "NotificationServices.enabledRemoteNotificationTypes" },
		{ "trigger": "NotificationServices.ClearRemoteNotifications()", "contents": "NotificationServices.ClearRemoteNotifications();" },
		{ "trigger": "NotificationServices.RegisterForRemoteNotificationTypes(notificationTypes)", "contents": "NotificationServices.RegisterForRemoteNotificationTypes(${1:RemoteNotificationType notificationTypes});" },
		{ "trigger": "NotificationServices.PresentLocalNotificationNow(notification)", "contents": "NotificationServices.PresentLocalNotificationNow(${1:LocalNotification notification});" },
		{ "trigger": "NotificationServices.remoteNotificationCount", "contents": "NotificationServices.remoteNotificationCount" },
		{ "trigger": "NotificationServices.registrationError", "contents": "NotificationServices.registrationError" },
		{ "trigger": "NotificationServices.CancelLocalNotification(notification)", "contents": "NotificationServices.CancelLocalNotification(${1:LocalNotification notification});" },
		{ "trigger": "NotificationServices.ClearLocalNotifications()", "contents": "NotificationServices.ClearLocalNotifications();" },
		{ "trigger": "NotificationServices.remoteNotifications", "contents": "NotificationServices.remoteNotifications" },
		{ "trigger": "NotificationServices.deviceToken", "contents": "NotificationServices.deviceToken" },
		{ "trigger": "NotificationServices.localNotificationCount", "contents": "NotificationServices.localNotificationCount" },
		{ "trigger": "Cloth", "contents": "Cloth" },
		{ "trigger": "Cloth.selfCollision", "contents": "Cloth.selfCollision" },
		{ "trigger": "Cloth.externalAcceleration", "contents": "Cloth.externalAcceleration" },
		{ "trigger": "Cloth.bendingStiffness", "contents": "Cloth.bendingStiffness" },
		{ "trigger": "Cloth.stretchingStiffness", "contents": "Cloth.stretchingStiffness" },
		{ "trigger": "Cloth.enabled", "contents": "Cloth.enabled" },
		{ "trigger": "Cloth.vertices", "contents": "Cloth.vertices" },
		{ "trigger": "Cloth.thickness", "contents": "Cloth.thickness" },
		{ "trigger": "Cloth.randomAcceleration", "contents": "Cloth.randomAcceleration" },
		{ "trigger": "Cloth.damping", "contents": "Cloth.damping" },
		{ "trigger": "Cloth.normals", "contents": "Cloth.normals" },
		{ "trigger": "Cloth.useGravity", "contents": "Cloth.useGravity" },
		{ "trigger": "ComputeShader", "contents": "ComputeShader" },
		{ "trigger": "ComputeShader.SetTexture(kernelIndex, name, texture)", "contents": "ComputeShader.SetTexture(${1:int kernelIndex}, ${2:String name}, ${3:Texture texture});" },
		{ "trigger": "ComputeShader.SetFloat(name, val)", "contents": "ComputeShader.SetFloat(${1:String name}, ${2:float val});" },
		{ "trigger": "ComputeShader.SetBuffer(kernelIndex, name, buffer)", "contents": "ComputeShader.SetBuffer(${1:int kernelIndex}, ${2:String name}, ${3:ComputeBuffer buffer});" },
		{ "trigger": "ComputeShader.FindKernel(name)", "contents": "ComputeShader.FindKernel(${1:String name});" },
		{ "trigger": "ComputeShader.SetInt(name, val)", "contents": "ComputeShader.SetInt(${1:String name}, ${2:int val});" },
		{ "trigger": "ComputeShader.Dispatch(kernelIndex, threadsX, threadsY, threadsZ)", "contents": "ComputeShader.Dispatch(${1:int kernelIndex}, ${2:int threadsX}, ${3:int threadsY}, ${4:int threadsZ});" },
		{ "trigger": "ComputeShader.SetFloats(name, params values)", "contents": "ComputeShader.SetFloats(${1:String name}, ${2:float[] params values});" },
		{ "trigger": "ComputeShader.SetInts(name, params values)", "contents": "ComputeShader.SetInts(${1:String name}, ${2:int[] params values});" },
		{ "trigger": "ComputeShader.SetVector(name, val)", "contents": "ComputeShader.SetVector(${1:String name}, ${2:Vector4 val});" },
		{ "trigger": "CharacterJoint", "contents": "CharacterJoint" },
		{ "trigger": "CharacterJoint.swingAxis", "contents": "CharacterJoint.swingAxis" },
		{ "trigger": "CharacterJoint.lowTwistLimit", "contents": "CharacterJoint.lowTwistLimit" },
		{ "trigger": "CharacterJoint.highTwistLimit", "contents": "CharacterJoint.highTwistLimit" },
		{ "trigger": "CharacterJoint.swing2Limit", "contents": "CharacterJoint.swing2Limit" },
		{ "trigger": "CharacterJoint.swing1Limit", "contents": "CharacterJoint.swing1Limit" },
		{ "trigger": "FlashPlayer", "contents": "FlashPlayer" },
		{ "trigger": "FlashPlayer.TargetSwfVersion", "contents": "FlashPlayer.TargetSwfVersion" },
		{ "trigger": "FlashPlayer.TargetVersion", "contents": "FlashPlayer.TargetVersion" },
		{ "trigger": "Font", "contents": "Font" },
		{ "trigger": "Font.RequestCharactersInTexture(characters, size, style)", "contents": "Font.RequestCharactersInTexture(${1:String characters}, ${2:int size = 0}, ${3:FontStyle style = FontStyle.Normal});" },
		{ "trigger": "Font.FontTextureRebuildCallback()", "contents": "Font.FontTextureRebuildCallback();" },
		{ "trigger": "Font.HasCharacter(c)", "contents": "Font.HasCharacter(${1:char c});" },
		{ "trigger": "Font.material", "contents": "Font.material" },
		{ "trigger": "Font.textureRebuildCallback", "contents": "Font.textureRebuildCallback" },
		{ "trigger": "Font.characterInfo", "contents": "Font.characterInfo" },
		{ "trigger": "Font.GetCharacterInfo(ch, out info, size, style)", "contents": "Font.GetCharacterInfo(${1:char ch}, ${2:CharacterInfo out info}, ${3:int size = 0}, ${4:FontStyle style = FontStyle.Normal});" },
		{ "trigger": "Event", "contents": "Event" },
		{ "trigger": "Event.control", "contents": "Event.control" },
		{ "trigger": "Event.KeyboardEvent(key)", "contents": "Event.KeyboardEvent(${1:String key});" },
		{ "trigger": "Event.Use()", "contents": "Event.Use();" },
		{ "trigger": "Event.numeric", "contents": "Event.numeric" },
		{ "trigger": "Event.alt", "contents": "Event.alt" },
		{ "trigger": "Event.rawType", "contents": "Event.rawType" },
		{ "trigger": "Event.functionKey", "contents": "Event.functionKey" },
		{ "trigger": "Event.clickCount", "contents": "Event.clickCount" },
		{ "trigger": "Event.character", "contents": "Event.character" },
		{ "trigger": "Event.commandName", "contents": "Event.commandName" },
		{ "trigger": "Event.current", "contents": "Event.current" },
		{ "trigger": "Event.capsLock", "contents": "Event.capsLock" },
		{ "trigger": "Event.type", "contents": "Event.type" },
		{ "trigger": "Event.GetTypeForControl(controlID)", "contents": "Event.GetTypeForControl(${1:int controlID});" },
		{ "trigger": "Event.isMouse", "contents": "Event.isMouse" },
		{ "trigger": "Event.delta", "contents": "Event.delta" },
		{ "trigger": "Event.modifiers", "contents": "Event.modifiers" },
		{ "trigger": "Event.mousePosition", "contents": "Event.mousePosition" },
		{ "trigger": "Event.isKey", "contents": "Event.isKey" },
		{ "trigger": "Event.shift", "contents": "Event.shift" },
		{ "trigger": "Event.button", "contents": "Event.button" },
		{ "trigger": "Event.command", "contents": "Event.command" },
		{ "trigger": "Event.keyCode", "contents": "Event.keyCode" },
		{ "trigger": "Ray", "contents": "Ray" },
		{ "trigger": "Ray.origin", "contents": "Ray.origin" },
		{ "trigger": "Ray.direction", "contents": "Ray.direction" },
		{ "trigger": "Ray.ToString()", "contents": "Ray.ToString();" },
		{ "trigger": "Ray.ToString(format)", "contents": "Ray.ToString(${1:String format});" },
		{ "trigger": "Ray.GetPoint(distance)", "contents": "Ray.GetPoint(${1:float distance});" },
		{ "trigger": "Ray(origin, direction)", "contents": "Ray(${1:Vector3 origin}, ${2:Vector3 direction});" },
		{ "trigger": "TextAsset", "contents": "TextAsset" },
		{ "trigger": "TextAsset.text", "contents": "TextAsset.text" },
		{ "trigger": "TextAsset.bytes", "contents": "TextAsset.bytes" },
		{ "trigger": "Collider", "contents": "Collider" },
		{ "trigger": "Collider.OnCollisionStay(collisionInfo)", "contents": "Collider.OnCollisionStay(${1:Collision collisionInfo});" },
		{ "trigger": "Collider.sharedMaterial", "contents": "Collider.sharedMaterial" },
		{ "trigger": "Collider.OnTriggerStay(other)", "contents": "Collider.OnTriggerStay(${1:Collider other});" },
		{ "trigger": "Collider.material", "contents": "Collider.material" },
		{ "trigger": "Collider.enabled", "contents": "Collider.enabled" },
		{ "trigger": "Collider.bounds", "contents": "Collider.bounds" },
		{ "trigger": "Collider.Raycast(ray, out hitInfo, distance)", "contents": "Collider.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float distance});" },
		{ "trigger": "Collider.attachedRigidbody", "contents": "Collider.attachedRigidbody" },
		{ "trigger": "Collider.isTrigger", "contents": "Collider.isTrigger" },
		{ "trigger": "Collider.OnTriggerEnter(other)", "contents": "Collider.OnTriggerEnter(${1:Collider other});" },
		{ "trigger": "Collider.OnTriggerExit(other)", "contents": "Collider.OnTriggerExit(${1:Collider other});" },
		{ "trigger": "Collider.ClosestPointOnBounds(position)", "contents": "Collider.ClosestPointOnBounds(${1:Vector3 position});" },
		{ "trigger": "Collider.OnCollisionEnter(collisionInfo)", "contents": "Collider.OnCollisionEnter(${1:Collision collisionInfo});" },
		{ "trigger": "Collider.OnCollisionExit(collisionInfo)", "contents": "Collider.OnCollisionExit(${1:Collision collisionInfo});" },
		{ "trigger": "AccelerationEvent", "contents": "AccelerationEvent" },
		{ "trigger": "AccelerationEvent.acceleration", "contents": "AccelerationEvent.acceleration" },
		{ "trigger": "AccelerationEvent.deltaTime", "contents": "AccelerationEvent.deltaTime" },
		{ "trigger": "AudioSource", "contents": "AudioSource" },
		{ "trigger": "AudioSource.PlayClipAtPoint(clip, position, volume)", "contents": "AudioSource.PlayClipAtPoint(${1:AudioClip clip}, ${2:Vector3 position}, ${3:float volume = 1.0F});" },
		{ "trigger": "AudioSource.velocityUpdateMode", "contents": "AudioSource.velocityUpdateMode" },
		{ "trigger": "AudioSource.Pause()", "contents": "AudioSource.Pause();" },
		{ "trigger": "AudioSource.GetOutputData(samples, channel)", "contents": "AudioSource.GetOutputData(${1:float[] samples}, ${2:int channel});" },
		{ "trigger": "AudioSource.mute", "contents": "AudioSource.mute" },
		{ "trigger": "AudioSource.bypassEffects", "contents": "AudioSource.bypassEffects" },
		{ "trigger": "AudioSource.panLevel", "contents": "AudioSource.panLevel" },
		{ "trigger": "AudioSource.pitch", "contents": "AudioSource.pitch" },
		{ "trigger": "AudioSource.timeSamples", "contents": "AudioSource.timeSamples" },
		{ "trigger": "AudioSource.playOnAwake", "contents": "AudioSource.playOnAwake" },
		{ "trigger": "AudioSource.Play(delay)", "contents": "AudioSource.Play(${1:UInt64 delay = 0});" },
		{ "trigger": "AudioSource.clip", "contents": "AudioSource.clip" },
		{ "trigger": "AudioSource.dopplerLevel", "contents": "AudioSource.dopplerLevel" },
		{ "trigger": "AudioSource.Stop()", "contents": "AudioSource.Stop();" },
		{ "trigger": "AudioSource.priority", "contents": "AudioSource.priority" },
		{ "trigger": "AudioSource.spread", "contents": "AudioSource.spread" },
		{ "trigger": "AudioSource.GetSpectrumData(samples, channel, window)", "contents": "AudioSource.GetSpectrumData(${1:float[] samples}, ${2:int channel}, ${3:FFTWindow window});" },
		{ "trigger": "AudioSource.rolloffMode", "contents": "AudioSource.rolloffMode" },
		{ "trigger": "AudioSource.volume", "contents": "AudioSource.volume" },
		{ "trigger": "AudioSource.minDistance", "contents": "AudioSource.minDistance" },
		{ "trigger": "AudioSource.isPlaying", "contents": "AudioSource.isPlaying" },
		{ "trigger": "AudioSource.maxDistance", "contents": "AudioSource.maxDistance" },
		{ "trigger": "AudioSource.ignoreListenerVolume", "contents": "AudioSource.ignoreListenerVolume" },
		{ "trigger": "AudioSource.PlayOneShot(clip, volumeScale)", "contents": "AudioSource.PlayOneShot(${1:AudioClip clip}, ${2:float volumeScale = 1.0F});" },
		{ "trigger": "AudioSource.pan", "contents": "AudioSource.pan" },
		{ "trigger": "AudioSource.time", "contents": "AudioSource.time" },
		{ "trigger": "AudioSource.loop", "contents": "AudioSource.loop" },
		{ "trigger": "ClothSkinningCoefficient", "contents": "ClothSkinningCoefficient" },
		{ "trigger": "ClothSkinningCoefficient.collisionSphereRadius", "contents": "ClothSkinningCoefficient.collisionSphereRadius" },
		{ "trigger": "ClothSkinningCoefficient.maxDistanceBias", "contents": "ClothSkinningCoefficient.maxDistanceBias" },
		{ "trigger": "ClothSkinningCoefficient.maxDistance", "contents": "ClothSkinningCoefficient.maxDistance" },
		{ "trigger": "ClothSkinningCoefficient.collisionSphereDistance", "contents": "ClothSkinningCoefficient.collisionSphereDistance" },
		{ "trigger": "GUISettings", "contents": "GUISettings" },
		{ "trigger": "GUISettings.cursorFlashSpeed", "contents": "GUISettings.cursorFlashSpeed" },
		{ "trigger": "GUISettings.doubleClickSelectsWord", "contents": "GUISettings.doubleClickSelectsWord" },
		{ "trigger": "GUISettings.cursorColor", "contents": "GUISettings.cursorColor" },
		{ "trigger": "GUISettings.selectionColor", "contents": "GUISettings.selectionColor" },
		{ "trigger": "GUISettings.tripleClickSelectsLine", "contents": "GUISettings.tripleClickSelectsLine" },
		{ "trigger": "GUI", "contents": "GUI" },
		{ "trigger": "GUI.BringWindowToBack(windowID)", "contents": "GUI.BringWindowToBack(${1:int windowID});" },
		{ "trigger": "GUI.color", "contents": "GUI.color" },
		{ "trigger": "GUI.SetNextControlName(name)", "contents": "GUI.SetNextControlName(${1:String name});" },
		{ "trigger": "GUI.Label(position, text)", "contents": "GUI.Label(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.Label(position, image)", "contents": "GUI.Label(${1:Rect position}, ${2:Texture image});" },
		{ "trigger": "GUI.Label(position, content)", "contents": "GUI.Label(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "GUI.Label(position, text, style)", "contents": "GUI.Label(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Label(position, image, style)", "contents": "GUI.Label(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Label(position, content, style)", "contents": "GUI.Label(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Window(id, clientRect, func, text)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:String text});" },
		{ "trigger": "GUI.Window(id, clientRect, func, image)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:Texture image});" },
		{ "trigger": "GUI.Window(id, clientRect, func, content)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:GUIContent content});" },
		{ "trigger": "GUI.Window(id, clientRect, func, text, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:String text}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.Window(id, clientRect, func, image, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:Texture image}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.Window(id, clientRect, func, title, style)", "contents": "GUI.Window(${1:int id}, ${2:Rect clientRect}, ${3:WindowFunction func}, ${4:GUIContent title}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue)", "contents": "GUI.VerticalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float topValue}, ${5:float bottomValue});" },
		{ "trigger": "GUI.VerticalScrollbar(position, value, size, topValue, bottomValue, style)", "contents": "GUI.VerticalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float topValue}, ${5:float bottomValue}, ${6:GUIStyle style});" },
		{ "trigger": "GUI.skin", "contents": "GUI.skin" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect});" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:boolean alwaysShowHorizontal}, ${5:boolean alwaysShowVertical});" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar});" },
		{ "trigger": "GUI.BeginScrollView(position, scrollPosition, viewRect, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar)", "contents": "GUI.BeginScrollView(${1:Rect position}, ${2:Vector2 scrollPosition}, ${3:Rect viewRect}, ${4:boolean alwaysShowHorizontal}, ${5:boolean alwaysShowVertical}, ${6:GUIStyle horizontalScrollbar}, ${7:GUIStyle verticalScrollbar});" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue)", "contents": "GUI.HorizontalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float leftValue}, ${5:float rightValue});" },
		{ "trigger": "GUI.HorizontalScrollbar(position, value, size, leftValue, rightValue, style)", "contents": "GUI.HorizontalScrollbar(${1:Rect position}, ${2:float value}, ${3:float size}, ${4:float leftValue}, ${5:float rightValue}, ${6:GUIStyle style});" },
		{ "trigger": "GUI.TextField(position, text)", "contents": "GUI.TextField(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.TextField(position, text, maxLength)", "contents": "GUI.TextField(${1:Rect position}, ${2:String text}, ${3:int maxLength});" },
		{ "trigger": "GUI.TextField(position, text, style)", "contents": "GUI.TextField(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.TextField(position, text, maxLength, style)", "contents": "GUI.TextField(${1:Rect position}, ${2:String text}, ${3:int maxLength}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.BringWindowToFront(windowID)", "contents": "GUI.BringWindowToFront(${1:int windowID});" },
		{ "trigger": "GUI.depth", "contents": "GUI.depth" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue)", "contents": "GUI.VerticalSlider(${1:Rect position}, ${2:float value}, ${3:float topValue}, ${4:float bottomValue});" },
		{ "trigger": "GUI.VerticalSlider(position, value, topValue, bottomValue, slider, thumb)", "contents": "GUI.VerticalSlider(${1:Rect position}, ${2:float value}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUIStyle slider}, ${6:GUIStyle thumb});" },
		{ "trigger": "GUI.matrix", "contents": "GUI.matrix" },
		{ "trigger": "GUI.TextArea(position, text)", "contents": "GUI.TextArea(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.TextArea(position, text, maxLength)", "contents": "GUI.TextArea(${1:Rect position}, ${2:String text}, ${3:int maxLength});" },
		{ "trigger": "GUI.TextArea(position, text, style)", "contents": "GUI.TextArea(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.TextArea(position, text, maxLength, style)", "contents": "GUI.TextArea(${1:Rect position}, ${2:String text}, ${3:int maxLength}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.FocusWindow(windowID)", "contents": "GUI.FocusWindow(${1:int windowID});" },
		{ "trigger": "GUI.ScrollTo(position)", "contents": "GUI.ScrollTo(${1:Rect position});" },
		{ "trigger": "GUI.RepeatButton(position, text)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.RepeatButton(position, image)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:Texture image});" },
		{ "trigger": "GUI.RepeatButton(position, content)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "GUI.RepeatButton(position, text, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.RepeatButton(position, image, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.RepeatButton(position, content, style)", "contents": "GUI.RepeatButton(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.WindowFunction(id)", "contents": "GUI.WindowFunction(${1:int id});" },
		{ "trigger": "GUI.tooltip", "contents": "GUI.tooltip" },
		{ "trigger": "GUI.DragWindow(position)", "contents": "GUI.DragWindow(${1:Rect position});" },
		{ "trigger": "GUI.DragWindow()", "contents": "GUI.DragWindow();" },
		{ "trigger": "GUI.UnfocusWindow()", "contents": "GUI.UnfocusWindow();" },
		{ "trigger": "GUI.backgroundColor", "contents": "GUI.backgroundColor" },
		{ "trigger": "GUI.GetNameOfFocusedControl()", "contents": "GUI.GetNameOfFocusedControl();" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:String password}, ${3:char maskChar});" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:String password}, ${3:char maskChar}, ${4:int maxLength});" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, style)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:String password}, ${3:char maskChar}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.PasswordField(position, password, maskChar, maxLength, style)", "contents": "GUI.PasswordField(${1:Rect position}, ${2:String password}, ${3:char maskChar}, ${4:int maxLength}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.Toolbar(position, selected, texts)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:string[] texts});" },
		{ "trigger": "GUI.Toolbar(position, selected, images)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:Texture[] images});" },
		{ "trigger": "GUI.Toolbar(position, selected, content)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] content});" },
		{ "trigger": "GUI.Toolbar(position, selected, texts, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.Toolbar(position, selected, images, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.Toolbar(position, selected, contents, style)", "contents": "GUI.Toolbar(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] contents}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.Box(position, text)", "contents": "GUI.Box(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.Box(position, image)", "contents": "GUI.Box(${1:Rect position}, ${2:Texture image});" },
		{ "trigger": "GUI.Box(position, content)", "contents": "GUI.Box(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "GUI.Box(position, text, style)", "contents": "GUI.Box(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Box(position, image, style)", "contents": "GUI.Box(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Box(position, content, style)", "contents": "GUI.Box(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.enabled", "contents": "GUI.enabled" },
		{ "trigger": "GUI.Button(position, text)", "contents": "GUI.Button(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.Button(position, image)", "contents": "GUI.Button(${1:Rect position}, ${2:Texture image});" },
		{ "trigger": "GUI.Button(position, content)", "contents": "GUI.Button(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "GUI.Button(position, text, style)", "contents": "GUI.Button(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Button(position, image, style)", "contents": "GUI.Button(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.Button(position, content, style)", "contents": "GUI.Button(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue)", "contents": "GUI.HorizontalSlider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue});" },
		{ "trigger": "GUI.HorizontalSlider(position, value, leftValue, rightValue, slider, thumb)", "contents": "GUI.HorizontalSlider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIStyle slider}, ${6:GUIStyle thumb});" },
		{ "trigger": "GUI.BeginGroup(position)", "contents": "GUI.BeginGroup(${1:Rect position});" },
		{ "trigger": "GUI.BeginGroup(position, text)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:String text});" },
		{ "trigger": "GUI.BeginGroup(position, image)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:Texture image});" },
		{ "trigger": "GUI.BeginGroup(position, content)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "GUI.BeginGroup(position, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIStyle style});" },
		{ "trigger": "GUI.BeginGroup(position, text, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.BeginGroup(position, image, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.BeginGroup(position, content, style)", "contents": "GUI.BeginGroup(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:int xCount});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:int xCount});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, content, xCount)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] content}, ${4:int xCount});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, texts, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:string[] texts}, ${4:int xCount}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, images, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:Texture[] images}, ${4:int xCount}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.SelectionGrid(position, selected, contents, xCount, style)", "contents": "GUI.SelectionGrid(${1:Rect position}, ${2:int selected}, ${3:GUIContent[] contents}, ${4:int xCount}, ${5:GUIStyle style});" },
		{ "trigger": "GUI.contentColor", "contents": "GUI.contentColor" },
		{ "trigger": "GUI.changed", "contents": "GUI.changed" },
		{ "trigger": "GUI.EndGroup()", "contents": "GUI.EndGroup();" },
		{ "trigger": "GUI.Toggle(position, value, text)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:String text});" },
		{ "trigger": "GUI.Toggle(position, value, image)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:Texture image});" },
		{ "trigger": "GUI.Toggle(position, value, content)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:GUIContent content});" },
		{ "trigger": "GUI.Toggle(position, value, text, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:String text}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.Toggle(position, value, image, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:Texture image}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.Toggle(position, value, content, style)", "contents": "GUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:GUIContent content}, ${4:GUIStyle style});" },
		{ "trigger": "GUI.FocusControl(name)", "contents": "GUI.FocusControl(${1:String name});" },
		{ "trigger": "GUI.DrawTextureWithTexCoords(position, image, texCoords, alphaBlend)", "contents": "GUI.DrawTextureWithTexCoords(${1:Rect position}, ${2:Texture image}, ${3:Rect texCoords}, ${4:boolean alphaBlend = true});" },
		{ "trigger": "GUI.EndScrollView()", "contents": "GUI.EndScrollView();" },
		{ "trigger": "GUI.EndScrollView(handleScrollWheel)", "contents": "GUI.EndScrollView(${1:boolean handleScrollWheel});" },
		{ "trigger": "GUI.DrawTexture(position, image, scaleMode, alphaBlend, imageAspect)", "contents": "GUI.DrawTexture(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${4:boolean alphaBlend = true}, ${5:float imageAspect = 0});" },
		{ "trigger": "Handheld", "contents": "Handheld" },
		{ "trigger": "Handheld.use32BitDisplayBuffer", "contents": "Handheld.use32BitDisplayBuffer" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:iOSActivityIndicatorStyle style});" },
		{ "trigger": "Handheld.SetActivityIndicatorStyle(style)", "contents": "Handheld.SetActivityIndicatorStyle(${1:AndroidActivityIndicatorStyle style});" },
		{ "trigger": "Handheld.GetActivityIndicatorStyle()", "contents": "Handheld.GetActivityIndicatorStyle();" },
		{ "trigger": "Handheld.Vibrate()", "contents": "Handheld.Vibrate();" },
		{ "trigger": "Handheld.StopActivityIndicator()", "contents": "Handheld.StopActivityIndicator();" },
		{ "trigger": "Handheld.StartActivityIndicator()", "contents": "Handheld.StartActivityIndicator();" },
		{ "trigger": "Handheld.PlayFullScreenMovie(path, bgColor, controlMode, scalingMode)", "contents": "Handheld.PlayFullScreenMovie(${1:String path}, ${2:Color bgColor = Color.black}, ${3:FullScreenMovieControlMode controlMode = FullScreenMovieControlMode.Full}, ${4:FullScreenMovieScalingMode scalingMode = FullScreenMovieScalingMode.AspectFit});" },
		{ "trigger": "Application", "contents": "Application" },
		{ "trigger": "Application.backgroundLoadingPriority", "contents": "Application.backgroundLoadingPriority" },
		{ "trigger": "Application.streamedBytes", "contents": "Application.streamedBytes" },
		{ "trigger": "Application.isWebPlayer", "contents": "Application.isWebPlayer" },
		{ "trigger": "Application.Quit()", "contents": "Application.Quit();" },
		{ "trigger": "Application.loadedLevel", "contents": "Application.loadedLevel" },
		{ "trigger": "Application.streamingAssetsPath", "contents": "Application.streamingAssetsPath" },
		{ "trigger": "Application.LoadLevel(index)", "contents": "Application.LoadLevel(${1:int index});" },
		{ "trigger": "Application.LoadLevel(name)", "contents": "Application.LoadLevel(${1:String name});" },
		{ "trigger": "Application.platform", "contents": "Application.platform" },
		{ "trigger": "Application.RegisterLogCallbackThreaded(handler)", "contents": "Application.RegisterLogCallbackThreaded(${1:Application.LogCallback handler});" },
		{ "trigger": "Application.LoadLevelAdditiveAsync(index)", "contents": "Application.LoadLevelAdditiveAsync(${1:int index});" },
		{ "trigger": "Application.LoadLevelAdditiveAsync(levelName)", "contents": "Application.LoadLevelAdditiveAsync(${1:String levelName});" },
		{ "trigger": "Application.loadedLevelName", "contents": "Application.loadedLevelName" },
		{ "trigger": "Application.absoluteURL", "contents": "Application.absoluteURL" },
		{ "trigger": "Application.genuine", "contents": "Application.genuine" },
		{ "trigger": "Application.temporaryCachePath", "contents": "Application.temporaryCachePath" },
		{ "trigger": "Application.targetFrameRate", "contents": "Application.targetFrameRate" },
		{ "trigger": "Application.HasUserAuthorization(mode)", "contents": "Application.HasUserAuthorization(${1:UserAuthorization mode});" },
		{ "trigger": "Application.ExternalCall(functionName, params args)", "contents": "Application.ExternalCall(${1:String functionName}, ${2:object[] params args});" },
		{ "trigger": "Application.LoadLevelAsync(index)", "contents": "Application.LoadLevelAsync(${1:int index});" },
		{ "trigger": "Application.LoadLevelAsync(levelName)", "contents": "Application.LoadLevelAsync(${1:String levelName});" },
		{ "trigger": "Application.persistentDataPath", "contents": "Application.persistentDataPath" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelIndex)", "contents": "Application.GetStreamProgressForLevel(${1:int levelIndex});" },
		{ "trigger": "Application.GetStreamProgressForLevel(levelName)", "contents": "Application.GetStreamProgressForLevel(${1:String levelName});" },
		{ "trigger": "Application.systemLanguage", "contents": "Application.systemLanguage" },
		{ "trigger": "Application.LogCallback(condition, stackTrace, type)", "contents": "Application.LogCallback(${1:String condition}, ${2:String stackTrace}, ${3:LogType type});" },
		{ "trigger": "Application.dataPath", "contents": "Application.dataPath" },
		{ "trigger": "Application.webSecurityEnabled", "contents": "Application.webSecurityEnabled" },
		{ "trigger": "Application.genuineCheckAvailable", "contents": "Application.genuineCheckAvailable" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelIndex)", "contents": "Application.CanStreamedLevelBeLoaded(${1:int levelIndex});" },
		{ "trigger": "Application.CanStreamedLevelBeLoaded(levelName)", "contents": "Application.CanStreamedLevelBeLoaded(${1:String levelName});" },
		{ "trigger": "Application.isPlaying", "contents": "Application.isPlaying" },
		{ "trigger": "Application.isLoadingLevel", "contents": "Application.isLoadingLevel" },
		{ "trigger": "Application.RequestUserAuthorization(mode)", "contents": "Application.RequestUserAuthorization(${1:UserAuthorization mode});" },
		{ "trigger": "Application.LoadLevelAdditive(index)", "contents": "Application.LoadLevelAdditive(${1:int index});" },
		{ "trigger": "Application.LoadLevelAdditive(name)", "contents": "Application.LoadLevelAdditive(${1:String name});" },
		{ "trigger": "Application.CancelQuit()", "contents": "Application.CancelQuit();" },
		{ "trigger": "Application.ExternalEval(script)", "contents": "Application.ExternalEval(${1:String script});" },
		{ "trigger": "Application.OpenURL(url)", "contents": "Application.OpenURL(${1:String url});" },
		{ "trigger": "Application.internetReachability", "contents": "Application.internetReachability" },
		{ "trigger": "Application.RegisterLogCallback(handler)", "contents": "Application.RegisterLogCallback(${1:Application.LogCallback handler});" },
		{ "trigger": "Application.levelCount", "contents": "Application.levelCount" },
		{ "trigger": "Application.CaptureScreenshot(filename, superSize)", "contents": "Application.CaptureScreenshot(${1:String filename}, ${2:int superSize = 0});" },
		{ "trigger": "Application.isEditor", "contents": "Application.isEditor" },
		{ "trigger": "Application.srcValue", "contents": "Application.srcValue" },
		{ "trigger": "Application.unityVersion", "contents": "Application.unityVersion" },
		{ "trigger": "Application.runInBackground", "contents": "Application.runInBackground" },
		{ "trigger": "Camera", "contents": "Camera" },
		{ "trigger": "Camera.pixelHeight", "contents": "Camera.pixelHeight" },
		{ "trigger": "Camera.RenderWithShader(shader, replacementTag)", "contents": "Camera.RenderWithShader(${1:Shader shader}, ${2:String replacementTag});" },
		{ "trigger": "Camera.orthographic", "contents": "Camera.orthographic" },
		{ "trigger": "Camera.orthographicSize", "contents": "Camera.orthographicSize" },
		{ "trigger": "Camera.farClipPlane", "contents": "Camera.farClipPlane" },
		{ "trigger": "Camera.targetTexture", "contents": "Camera.targetTexture" },
		{ "trigger": "Camera.aspect", "contents": "Camera.aspect" },
		{ "trigger": "Camera.CopyFrom(other)", "contents": "Camera.CopyFrom(${1:Camera other});" },
		{ "trigger": "Camera.WorldToScreenPoint(position)", "contents": "Camera.WorldToScreenPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.ResetWorldToCameraMatrix()", "contents": "Camera.ResetWorldToCameraMatrix();" },
		{ "trigger": "Camera.ScreenToViewportPoint(position)", "contents": "Camera.ScreenToViewportPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.clearFlags", "contents": "Camera.clearFlags" },
		{ "trigger": "Camera.SetReplacementShader(shader, replacementTag)", "contents": "Camera.SetReplacementShader(${1:Shader shader}, ${2:String replacementTag});" },
		{ "trigger": "Camera.projectionMatrix", "contents": "Camera.projectionMatrix" },
		{ "trigger": "Camera.worldToCameraMatrix", "contents": "Camera.worldToCameraMatrix" },
		{ "trigger": "Camera.ViewportPointToRay(position)", "contents": "Camera.ViewportPointToRay(${1:Vector3 position});" },
		{ "trigger": "Camera.current", "contents": "Camera.current" },
		{ "trigger": "Camera.OnPreRender()", "contents": "Camera.OnPreRender();" },
		{ "trigger": "Camera.transparencySortMode", "contents": "Camera.transparencySortMode" },
		{ "trigger": "Camera.WorldToViewportPoint(position)", "contents": "Camera.WorldToViewportPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.backgroundColor", "contents": "Camera.backgroundColor" },
		{ "trigger": "Camera.OnPreCull()", "contents": "Camera.OnPreCull();" },
		{ "trigger": "Camera.ResetReplacementShader()", "contents": "Camera.ResetReplacementShader();" },
		{ "trigger": "Camera.main", "contents": "Camera.main" },
		{ "trigger": "Camera.depthTextureMode", "contents": "Camera.depthTextureMode" },
		{ "trigger": "Camera.OnRenderImage(source, destination)", "contents": "Camera.OnRenderImage(${1:RenderTexture source}, ${2:RenderTexture destination});" },
		{ "trigger": "Camera.layerCullDistances", "contents": "Camera.layerCullDistances" },
		{ "trigger": "Camera.renderingPath", "contents": "Camera.renderingPath" },
		{ "trigger": "Camera.fieldOfView", "contents": "Camera.fieldOfView" },
		{ "trigger": "Camera.ViewportToScreenPoint(position)", "contents": "Camera.ViewportToScreenPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.allCameras", "contents": "Camera.allCameras" },
		{ "trigger": "Camera.nearClipPlane", "contents": "Camera.nearClipPlane" },
		{ "trigger": "Camera.ResetProjectionMatrix()", "contents": "Camera.ResetProjectionMatrix();" },
		{ "trigger": "Camera.ScreenToWorldPoint(position)", "contents": "Camera.ScreenToWorldPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.OnRenderObject()", "contents": "Camera.OnRenderObject();" },
		{ "trigger": "Camera.pixelWidth", "contents": "Camera.pixelWidth" },
		{ "trigger": "Camera.OnPostRender()", "contents": "Camera.OnPostRender();" },
		{ "trigger": "Camera.layerCullSpherical", "contents": "Camera.layerCullSpherical" },
		{ "trigger": "Camera.rect", "contents": "Camera.rect" },
		{ "trigger": "Camera.ViewportToWorldPoint(position)", "contents": "Camera.ViewportToWorldPoint(${1:Vector3 position});" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:Cubemap cubemap}, ${2:int faceMask = 63});" },
		{ "trigger": "Camera.RenderToCubemap(cubemap, faceMask)", "contents": "Camera.RenderToCubemap(${1:RenderTexture cubemap}, ${2:int faceMask = 63});" },
		{ "trigger": "Camera.ResetAspect()", "contents": "Camera.ResetAspect();" },
		{ "trigger": "Camera.pixelRect", "contents": "Camera.pixelRect" },
		{ "trigger": "Camera.hdr", "contents": "Camera.hdr" },
		{ "trigger": "Camera.Render()", "contents": "Camera.Render();" },
		{ "trigger": "Camera.actualRenderingPath", "contents": "Camera.actualRenderingPath" },
		{ "trigger": "Camera.depth", "contents": "Camera.depth" },
		{ "trigger": "Camera.useOcclusionCulling", "contents": "Camera.useOcclusionCulling" },
		{ "trigger": "Camera.cameraToWorldMatrix", "contents": "Camera.cameraToWorldMatrix" },
		{ "trigger": "Camera.OnWillRenderObject()", "contents": "Camera.OnWillRenderObject();" },
		{ "trigger": "Camera.velocity", "contents": "Camera.velocity" },
		{ "trigger": "Camera.ScreenPointToRay(position)", "contents": "Camera.ScreenPointToRay(${1:Vector3 position});" },
		{ "trigger": "Camera.cullingMask", "contents": "Camera.cullingMask" },
		{ "trigger": "AndroidJNIHelper", "contents": "AndroidJNIHelper" },
		{ "trigger": "AndroidJNIHelper.ConvertFromJNIArray(array)", "contents": "AndroidJNIHelper.ConvertFromJNIArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(javaClass, methodName, signature, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:IntPtr javaClass}, ${2:String methodName}, ${3:String signature = \"\"}, ${4:boolean isStatic = false});" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:System.IntPtr jclass}, ${2:String methodName}, ${3:object[] args}, ${4:boolean isStatic});" },
		{ "trigger": "AndroidJNIHelper.GetMethodID(jclass, methodName, args, isStatic)", "contents": "AndroidJNIHelper.GetMethodID(${1:System.IntPtr jclass}, ${2:String methodName}, ${3:object[] args}, ${4:boolean isStatic});" },
		{ "trigger": "AndroidJNIHelper.ConvertToJNIArray(array)", "contents": "AndroidJNIHelper.ConvertToJNIArray(${1:System.Array array});" },
		{ "trigger": "AndroidJNIHelper.GetSignature(obj)", "contents": "AndroidJNIHelper.GetSignature(${1:object obj});" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:object[] args});" },
		{ "trigger": "AndroidJNIHelper.GetSignature(args)", "contents": "AndroidJNIHelper.GetSignature(${1:object[] args});" },
		{ "trigger": "AndroidJNIHelper.CreateJavaRunnable(runnable)", "contents": "AndroidJNIHelper.CreateJavaRunnable(${1:AndroidJavaRunnable runnable});" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(javaClass, signature)", "contents": "AndroidJNIHelper.GetConstructorID(${1:IntPtr javaClass}, ${2:String signature = \"\"});" },
		{ "trigger": "AndroidJNIHelper.GetConstructorID(jclass, args)", "contents": "AndroidJNIHelper.GetConstructorID(${1:System.IntPtr jclass}, ${2:object[] args});" },
		{ "trigger": "AndroidJNIHelper.debug", "contents": "AndroidJNIHelper.debug" },
		{ "trigger": "AndroidJNIHelper.CreateJNIArgArray(args)", "contents": "AndroidJNIHelper.CreateJNIArgArray(${1:object[] args});" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(javaClass, fieldName, signature, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:IntPtr javaClass}, ${2:String fieldName}, ${3:String signature = \"\"}, ${4:boolean isStatic = false});" },
		{ "trigger": "AndroidJNIHelper.GetFieldID(jclass, fieldName, isStatic)", "contents": "AndroidJNIHelper.GetFieldID(${1:System.IntPtr jclass}, ${2:String fieldName}, ${3:boolean isStatic});" },
		{ "trigger": "LensFlare", "contents": "LensFlare" },
		{ "trigger": "LensFlare.color", "contents": "LensFlare.color" },
		{ "trigger": "LensFlare.flare", "contents": "LensFlare.flare" },
		{ "trigger": "LensFlare.brightness", "contents": "LensFlare.brightness" },
		{ "trigger": "IScore", "contents": "IScore" },
		{ "trigger": "IScore.formattedValue", "contents": "IScore.formattedValue" },
		{ "trigger": "IScore.leaderboardID", "contents": "IScore.leaderboardID" },
		{ "trigger": "IScore.userID", "contents": "IScore.userID" },
		{ "trigger": "IScore.value", "contents": "IScore.value" },
		{ "trigger": "IScore.rank", "contents": "IScore.rank" },
		{ "trigger": "IScore.date", "contents": "IScore.date" },
		{ "trigger": "IScore.ReportScore(callback)", "contents": "IScore.ReportScore(${1:System.Action<bool> callback});" },
		{ "trigger": "Gyroscope", "contents": "Gyroscope" },
		{ "trigger": "Gyroscope.rotationRateUnbiased", "contents": "Gyroscope.rotationRateUnbiased" },
		{ "trigger": "Gyroscope.userAcceleration", "contents": "Gyroscope.userAcceleration" },
		{ "trigger": "Gyroscope.enabled", "contents": "Gyroscope.enabled" },
		{ "trigger": "Gyroscope.gravity", "contents": "Gyroscope.gravity" },
		{ "trigger": "Gyroscope.rotationRate", "contents": "Gyroscope.rotationRate" },
		{ "trigger": "Gyroscope.attitude", "contents": "Gyroscope.attitude" },
		{ "trigger": "Gyroscope.updateInterval", "contents": "Gyroscope.updateInterval" },
		{ "trigger": "ProceduralMaterial", "contents": "ProceduralMaterial" },
		{ "trigger": "ProceduralMaterial.GetProceduralFloat(inputName)", "contents": "ProceduralMaterial.GetProceduralFloat(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.CacheProceduralProperty(inputName, value)", "contents": "ProceduralMaterial.CacheProceduralProperty(${1:String inputName}, ${2:boolean value});" },
		{ "trigger": "ProceduralMaterial.RebuildTextures()", "contents": "ProceduralMaterial.RebuildTextures();" },
		{ "trigger": "ProceduralMaterial.GetProceduralBoolean(inputName)", "contents": "ProceduralMaterial.GetProceduralBoolean(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.isProcessing", "contents": "ProceduralMaterial.isProcessing" },
		{ "trigger": "ProceduralMaterial.SetProceduralVector(inputName, value)", "contents": "ProceduralMaterial.SetProceduralVector(${1:String inputName}, ${2:Vector4 value});" },
		{ "trigger": "ProceduralMaterial.substanceProcessorUsage", "contents": "ProceduralMaterial.substanceProcessorUsage" },
		{ "trigger": "ProceduralMaterial.SetProceduralBoolean(inputName, value)", "contents": "ProceduralMaterial.SetProceduralBoolean(${1:String inputName}, ${2:boolean value});" },
		{ "trigger": "ProceduralMaterial()", "contents": "ProceduralMaterial();" },
		{ "trigger": "ProceduralMaterial.isSupported", "contents": "ProceduralMaterial.isSupported" },
		{ "trigger": "ProceduralMaterial.animationUpdateRate", "contents": "ProceduralMaterial.animationUpdateRate" },
		{ "trigger": "ProceduralMaterial.HasProceduralProperty(inputName)", "contents": "ProceduralMaterial.HasProceduralProperty(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.cacheSize", "contents": "ProceduralMaterial.cacheSize" },
		{ "trigger": "ProceduralMaterial.RebuildTexturesImmediately()", "contents": "ProceduralMaterial.RebuildTexturesImmediately();" },
		{ "trigger": "ProceduralMaterial.GetProceduralTexture(inputName)", "contents": "ProceduralMaterial.GetProceduralTexture(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.SetProceduralEnum(inputName, value)", "contents": "ProceduralMaterial.SetProceduralEnum(${1:String inputName}, ${2:int value});" },
		{ "trigger": "ProceduralMaterial.ClearCache()", "contents": "ProceduralMaterial.ClearCache();" },
		{ "trigger": "ProceduralMaterial.SetProceduralColor(inputName, value)", "contents": "ProceduralMaterial.SetProceduralColor(${1:String inputName}, ${2:Color value});" },
		{ "trigger": "ProceduralMaterial.SetProceduralTexture(inputName, value)", "contents": "ProceduralMaterial.SetProceduralTexture(${1:String inputName}, ${2:Texture2D value});" },
		{ "trigger": "ProceduralMaterial.StopRebuilds()", "contents": "ProceduralMaterial.StopRebuilds();" },
		{ "trigger": "ProceduralMaterial.GetGeneratedTextures()", "contents": "ProceduralMaterial.GetGeneratedTextures();" },
		{ "trigger": "ProceduralMaterial.GetProceduralEnum(inputName)", "contents": "ProceduralMaterial.GetProceduralEnum(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.GetProceduralVector(inputName)", "contents": "ProceduralMaterial.GetProceduralVector(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.GetProceduralColor(inputName)", "contents": "ProceduralMaterial.GetProceduralColor(${1:String inputName});" },
		{ "trigger": "ProceduralMaterial.isLoadTimeGenerated", "contents": "ProceduralMaterial.isLoadTimeGenerated" },
		{ "trigger": "ProceduralMaterial.SetProceduralFloat(inputName, value)", "contents": "ProceduralMaterial.SetProceduralFloat(${1:String inputName}, ${2:float value});" },
		{ "trigger": "ProceduralMaterial.GetProceduralPropertyDescriptions()", "contents": "ProceduralMaterial.GetProceduralPropertyDescriptions();" },
		{ "trigger": "ProceduralMaterial.loadingBehavior", "contents": "ProceduralMaterial.loadingBehavior" },
		{ "trigger": "ProceduralMaterial.IsProceduralPropertyCached(inputName)", "contents": "ProceduralMaterial.IsProceduralPropertyCached(${1:String inputName});" },
		{ "trigger": "iPhoneSettings", "contents": "iPhoneSettings" },
		{ "trigger": "AudioChorusFilter", "contents": "AudioChorusFilter" },
		{ "trigger": "AudioChorusFilter.feedback", "contents": "AudioChorusFilter.feedback" },
		{ "trigger": "AudioChorusFilter.depth", "contents": "AudioChorusFilter.depth" },
		{ "trigger": "AudioChorusFilter.delay", "contents": "AudioChorusFilter.delay" },
		{ "trigger": "AudioChorusFilter.dryMix", "contents": "AudioChorusFilter.dryMix" },
		{ "trigger": "AudioChorusFilter.rate", "contents": "AudioChorusFilter.rate" },
		{ "trigger": "AudioChorusFilter.wetMix1", "contents": "AudioChorusFilter.wetMix1" },
		{ "trigger": "AudioChorusFilter.wetMix3", "contents": "AudioChorusFilter.wetMix3" },
		{ "trigger": "AudioChorusFilter.wetMix2", "contents": "AudioChorusFilter.wetMix2" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "String.Length", "contents": "String.Length" },
		{ "trigger": "String.string", "contents": "String.string" },
		{ "trigger": "RectOffset", "contents": "RectOffset" },
		{ "trigger": "RectOffset.right", "contents": "RectOffset.right" },
		{ "trigger": "RectOffset.vertical", "contents": "RectOffset.vertical" },
		{ "trigger": "RectOffset.bottom", "contents": "RectOffset.bottom" },
		{ "trigger": "RectOffset()", "contents": "RectOffset();" },
		{ "trigger": "RectOffset(left, right, top, bottom)", "contents": "RectOffset(${1:int left}, ${2:int right}, ${3:int top}, ${4:int bottom});" },
		{ "trigger": "RectOffset.top", "contents": "RectOffset.top" },
		{ "trigger": "RectOffset.Remove(rect)", "contents": "RectOffset.Remove(${1:Rect rect});" },
		{ "trigger": "RectOffset.Add(rect)", "contents": "RectOffset.Add(${1:Rect rect});" },
		{ "trigger": "RectOffset.horizontal", "contents": "RectOffset.horizontal" },
		{ "trigger": "RectOffset.left", "contents": "RectOffset.left" },
		{ "trigger": "Color32", "contents": "Color32" },
		{ "trigger": "Color32.a", "contents": "Color32.a" },
		{ "trigger": "Color32.b", "contents": "Color32.b" },
		{ "trigger": "Color32.g", "contents": "Color32.g" },
		{ "trigger": "Color32.Lerp(a, b, t)", "contents": "Color32.Lerp(${1:Color32 a}, ${2:Color32 b}, ${3:float t});" },
		{ "trigger": "Color32(r, g, b, a)", "contents": "Color32(${1:byte r}, ${2:byte g}, ${3:byte b}, ${4:byte a});" },
		{ "trigger": "Color32.r", "contents": "Color32.r" },
		{ "trigger": "Color32.ToString()", "contents": "Color32.ToString();" },
		{ "trigger": "Color32.ToString(format)", "contents": "Color32.ToString(${1:String format});" },
		{ "trigger": "Material", "contents": "Material" },
		{ "trigger": "Material.GetFloat(propertyName)", "contents": "Material.GetFloat(${1:String propertyName});" },
		{ "trigger": "Material.SetColor(propertyName, color)", "contents": "Material.SetColor(${1:String propertyName}, ${2:Color color});" },
		{ "trigger": "Material.SetFloat(propertyName, value)", "contents": "Material.SetFloat(${1:String propertyName}, ${2:float value});" },
		{ "trigger": "Material.color", "contents": "Material.color" },
		{ "trigger": "Material.GetTextureOffset(propertyName)", "contents": "Material.GetTextureOffset(${1:String propertyName});" },
		{ "trigger": "Material.SetTextureScale(propertyName, scale)", "contents": "Material.SetTextureScale(${1:String propertyName}, ${2:Vector2 scale});" },
		{ "trigger": "Material.mainTexture", "contents": "Material.mainTexture" },
		{ "trigger": "Material.SetTexture(propertyName, texture)", "contents": "Material.SetTexture(${1:String propertyName}, ${2:Texture texture});" },
		{ "trigger": "Material.GetTexture(propertyName)", "contents": "Material.GetTexture(${1:String propertyName});" },
		{ "trigger": "Material.SetMatrix(propertyName, matrix)", "contents": "Material.SetMatrix(${1:String propertyName}, ${2:Matrix4x4 matrix});" },
		{ "trigger": "Material(contents)", "contents": "Material(${1:String contents});" },
		{ "trigger": "Material(shader)", "contents": "Material(${1:Shader shader});" },
		{ "trigger": "Material(source)", "contents": "Material(${1:Material source});" },
		{ "trigger": "Material.mainTextureOffset", "contents": "Material.mainTextureOffset" },
		{ "trigger": "Material.SetTextureOffset(propertyName, offset)", "contents": "Material.SetTextureOffset(${1:String propertyName}, ${2:Vector2 offset});" },
		{ "trigger": "Material.mainTextureScale", "contents": "Material.mainTextureScale" },
		{ "trigger": "Material.HasProperty(propertyName)", "contents": "Material.HasProperty(${1:String propertyName});" },
		{ "trigger": "Material.SetBuffer(propertyName, buffer)", "contents": "Material.SetBuffer(${1:String propertyName}, ${2:ComputeBuffer buffer});" },
		{ "trigger": "Material.GetVector(propertyName)", "contents": "Material.GetVector(${1:String propertyName});" },
		{ "trigger": "Material.passCount", "contents": "Material.passCount" },
		{ "trigger": "Material.renderQueue", "contents": "Material.renderQueue" },
		{ "trigger": "Material.GetTextureScale(propertyName)", "contents": "Material.GetTextureScale(${1:String propertyName});" },
		{ "trigger": "Material.GetColor(propertyName)", "contents": "Material.GetColor(${1:String propertyName});" },
		{ "trigger": "Material.Lerp(start, end, t)", "contents": "Material.Lerp(${1:Material start}, ${2:Material end}, ${3:float t});" },
		{ "trigger": "Material.shader", "contents": "Material.shader" },
		{ "trigger": "Material.SetPass(pass)", "contents": "Material.SetPass(${1:int pass});" },
		{ "trigger": "Material.GetTag(tag, searchFallbacks, defaultValue)", "contents": "Material.GetTag(${1:String tag}, ${2:boolean searchFallbacks}, ${3:String defaultValue = \"\"});" },
		{ "trigger": "Material.SetVector(propertyName, vector)", "contents": "Material.SetVector(${1:String propertyName}, ${2:Vector4 vector});" },
		{ "trigger": "Material.CopyPropertiesFromMaterial(mat)", "contents": "Material.CopyPropertiesFromMaterial(${1:Material mat});" },
		{ "trigger": "Material.GetMatrix(propertyName)", "contents": "Material.GetMatrix(${1:String propertyName});" },
		{ "trigger": "Mathf", "contents": "Mathf" },
		{ "trigger": "Mathf.Asin(f)", "contents": "Mathf.Asin(${1:float f});" },
		{ "trigger": "Mathf.Log(f, p)", "contents": "Mathf.Log(${1:float f}, ${2:float p});" },
		{ "trigger": "Mathf.Log(f)", "contents": "Mathf.Log(${1:float f});" },
		{ "trigger": "Mathf.FloorToInt(f)", "contents": "Mathf.FloorToInt(${1:float f});" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:float a}, ${2:float b});" },
		{ "trigger": "Mathf.Min(params values)", "contents": "Mathf.Min(${1:float[] params values});" },
		{ "trigger": "Mathf.Min(a, b)", "contents": "Mathf.Min(${1:int a}, ${2:int b});" },
		{ "trigger": "Mathf.Min(params values)", "contents": "Mathf.Min(${1:int[] params values});" },
		{ "trigger": "Mathf.Sqrt(f)", "contents": "Mathf.Sqrt(${1:float f});" },
		{ "trigger": "Mathf.Abs(f)", "contents": "Mathf.Abs(${1:float f});" },
		{ "trigger": "Mathf.Abs(value)", "contents": "Mathf.Abs(${1:int value});" },
		{ "trigger": "Mathf.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDamp(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime});" },
		{ "trigger": "Mathf.Log10(f)", "contents": "Mathf.Log10(${1:float f});" },
		{ "trigger": "Mathf.Sin(f)", "contents": "Mathf.Sin(${1:float f});" },
		{ "trigger": "Mathf.Deg2Rad", "contents": "Mathf.Deg2Rad" },
		{ "trigger": "Mathf.LinearToGammaSpace(value)", "contents": "Mathf.LinearToGammaSpace(${1:float value});" },
		{ "trigger": "Mathf.Repeat(t, length)", "contents": "Mathf.Repeat(${1:float t}, ${2:float length});" },
		{ "trigger": "Mathf.Infinity", "contents": "Mathf.Infinity" },
		{ "trigger": "Mathf.LerpAngle(a, b, t)", "contents": "Mathf.LerpAngle(${1:float a}, ${2:float b}, ${3:float t});" },
		{ "trigger": "Mathf.Atan(f)", "contents": "Mathf.Atan(${1:float f});" },
		{ "trigger": "Mathf.Lerp(from, to, t)", "contents": "Mathf.Lerp(${1:float from}, ${2:float to}, ${3:float t});" },
		{ "trigger": "Mathf.Epsilon", "contents": "Mathf.Epsilon" },
		{ "trigger": "Mathf.Floor(f)", "contents": "Mathf.Floor(${1:float f});" },
		{ "trigger": "Mathf.InverseLerp(from, to, value)", "contents": "Mathf.InverseLerp(${1:float from}, ${2:float to}, ${3:float value});" },
		{ "trigger": "Mathf.ClosestPowerOfTwo(value)", "contents": "Mathf.ClosestPowerOfTwo(${1:int value});" },
		{ "trigger": "Mathf.SmoothStep(from, to, t)", "contents": "Mathf.SmoothStep(${1:float from}, ${2:float to}, ${3:float t});" },
		{ "trigger": "Mathf.Ceil(f)", "contents": "Mathf.Ceil(${1:float f});" },
		{ "trigger": "Mathf.DeltaAngle(current, target)", "contents": "Mathf.DeltaAngle(${1:float current}, ${2:float target});" },
		{ "trigger": "Mathf.PI", "contents": "Mathf.PI" },
		{ "trigger": "Mathf.SmoothDampAngle(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Mathf.SmoothDampAngle(${1:float current}, ${2:float target}, ${3:float ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime});" },
		{ "trigger": "Mathf.Rad2Deg", "contents": "Mathf.Rad2Deg" },
		{ "trigger": "Mathf.Cos(f)", "contents": "Mathf.Cos(${1:float f});" },
		{ "trigger": "Mathf.NegativeInfinity", "contents": "Mathf.NegativeInfinity" },
		{ "trigger": "Mathf.PerlinNoise(x, y)", "contents": "Mathf.PerlinNoise(${1:float x}, ${2:float y});" },
		{ "trigger": "Mathf.Atan2(y, x)", "contents": "Mathf.Atan2(${1:float y}, ${2:float x});" },
		{ "trigger": "Mathf.Approximately(a, b)", "contents": "Mathf.Approximately(${1:float a}, ${2:float b});" },
		{ "trigger": "Mathf.Exp(power)", "contents": "Mathf.Exp(${1:float power});" },
		{ "trigger": "Mathf.NextPowerOfTwo(value)", "contents": "Mathf.NextPowerOfTwo(${1:int value});" },
		{ "trigger": "Mathf.Acos(f)", "contents": "Mathf.Acos(${1:float f});" },
		{ "trigger": "Mathf.Round(f)", "contents": "Mathf.Round(${1:float f});" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:float value}, ${2:float min}, ${3:float max});" },
		{ "trigger": "Mathf.Clamp(value, min, max)", "contents": "Mathf.Clamp(${1:int value}, ${2:int min}, ${3:int max});" },
		{ "trigger": "Mathf.GammaToLinearSpace(value)", "contents": "Mathf.GammaToLinearSpace(${1:float value});" },
		{ "trigger": "Mathf.MoveTowardsAngle(current, target, maxDelta)", "contents": "Mathf.MoveTowardsAngle(${1:float current}, ${2:float target}, ${3:float maxDelta});" },
		{ "trigger": "Mathf.Pow(f, p)", "contents": "Mathf.Pow(${1:float f}, ${2:float p});" },
		{ "trigger": "Mathf.Clamp01(value)", "contents": "Mathf.Clamp01(${1:float value});" },
		{ "trigger": "Mathf.RoundToInt(f)", "contents": "Mathf.RoundToInt(${1:float f});" },
		{ "trigger": "Mathf.Sign(f)", "contents": "Mathf.Sign(${1:float f});" },
		{ "trigger": "Mathf.CeilToInt(f)", "contents": "Mathf.CeilToInt(${1:float f});" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:float a}, ${2:float b});" },
		{ "trigger": "Mathf.Max(params values)", "contents": "Mathf.Max(${1:float[] params values});" },
		{ "trigger": "Mathf.Max(a, b)", "contents": "Mathf.Max(${1:int a}, ${2:int b});" },
		{ "trigger": "Mathf.Max(params values)", "contents": "Mathf.Max(${1:int[] params values});" },
		{ "trigger": "Mathf.PingPong(t, length)", "contents": "Mathf.PingPong(${1:float t}, ${2:float length});" },
		{ "trigger": "Mathf.Tan(f)", "contents": "Mathf.Tan(${1:float f});" },
		{ "trigger": "Mathf.IsPowerOfTwo(value)", "contents": "Mathf.IsPowerOfTwo(${1:int value});" },
		{ "trigger": "Mathf.MoveTowards(current, target, maxDelta)", "contents": "Mathf.MoveTowards(${1:float current}, ${2:float target}, ${3:float maxDelta});" },
		{ "trigger": "LineRenderer", "contents": "LineRenderer" },
		{ "trigger": "LineRenderer.SetVertexCount(count)", "contents": "LineRenderer.SetVertexCount(${1:int count});" },
		{ "trigger": "LineRenderer.SetPosition(index, position)", "contents": "LineRenderer.SetPosition(${1:int index}, ${2:Vector3 position});" },
		{ "trigger": "LineRenderer.SetWidth(start, end)", "contents": "LineRenderer.SetWidth(${1:float start}, ${2:float end});" },
		{ "trigger": "LineRenderer.SetColors(start, end)", "contents": "LineRenderer.SetColors(${1:Color start}, ${2:Color end});" },
		{ "trigger": "LineRenderer.useWorldSpace", "contents": "LineRenderer.useWorldSpace" },
		{ "trigger": "Behaviour", "contents": "Behaviour" },
		{ "trigger": "Behaviour.enabled", "contents": "Behaviour.enabled" },
		{ "trigger": "HingeJoint", "contents": "HingeJoint" },
		{ "trigger": "HingeJoint.useMotor", "contents": "HingeJoint.useMotor" },
		{ "trigger": "HingeJoint.useLimits", "contents": "HingeJoint.useLimits" },
		{ "trigger": "HingeJoint.limits", "contents": "HingeJoint.limits" },
		{ "trigger": "HingeJoint.spring", "contents": "HingeJoint.spring" },
		{ "trigger": "HingeJoint.motor", "contents": "HingeJoint.motor" },
		{ "trigger": "HingeJoint.useSpring", "contents": "HingeJoint.useSpring" },
		{ "trigger": "HingeJoint.velocity", "contents": "HingeJoint.velocity" },
		{ "trigger": "HingeJoint.angle", "contents": "HingeJoint.angle" },
		{ "trigger": "OffMeshLinkData", "contents": "OffMeshLinkData" },
		{ "trigger": "OffMeshLinkData.linkType", "contents": "OffMeshLinkData.linkType" },
		{ "trigger": "OffMeshLinkData.activated", "contents": "OffMeshLinkData.activated" },
		{ "trigger": "OffMeshLinkData.offMeshLink", "contents": "OffMeshLinkData.offMeshLink" },
		{ "trigger": "OffMeshLinkData.valid", "contents": "OffMeshLinkData.valid" },
		{ "trigger": "OffMeshLinkData.endPos", "contents": "OffMeshLinkData.endPos" },
		{ "trigger": "OffMeshLinkData.startPos", "contents": "OffMeshLinkData.startPos" },
		{ "trigger": "Hashtable", "contents": "Hashtable" },
		{ "trigger": "Hashtable.Count", "contents": "Hashtable.Count" },
		{ "trigger": "Hashtable.Clear()", "contents": "Hashtable.Clear();" },
		{ "trigger": "Hashtable.Contains(key)", "contents": "Hashtable.Contains(${1:object key});" },
		{ "trigger": "Hashtable.Remove(key)", "contents": "Hashtable.Remove(${1:object key});" },
		{ "trigger": "Hashtable.Add(key, value)", "contents": "Hashtable.Add(${1:Object key}, ${2:Object value});" },
		{ "trigger": "Hashtable.ContainsKey(key)", "contents": "Hashtable.ContainsKey(${1:object key});" },
		{ "trigger": "Hashtable.ContainsValue(value)", "contents": "Hashtable.ContainsValue(${1:object value});" },
		{ "trigger": "NetworkView", "contents": "NetworkView" },
		{ "trigger": "NetworkView.group", "contents": "NetworkView.group" },
		{ "trigger": "NetworkView.isMine", "contents": "NetworkView.isMine" },
		{ "trigger": "NetworkView.viewID", "contents": "NetworkView.viewID" },
		{ "trigger": "NetworkView.Find(viewID)", "contents": "NetworkView.Find(${1:NetworkViewID viewID});" },
		{ "trigger": "NetworkView.observed", "contents": "NetworkView.observed" },
		{ "trigger": "NetworkView.RPC(name, mode, params args)", "contents": "NetworkView.RPC(${1:String name}, ${2:RPCMode mode}, ${3:object[] params args});" },
		{ "trigger": "NetworkView.RPC(name, target, params args)", "contents": "NetworkView.RPC(${1:String name}, ${2:NetworkPlayer target}, ${3:object[] params args});" },
		{ "trigger": "NetworkView.SetScope(player, relevancy)", "contents": "NetworkView.SetScope(${1:NetworkPlayer player}, ${2:boolean relevancy});" },
		{ "trigger": "NetworkView.owner", "contents": "NetworkView.owner" },
		{ "trigger": "NetworkView.stateSynchronization", "contents": "NetworkView.stateSynchronization" },
		{ "trigger": "GeometryUtility", "contents": "GeometryUtility" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(camera)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:Camera camera});" },
		{ "trigger": "GeometryUtility.CalculateFrustumPlanes(worldToProjectionMatrix)", "contents": "GeometryUtility.CalculateFrustumPlanes(${1:Matrix4x4 worldToProjectionMatrix});" },
		{ "trigger": "GeometryUtility.TestPlanesAABB(planes, bounds)", "contents": "GeometryUtility.TestPlanesAABB(${1:Plane[] planes}, ${2:Bounds bounds});" },
		{ "trigger": "PlayerPrefs", "contents": "PlayerPrefs" },
		{ "trigger": "PlayerPrefs.GetFloat(key, defaultValue)", "contents": "PlayerPrefs.GetFloat(${1:String key}, ${2:float defaultValue = 0.0F});" },
		{ "trigger": "PlayerPrefs.Save()", "contents": "PlayerPrefs.Save();" },
		{ "trigger": "PlayerPrefs.SetFloat(key, value)", "contents": "PlayerPrefs.SetFloat(${1:String key}, ${2:float value});" },
		{ "trigger": "PlayerPrefs.GetString(key, defaultValue)", "contents": "PlayerPrefs.GetString(${1:String key}, ${2:String defaultValue = \"\"});" },
		{ "trigger": "PlayerPrefs.SetString(key, value)", "contents": "PlayerPrefs.SetString(${1:String key}, ${2:String value});" },
		{ "trigger": "PlayerPrefs.SetInt(key, value)", "contents": "PlayerPrefs.SetInt(${1:String key}, ${2:int value});" },
		{ "trigger": "PlayerPrefs.GetInt(key, defaultValue)", "contents": "PlayerPrefs.GetInt(${1:String key}, ${2:int defaultValue = 0});" },
		{ "trigger": "PlayerPrefs.DeleteAll()", "contents": "PlayerPrefs.DeleteAll();" },
		{ "trigger": "PlayerPrefs.HasKey(key)", "contents": "PlayerPrefs.HasKey(${1:String key});" },
		{ "trigger": "PlayerPrefs.DeleteKey(key)", "contents": "PlayerPrefs.DeleteKey(${1:String key});" },
		{ "trigger": "TreeInstance", "contents": "TreeInstance" },
		{ "trigger": "TreeInstance.prototypeIndex", "contents": "TreeInstance.prototypeIndex" },
		{ "trigger": "TreeInstance.color", "contents": "TreeInstance.color" },
		{ "trigger": "TreeInstance.widthScale", "contents": "TreeInstance.widthScale" },
		{ "trigger": "TreeInstance.lightmapColor", "contents": "TreeInstance.lightmapColor" },
		{ "trigger": "TreeInstance.position", "contents": "TreeInstance.position" },
		{ "trigger": "TreeInstance.heightScale", "contents": "TreeInstance.heightScale" },
		{ "trigger": "iPhoneInput", "contents": "iPhoneInput" },
		{ "trigger": "Texture3D", "contents": "Texture3D" },
		{ "trigger": "Texture3D.GetPixels(miplevel)", "contents": "Texture3D.GetPixels(${1:int miplevel = 0});" },
		{ "trigger": "Texture3D.format", "contents": "Texture3D.format" },
		{ "trigger": "Texture3D.depth", "contents": "Texture3D.depth" },
		{ "trigger": "Texture3D.SetPixels(colors, miplevel)", "contents": "Texture3D.SetPixels(${1:Color[] colors}, ${2:int miplevel = 0});" },
		{ "trigger": "Texture3D(width, height, depth, format, mipmap)", "contents": "Texture3D(${1:int width}, ${2:int height}, ${3:int depth}, ${4:TextureFormat format}, ${5:boolean mipmap});" },
		{ "trigger": "Texture3D.Apply(updateMipmaps)", "contents": "Texture3D.Apply(${1:boolean updateMipmaps = true});" },
		{ "trigger": "AsyncOperation", "contents": "AsyncOperation" },
		{ "trigger": "AsyncOperation.priority", "contents": "AsyncOperation.priority" },
		{ "trigger": "AsyncOperation.progress", "contents": "AsyncOperation.progress" },
		{ "trigger": "AsyncOperation.isDone", "contents": "AsyncOperation.isDone" },
		{ "trigger": "AsyncOperation.allowSceneActivation", "contents": "AsyncOperation.allowSceneActivation" },
		{ "trigger": "TerrainCollider", "contents": "TerrainCollider" },
		{ "trigger": "TerrainCollider.terrainData", "contents": "TerrainCollider.terrainData" },
		{ "trigger": "SkinnedMeshRenderer", "contents": "SkinnedMeshRenderer" },
		{ "trigger": "SkinnedMeshRenderer.BakeMesh(mesh)", "contents": "SkinnedMeshRenderer.BakeMesh(${1:Mesh mesh});" },
		{ "trigger": "SkinnedMeshRenderer.sharedMesh", "contents": "SkinnedMeshRenderer.sharedMesh" },
		{ "trigger": "SkinnedMeshRenderer.localBounds", "contents": "SkinnedMeshRenderer.localBounds" },
		{ "trigger": "SkinnedMeshRenderer.bones", "contents": "SkinnedMeshRenderer.bones" },
		{ "trigger": "SkinnedMeshRenderer.updateWhenOffscreen", "contents": "SkinnedMeshRenderer.updateWhenOffscreen" },
		{ "trigger": "SkinnedMeshRenderer.rootBone", "contents": "SkinnedMeshRenderer.rootBone" },
		{ "trigger": "SkinnedMeshRenderer.quality", "contents": "SkinnedMeshRenderer.quality" },
		{ "trigger": "Particle", "contents": "Particle" },
		{ "trigger": "Particle.color", "contents": "Particle.color" },
		{ "trigger": "Particle.energy", "contents": "Particle.energy" },
		{ "trigger": "Particle.angularVelocity", "contents": "Particle.angularVelocity" },
		{ "trigger": "Particle.position", "contents": "Particle.position" },
		{ "trigger": "Particle.velocity", "contents": "Particle.velocity" },
		{ "trigger": "Particle.rotation", "contents": "Particle.rotation" },
		{ "trigger": "Particle.startEnergy", "contents": "Particle.startEnergy" },
		{ "trigger": "Particle.size", "contents": "Particle.size" },
		{ "trigger": "Keyframe", "contents": "Keyframe" },
		{ "trigger": "Keyframe.inTangent", "contents": "Keyframe.inTangent" },
		{ "trigger": "Keyframe(time, value)", "contents": "Keyframe(${1:float time}, ${2:float value});" },
		{ "trigger": "Keyframe(time, value, inTangent, outTangent)", "contents": "Keyframe(${1:float time}, ${2:float value}, ${3:float inTangent}, ${4:float outTangent});" },
		{ "trigger": "Keyframe.outTangent", "contents": "Keyframe.outTangent" },
		{ "trigger": "Keyframe.value", "contents": "Keyframe.value" },
		{ "trigger": "Keyframe.time", "contents": "Keyframe.time" },
		{ "trigger": "Light", "contents": "Light" },
		{ "trigger": "Light.shadows", "contents": "Light.shadows" },
		{ "trigger": "Light.areaSize", "contents": "Light.areaSize" },
		{ "trigger": "Light.renderMode", "contents": "Light.renderMode" },
		{ "trigger": "Light.color", "contents": "Light.color" },
		{ "trigger": "Light.flare", "contents": "Light.flare" },
		{ "trigger": "Light.range", "contents": "Light.range" },
		{ "trigger": "Light.spotAngle", "contents": "Light.spotAngle" },
		{ "trigger": "Light.shadowStrength", "contents": "Light.shadowStrength" },
		{ "trigger": "Light.intensity", "contents": "Light.intensity" },
		{ "trigger": "Light.cookie", "contents": "Light.cookie" },
		{ "trigger": "Light.shadowSoftnessFade", "contents": "Light.shadowSoftnessFade" },
		{ "trigger": "Light.shadowBias", "contents": "Light.shadowBias" },
		{ "trigger": "Light.shadowSoftness", "contents": "Light.shadowSoftness" },
		{ "trigger": "Light.type", "contents": "Light.type" },
		{ "trigger": "Light.cullingMask", "contents": "Light.cullingMask" },
		{ "trigger": "Flare", "contents": "Flare" },
		{ "trigger": "AudioHighPassFilter", "contents": "AudioHighPassFilter" },
		{ "trigger": "AudioHighPassFilter.highpassResonaceQ", "contents": "AudioHighPassFilter.highpassResonaceQ" },
		{ "trigger": "AudioHighPassFilter.cutoffFrequency", "contents": "AudioHighPassFilter.cutoffFrequency" },
		{ "trigger": "LocationInfo", "contents": "LocationInfo" },
		{ "trigger": "LocationInfo.timestamp", "contents": "LocationInfo.timestamp" },
		{ "trigger": "LocationInfo.altitude", "contents": "LocationInfo.altitude" },
		{ "trigger": "LocationInfo.longitude", "contents": "LocationInfo.longitude" },
		{ "trigger": "LocationInfo.horizontalAccuracy", "contents": "LocationInfo.horizontalAccuracy" },
		{ "trigger": "LocationInfo.latitude", "contents": "LocationInfo.latitude" },
		{ "trigger": "LocationInfo.verticalAccuracy", "contents": "LocationInfo.verticalAccuracy" },
		{ "trigger": "Profiler", "contents": "Profiler" },
		{ "trigger": "Profiler.AddFramesFromFile(file)", "contents": "Profiler.AddFramesFromFile(${1:String file});" },
		{ "trigger": "Profiler.BeginSample(name)", "contents": "Profiler.BeginSample(${1:String name});" },
		{ "trigger": "Profiler.BeginSample(name, targetObject)", "contents": "Profiler.BeginSample(${1:String name}, ${2:Object targetObject});" },
		{ "trigger": "Profiler.GetMonoHeapSize()", "contents": "Profiler.GetMonoHeapSize();" },
		{ "trigger": "Profiler.enabled", "contents": "Profiler.enabled" },
		{ "trigger": "Profiler.GetRuntimeMemorySize(o)", "contents": "Profiler.GetRuntimeMemorySize(${1:Object o});" },
		{ "trigger": "Profiler.EndSample()", "contents": "Profiler.EndSample();" },
		{ "trigger": "Profiler.GetMonoUsedSize()", "contents": "Profiler.GetMonoUsedSize();" },
		{ "trigger": "Profiler.enableBinaryLog", "contents": "Profiler.enableBinaryLog" },
		{ "trigger": "Profiler.logFile", "contents": "Profiler.logFile" },
		{ "trigger": "Profiler.usedHeapSize", "contents": "Profiler.usedHeapSize" },
		{ "trigger": "Cursor", "contents": "Cursor" },
		{ "trigger": "Cursor.SetCursor(texture, hotspot, cursorMode)", "contents": "Cursor.SetCursor(${1:Texture2D texture}, ${2:Vector2 hotspot}, ${3:CursorMode cursorMode});" },
		{ "trigger": "Range", "contents": "Range" },
		{ "trigger": "Range.count", "contents": "Range.count" },
		{ "trigger": "Range(fromValue, valueCount)", "contents": "Range(${1:int fromValue}, ${2:int valueCount});" },
		{ "trigger": "Range.from", "contents": "Range.from" },
		{ "trigger": "AssetBundle", "contents": "AssetBundle" },
		{ "trigger": "AssetBundle.Load(name)", "contents": "AssetBundle.Load(${1:String name});" },
		{ "trigger": "AssetBundle.Load(name, type)", "contents": "AssetBundle.Load(${1:String name}, ${2:Type type});" },
		{ "trigger": "AssetBundle.CreateFromFile(path)", "contents": "AssetBundle.CreateFromFile(${1:String path});" },
		{ "trigger": "AssetBundle.Unload(unloadAllLoadedObjects)", "contents": "AssetBundle.Unload(${1:boolean unloadAllLoadedObjects});" },
		{ "trigger": "AssetBundle.LoadAsync(name, type)", "contents": "AssetBundle.LoadAsync(${1:String name}, ${2:Type type});" },
		{ "trigger": "AssetBundle.LoadAll(type)", "contents": "AssetBundle.LoadAll(${1:Type type});" },
		{ "trigger": "AssetBundle.LoadAll()", "contents": "AssetBundle.LoadAll();" },
		{ "trigger": "AssetBundle.Contains(name)", "contents": "AssetBundle.Contains(${1:String name});" },
		{ "trigger": "AssetBundle.CreateFromMemory(binary)", "contents": "AssetBundle.CreateFromMemory(${1:byte[] binary});" },
		{ "trigger": "AssetBundle.mainAsset", "contents": "AssetBundle.mainAsset" },
		{ "trigger": "SkinnedCloth", "contents": "SkinnedCloth" },
		{ "trigger": "SkinnedCloth.worldAccelerationScale", "contents": "SkinnedCloth.worldAccelerationScale" },
		{ "trigger": "SkinnedCloth.SetEnabledFading(enabled, interpolationTime)", "contents": "SkinnedCloth.SetEnabledFading(${1:boolean enabled}, ${2:float interpolationTime = 0.5f});" },
		{ "trigger": "SkinnedCloth.coefficients", "contents": "SkinnedCloth.coefficients" },
		{ "trigger": "SkinnedCloth.worldVelocityScale", "contents": "SkinnedCloth.worldVelocityScale" },
		{ "trigger": "ParticleEmitter", "contents": "ParticleEmitter" },
		{ "trigger": "ParticleEmitter.angularVelocity", "contents": "ParticleEmitter.angularVelocity" },
		{ "trigger": "ParticleEmitter.maxEnergy", "contents": "ParticleEmitter.maxEnergy" },
		{ "trigger": "ParticleEmitter.Simulate(deltaTime)", "contents": "ParticleEmitter.Simulate(${1:float deltaTime});" },
		{ "trigger": "ParticleEmitter.particleCount", "contents": "ParticleEmitter.particleCount" },
		{ "trigger": "ParticleEmitter.worldVelocity", "contents": "ParticleEmitter.worldVelocity" },
		{ "trigger": "ParticleEmitter.minEnergy", "contents": "ParticleEmitter.minEnergy" },
		{ "trigger": "ParticleEmitter.ClearParticles()", "contents": "ParticleEmitter.ClearParticles();" },
		{ "trigger": "ParticleEmitter.rndAngularVelocity", "contents": "ParticleEmitter.rndAngularVelocity" },
		{ "trigger": "ParticleEmitter.enabled", "contents": "ParticleEmitter.enabled" },
		{ "trigger": "ParticleEmitter.rndRotation", "contents": "ParticleEmitter.rndRotation" },
		{ "trigger": "ParticleEmitter.emit", "contents": "ParticleEmitter.emit" },
		{ "trigger": "ParticleEmitter.minSize", "contents": "ParticleEmitter.minSize" },
		{ "trigger": "ParticleEmitter.minEmission", "contents": "ParticleEmitter.minEmission" },
		{ "trigger": "ParticleEmitter.rndVelocity", "contents": "ParticleEmitter.rndVelocity" },
		{ "trigger": "ParticleEmitter.maxSize", "contents": "ParticleEmitter.maxSize" },
		{ "trigger": "ParticleEmitter.emitterVelocityScale", "contents": "ParticleEmitter.emitterVelocityScale" },
		{ "trigger": "ParticleEmitter.localVelocity", "contents": "ParticleEmitter.localVelocity" },
		{ "trigger": "ParticleEmitter.particles", "contents": "ParticleEmitter.particles" },
		{ "trigger": "ParticleEmitter.maxEmission", "contents": "ParticleEmitter.maxEmission" },
		{ "trigger": "ParticleEmitter.Emit()", "contents": "ParticleEmitter.Emit();" },
		{ "trigger": "ParticleEmitter.Emit(count)", "contents": "ParticleEmitter.Emit(${1:int count});" },
		{ "trigger": "ParticleEmitter.Emit(pos, velocity, size, energy, color)", "contents": "ParticleEmitter.Emit(${1:Vector3 pos}, ${2:Vector3 velocity}, ${3:float size}, ${4:float energy}, ${5:Color color});" },
		{ "trigger": "ParticleEmitter.Emit(pos, velocity, size, energy, color, rotation, angularVelocity)", "contents": "ParticleEmitter.Emit(${1:Vector3 pos}, ${2:Vector3 velocity}, ${3:float size}, ${4:float energy}, ${5:Color color}, ${6:float rotation}, ${7:float angularVelocity});" },
		{ "trigger": "ParticleEmitter.useWorldSpace", "contents": "ParticleEmitter.useWorldSpace" },
		{ "trigger": "NetworkPlayer", "contents": "NetworkPlayer" },
		{ "trigger": "NetworkPlayer.externalIP", "contents": "NetworkPlayer.externalIP" },
		{ "trigger": "NetworkPlayer.externalPort", "contents": "NetworkPlayer.externalPort" },
		{ "trigger": "NetworkPlayer.ToString()", "contents": "NetworkPlayer.ToString();" },
		{ "trigger": "NetworkPlayer.guid", "contents": "NetworkPlayer.guid" },
		{ "trigger": "NetworkPlayer.ipAddress", "contents": "NetworkPlayer.ipAddress" },
		{ "trigger": "NetworkPlayer.port", "contents": "NetworkPlayer.port" },
		{ "trigger": "MovieTexture", "contents": "MovieTexture" },
		{ "trigger": "MovieTexture.Play()", "contents": "MovieTexture.Play();" },
		{ "trigger": "MovieTexture.Pause()", "contents": "MovieTexture.Pause();" },
		{ "trigger": "MovieTexture.Stop()", "contents": "MovieTexture.Stop();" },
		{ "trigger": "MovieTexture.audioClip", "contents": "MovieTexture.audioClip" },
		{ "trigger": "MovieTexture.isReadyToPlay", "contents": "MovieTexture.isReadyToPlay" },
		{ "trigger": "MovieTexture.duration", "contents": "MovieTexture.duration" },
		{ "trigger": "MovieTexture.isPlaying", "contents": "MovieTexture.isPlaying" },
		{ "trigger": "MovieTexture.loop", "contents": "MovieTexture.loop" },
		{ "trigger": "Security", "contents": "Security" },
		{ "trigger": "Security.PrefetchSocketPolicy(ip, atPort, timeout)", "contents": "Security.PrefetchSocketPolicy(${1:String ip}, ${2:int atPort}, ${3:int timeout = 3000});" },
		{ "trigger": "AndroidJavaObject", "contents": "AndroidJavaObject" },
		{ "trigger": "AndroidJavaObject.Set(fieldName, val)", "contents": "AndroidJavaObject.Set(${1:String fieldName}, ${2:FieldType val});" },
		{ "trigger": "AndroidJavaObject.Get(fieldName)", "contents": "AndroidJavaObject.Get(${1:String fieldName});" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, params args)", "contents": "AndroidJavaObject.CallStatic(${1:String methodName}, ${2:object[] params args});" },
		{ "trigger": "AndroidJavaObject.CallStatic(methodName, params args)", "contents": "AndroidJavaObject.CallStatic(${1:String methodName}, ${2:object[] params args});" },
		{ "trigger": "AndroidJavaObject.Dispose()", "contents": "AndroidJavaObject.Dispose();" },
		{ "trigger": "AndroidJavaObject.GetRawClass()", "contents": "AndroidJavaObject.GetRawClass();" },
		{ "trigger": "AndroidJavaObject.GetRawObject()", "contents": "AndroidJavaObject.GetRawObject();" },
		{ "trigger": "AndroidJavaObject.Call(methodName, params args)", "contents": "AndroidJavaObject.Call(${1:String methodName}, ${2:object[] params args});" },
		{ "trigger": "AndroidJavaObject.Call(methodName, params args)", "contents": "AndroidJavaObject.Call(${1:String methodName}, ${2:object[] params args});" },
		{ "trigger": "AndroidJavaObject.SetStatic(fieldName, val)", "contents": "AndroidJavaObject.SetStatic(${1:String fieldName}, ${2:FieldType val});" },
		{ "trigger": "AndroidJavaObject(className, params args)", "contents": "AndroidJavaObject(${1:String className}, ${2:object[] params args});" },
		{ "trigger": "AndroidJavaObject.GetStatic(fieldName)", "contents": "AndroidJavaObject.GetStatic(${1:String fieldName});" },
		{ "trigger": "LightmapSettings", "contents": "LightmapSettings" },
		{ "trigger": "LightmapSettings.lightmaps", "contents": "LightmapSettings.lightmaps" },
		{ "trigger": "LightmapSettings.lightmapsMode", "contents": "LightmapSettings.lightmapsMode" },
		{ "trigger": "LightmapSettings.bakedColorSpace", "contents": "LightmapSettings.bakedColorSpace" },
		{ "trigger": "LightmapSettings.lightProbes", "contents": "LightmapSettings.lightProbes" },
		{ "trigger": "GradientAlphaKey", "contents": "GradientAlphaKey" },
		{ "trigger": "GradientAlphaKey.alpha", "contents": "GradientAlphaKey.alpha" },
		{ "trigger": "GradientAlphaKey.time", "contents": "GradientAlphaKey.time" },
		{ "trigger": "GradientAlphaKey(alpha, time)", "contents": "GradientAlphaKey(${1:float alpha}, ${2:float time});" },
		{ "trigger": "WWW", "contents": "WWW" },
		{ "trigger": "WWW.textureNonReadable", "contents": "WWW.textureNonReadable" },
		{ "trigger": "WWW(url)", "contents": "WWW(${1:String url});" },
		{ "trigger": "WWW(url, form)", "contents": "WWW(${1:String url}, ${2:WWWForm form});" },
		{ "trigger": "WWW(url, postData)", "contents": "WWW(${1:String url}, ${2:byte[] postData});" },
		{ "trigger": "WWW(url, postData, headers)", "contents": "WWW(${1:String url}, ${2:byte[] postData}, ${3:Hashtable headers});" },
		{ "trigger": "WWW.movie", "contents": "WWW.movie" },
		{ "trigger": "WWW.UnEscapeURL(s, e)", "contents": "WWW.UnEscapeURL(${1:String s}, ${2:Encoding e = System.Text.Encoding.UTF8});" },
		{ "trigger": "WWW.EscapeURL(s, e)", "contents": "WWW.EscapeURL(${1:String s}, ${2:Encoding e = System.Text.Encoding.UTF8});" },
		{ "trigger": "WWW.url", "contents": "WWW.url" },
		{ "trigger": "WWW.text", "contents": "WWW.text" },
		{ "trigger": "WWW.GetAudioClip(threeD)", "contents": "WWW.GetAudioClip(${1:boolean threeD});" },
		{ "trigger": "WWW.GetAudioClip(threeD, stream)", "contents": "WWW.GetAudioClip(${1:boolean threeD}, ${2:boolean stream});" },
		{ "trigger": "WWW.GetAudioClip(threeD, stream, audioType)", "contents": "WWW.GetAudioClip(${1:boolean threeD}, ${2:boolean stream}, ${3:AudioType audioType});" },
		{ "trigger": "WWW.texture", "contents": "WWW.texture" },
		{ "trigger": "WWW.uploadProgress", "contents": "WWW.uploadProgress" },
		{ "trigger": "WWW.bytes", "contents": "WWW.bytes" },
		{ "trigger": "WWW.assetBundle", "contents": "WWW.assetBundle" },
		{ "trigger": "WWW.isDone", "contents": "WWW.isDone" },
		{ "trigger": "WWW.threadPriority", "contents": "WWW.threadPriority" },
		{ "trigger": "WWW.error", "contents": "WWW.error" },
		{ "trigger": "WWW.progress", "contents": "WWW.progress" },
		{ "trigger": "WWW.LoadFromCacheOrDownload(url, version, crc)", "contents": "WWW.LoadFromCacheOrDownload(${1:String url}, ${2:int version}, ${3:uint crc = 0});" },
		{ "trigger": "WWW.LoadUnityWeb()", "contents": "WWW.LoadUnityWeb();" },
		{ "trigger": "WWW.LoadImageIntoTexture(tex)", "contents": "WWW.LoadImageIntoTexture(${1:Texture2D tex});" },
		{ "trigger": "AnimatorStateInfo", "contents": "AnimatorStateInfo" },
		{ "trigger": "AnimatorStateInfo.IsTag(tag)", "contents": "AnimatorStateInfo.IsTag(${1:String tag});" },
		{ "trigger": "AnimatorStateInfo.IsName(name)", "contents": "AnimatorStateInfo.IsName(${1:String name});" },
		{ "trigger": "AnimatorStateInfo.length", "contents": "AnimatorStateInfo.length" },
		{ "trigger": "AnimatorStateInfo.tagHash", "contents": "AnimatorStateInfo.tagHash" },
		{ "trigger": "AnimatorStateInfo.nameHash", "contents": "AnimatorStateInfo.nameHash" },
		{ "trigger": "AnimatorStateInfo.normalizedTime", "contents": "AnimatorStateInfo.normalizedTime" },
		{ "trigger": "AnimatorStateInfo.loop", "contents": "AnimatorStateInfo.loop" },
		{ "trigger": "MasterServer", "contents": "MasterServer" },
		{ "trigger": "MasterServer.PollHostList()", "contents": "MasterServer.PollHostList();" },
		{ "trigger": "MasterServer.RequestHostList(gameTypeName)", "contents": "MasterServer.RequestHostList(${1:String gameTypeName});" },
		{ "trigger": "MasterServer.dedicatedServer", "contents": "MasterServer.dedicatedServer" },
		{ "trigger": "MasterServer.port", "contents": "MasterServer.port" },
		{ "trigger": "MasterServer.OnFailedToConnectToMasterServer(error)", "contents": "MasterServer.OnFailedToConnectToMasterServer(${1:NetworkConnectionError error});" },
		{ "trigger": "MasterServer.UnregisterHost()", "contents": "MasterServer.UnregisterHost();" },
		{ "trigger": "MasterServer.OnMasterServerEvent(msEvent)", "contents": "MasterServer.OnMasterServerEvent(${1:MasterServerEvent msEvent});" },
		{ "trigger": "MasterServer.ClearHostList()", "contents": "MasterServer.ClearHostList();" },
		{ "trigger": "MasterServer.updateRate", "contents": "MasterServer.updateRate" },
		{ "trigger": "MasterServer.ipAddress", "contents": "MasterServer.ipAddress" },
		{ "trigger": "MasterServer.RegisterHost(gameTypeName, gameName, comment)", "contents": "MasterServer.RegisterHost(${1:String gameTypeName}, ${2:String gameName}, ${3:String comment = \"\"});" },
		{ "trigger": "BoxCollider", "contents": "BoxCollider" },
		{ "trigger": "BoxCollider.center", "contents": "BoxCollider.center" },
		{ "trigger": "BoxCollider.size", "contents": "BoxCollider.size" },
		{ "trigger": "GameCenterPlatform", "contents": "GameCenterPlatform" },
		{ "trigger": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(value)", "contents": "GameCenterPlatform.ShowDefaultAchievementCompletionBanner(${1:boolean value});" },
		{ "trigger": "GameCenterPlatform.ResetAllAchievements(callback)", "contents": "GameCenterPlatform.ResetAllAchievements(${1:Action<bool> callback});" },
		{ "trigger": "GameCenterPlatform.ShowLeaderboardUI(leaderboardID, timeScope)", "contents": "GameCenterPlatform.ShowLeaderboardUI(${1:String leaderboardID}, ${2:TimeScope timeScope});" },
		{ "trigger": "AndroidInput", "contents": "AndroidInput" },
		{ "trigger": "AndroidInput.secondaryTouchHeight", "contents": "AndroidInput.secondaryTouchHeight" },
		{ "trigger": "AndroidInput.touchCountSecondary", "contents": "AndroidInput.touchCountSecondary" },
		{ "trigger": "AndroidInput.GetSecondaryTouch(index)", "contents": "AndroidInput.GetSecondaryTouch(${1:int index});" },
		{ "trigger": "AndroidInput.secondaryTouchWidth", "contents": "AndroidInput.secondaryTouchWidth" },
		{ "trigger": "AndroidInput.secondaryTouchEnabled", "contents": "AndroidInput.secondaryTouchEnabled" },
		{ "trigger": "WheelFrictionCurve", "contents": "WheelFrictionCurve" },
		{ "trigger": "WheelFrictionCurve.extremumValue", "contents": "WheelFrictionCurve.extremumValue" },
		{ "trigger": "WheelFrictionCurve.asymptoteSlip", "contents": "WheelFrictionCurve.asymptoteSlip" },
		{ "trigger": "WheelFrictionCurve.asymptoteValue", "contents": "WheelFrictionCurve.asymptoteValue" },
		{ "trigger": "WheelFrictionCurve.stiffness", "contents": "WheelFrictionCurve.stiffness" },
		{ "trigger": "WheelFrictionCurve.extremumSlip", "contents": "WheelFrictionCurve.extremumSlip" },
		{ "trigger": "NavMeshHit", "contents": "NavMeshHit" },
		{ "trigger": "NavMeshHit.position", "contents": "NavMeshHit.position" },
		{ "trigger": "NavMeshHit.distance", "contents": "NavMeshHit.distance" },
		{ "trigger": "NavMeshHit.hit", "contents": "NavMeshHit.hit" },
		{ "trigger": "NavMeshHit.mask", "contents": "NavMeshHit.mask" },
		{ "trigger": "NavMeshHit.normal", "contents": "NavMeshHit.normal" },
		{ "trigger": "MeshRenderer", "contents": "MeshRenderer" },
		{ "trigger": "Skybox", "contents": "Skybox" },
		{ "trigger": "Skybox.material", "contents": "Skybox.material" },
		{ "trigger": "LightProbeGroup", "contents": "LightProbeGroup" },
		{ "trigger": "LightProbeGroup.probePositions", "contents": "LightProbeGroup.probePositions" },
		{ "trigger": "PlayerPrefsException", "contents": "PlayerPrefsException" },
		{ "trigger": "ClothRenderer", "contents": "ClothRenderer" },
		{ "trigger": "ClothRenderer.pauseWhenNotVisible", "contents": "ClothRenderer.pauseWhenNotVisible" },
		{ "trigger": "Rigidbody", "contents": "Rigidbody" },
		{ "trigger": "Rigidbody.inertiaTensor", "contents": "Rigidbody.inertiaTensor" },
		{ "trigger": "Rigidbody.worldCenterOfMass", "contents": "Rigidbody.worldCenterOfMass" },
		{ "trigger": "Rigidbody.sleepVelocity", "contents": "Rigidbody.sleepVelocity" },
		{ "trigger": "Rigidbody.collisionDetectionMode", "contents": "Rigidbody.collisionDetectionMode" },
		{ "trigger": "Rigidbody.SweepTest(direction, out hitInfo, distance)", "contents": "Rigidbody.SweepTest(${1:Vector3 direction}, ${2:RaycastHit out hitInfo}, ${3:float distance = Mathf.Infinity});" },
		{ "trigger": "Rigidbody.IsSleeping()", "contents": "Rigidbody.IsSleeping();" },
		{ "trigger": "Rigidbody.ClosestPointOnBounds(position)", "contents": "Rigidbody.ClosestPointOnBounds(${1:Vector3 position});" },
		{ "trigger": "Rigidbody.isKinematic", "contents": "Rigidbody.isKinematic" },
		{ "trigger": "Rigidbody.useConeFriction", "contents": "Rigidbody.useConeFriction" },
		{ "trigger": "Rigidbody.GetPointVelocity(worldPoint)", "contents": "Rigidbody.GetPointVelocity(${1:Vector3 worldPoint});" },
		{ "trigger": "Rigidbody.SetDensity(density)", "contents": "Rigidbody.SetDensity(${1:float density});" },
		{ "trigger": "Rigidbody.angularVelocity", "contents": "Rigidbody.angularVelocity" },
		{ "trigger": "Rigidbody.AddRelativeForce(force, mode)", "contents": "Rigidbody.AddRelativeForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddRelativeForce(x, y, z, mode)", "contents": "Rigidbody.AddRelativeForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.Sleep()", "contents": "Rigidbody.Sleep();" },
		{ "trigger": "Rigidbody.OnCollisionEnter(collisionInfo)", "contents": "Rigidbody.OnCollisionEnter(${1:Collision collisionInfo});" },
		{ "trigger": "Rigidbody.interpolation", "contents": "Rigidbody.interpolation" },
		{ "trigger": "Rigidbody.SweepTestAll(direction, distance)", "contents": "Rigidbody.SweepTestAll(${1:Vector3 direction}, ${2:float distance = Mathf.Infinity});" },
		{ "trigger": "Rigidbody.detectCollisions", "contents": "Rigidbody.detectCollisions" },
		{ "trigger": "Rigidbody.angularDrag", "contents": "Rigidbody.angularDrag" },
		{ "trigger": "Rigidbody.AddExplosionForce(explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode)", "contents": "Rigidbody.AddExplosionForce(${1:float explosionForce}, ${2:Vector3 explosionPosition}, ${3:float explosionRadius}, ${4:float upwardsModifier = 0.0F}, ${5:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddRelativeTorque(torque, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddRelativeTorque(x, y, z, mode)", "contents": "Rigidbody.AddRelativeTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.maxAngularVelocity", "contents": "Rigidbody.maxAngularVelocity" },
		{ "trigger": "Rigidbody.centerOfMass", "contents": "Rigidbody.centerOfMass" },
		{ "trigger": "Rigidbody.drag", "contents": "Rigidbody.drag" },
		{ "trigger": "Rigidbody.velocity", "contents": "Rigidbody.velocity" },
		{ "trigger": "Rigidbody.WakeUp()", "contents": "Rigidbody.WakeUp();" },
		{ "trigger": "Rigidbody.freezeRotation", "contents": "Rigidbody.freezeRotation" },
		{ "trigger": "Rigidbody.rotation", "contents": "Rigidbody.rotation" },
		{ "trigger": "Rigidbody.GetRelativePointVelocity(relativePoint)", "contents": "Rigidbody.GetRelativePointVelocity(${1:Vector3 relativePoint});" },
		{ "trigger": "Rigidbody.OnCollisionStay(collisionInfo)", "contents": "Rigidbody.OnCollisionStay(${1:Collision collisionInfo});" },
		{ "trigger": "Rigidbody.AddTorque(torque, mode)", "contents": "Rigidbody.AddTorque(${1:Vector3 torque}, ${2:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddTorque(x, y, z, mode)", "contents": "Rigidbody.AddTorque(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddForce(force, mode)", "contents": "Rigidbody.AddForce(${1:Vector3 force}, ${2:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.AddForce(x, y, z, mode)", "contents": "Rigidbody.AddForce(${1:float x}, ${2:float y}, ${3:float z}, ${4:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.inertiaTensorRotation", "contents": "Rigidbody.inertiaTensorRotation" },
		{ "trigger": "Rigidbody.MovePosition(position)", "contents": "Rigidbody.MovePosition(${1:Vector3 position});" },
		{ "trigger": "Rigidbody.OnCollisionExit(collisionInfo)", "contents": "Rigidbody.OnCollisionExit(${1:Collision collisionInfo});" },
		{ "trigger": "Rigidbody.MoveRotation(rot)", "contents": "Rigidbody.MoveRotation(${1:Quaternion rot});" },
		{ "trigger": "Rigidbody.useGravity", "contents": "Rigidbody.useGravity" },
		{ "trigger": "Rigidbody.mass", "contents": "Rigidbody.mass" },
		{ "trigger": "Rigidbody.solverIterationCount", "contents": "Rigidbody.solverIterationCount" },
		{ "trigger": "Rigidbody.position", "contents": "Rigidbody.position" },
		{ "trigger": "Rigidbody.sleepAngularVelocity", "contents": "Rigidbody.sleepAngularVelocity" },
		{ "trigger": "Rigidbody.AddForceAtPosition(force, position, mode)", "contents": "Rigidbody.AddForceAtPosition(${1:Vector3 force}, ${2:Vector3 position}, ${3:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "Rigidbody.constraints", "contents": "Rigidbody.constraints" },
		{ "trigger": "RemoteNotification", "contents": "RemoteNotification" },
		{ "trigger": "RemoteNotification.userInfo", "contents": "RemoteNotification.userInfo" },
		{ "trigger": "RemoteNotification.alertBody", "contents": "RemoteNotification.alertBody" },
		{ "trigger": "RemoteNotification.soundName", "contents": "RemoteNotification.soundName" },
		{ "trigger": "RemoteNotification.applicationIconBadgeNumber", "contents": "RemoteNotification.applicationIconBadgeNumber" },
		{ "trigger": "RemoteNotification.hasAction", "contents": "RemoteNotification.hasAction" },
		{ "trigger": "NavMeshPath", "contents": "NavMeshPath" },
		{ "trigger": "NavMeshPath.status", "contents": "NavMeshPath.status" },
		{ "trigger": "NavMeshPath.corners", "contents": "NavMeshPath.corners" },
		{ "trigger": "NavMeshPath()", "contents": "NavMeshPath();" },
		{ "trigger": "NavMeshPath.ClearCorners()", "contents": "NavMeshPath.ClearCorners();" },
		{ "trigger": "ParticleRenderer", "contents": "ParticleRenderer" },
		{ "trigger": "ParticleRenderer.lengthScale", "contents": "ParticleRenderer.lengthScale" },
		{ "trigger": "ParticleRenderer.uvAnimationYTile", "contents": "ParticleRenderer.uvAnimationYTile" },
		{ "trigger": "ParticleRenderer.velocityScale", "contents": "ParticleRenderer.velocityScale" },
		{ "trigger": "ParticleRenderer.maxParticleSize", "contents": "ParticleRenderer.maxParticleSize" },
		{ "trigger": "ParticleRenderer.particleRenderMode", "contents": "ParticleRenderer.particleRenderMode" },
		{ "trigger": "ParticleRenderer.uvAnimationCycles", "contents": "ParticleRenderer.uvAnimationCycles" },
		{ "trigger": "ParticleRenderer.cameraVelocityScale", "contents": "ParticleRenderer.cameraVelocityScale" },
		{ "trigger": "ParticleRenderer.uvAnimationXTile", "contents": "ParticleRenderer.uvAnimationXTile" },
		{ "trigger": "TouchScreenKeyboard", "contents": "TouchScreenKeyboard" },
		{ "trigger": "TouchScreenKeyboard.autorotateToLandscapeRight", "contents": "TouchScreenKeyboard.autorotateToLandscapeRight" },
		{ "trigger": "TouchScreenKeyboard.autorotateToLandscapeLeft", "contents": "TouchScreenKeyboard.autorotateToLandscapeLeft" },
		{ "trigger": "TouchScreenKeyboard.area", "contents": "TouchScreenKeyboard.area" },
		{ "trigger": "TouchScreenKeyboard.text", "contents": "TouchScreenKeyboard.text" },
		{ "trigger": "TouchScreenKeyboard.wasCanceled", "contents": "TouchScreenKeyboard.wasCanceled" },
		{ "trigger": "TouchScreenKeyboard.visible", "contents": "TouchScreenKeyboard.visible" },
		{ "trigger": "TouchScreenKeyboard.autorotateToPortrait", "contents": "TouchScreenKeyboard.autorotateToPortrait" },
		{ "trigger": "TouchScreenKeyboard.done", "contents": "TouchScreenKeyboard.done" },
		{ "trigger": "TouchScreenKeyboard.hideInput", "contents": "TouchScreenKeyboard.hideInput" },
		{ "trigger": "TouchScreenKeyboard.active", "contents": "TouchScreenKeyboard.active" },
		{ "trigger": "TouchScreenKeyboard.Open(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder)", "contents": "TouchScreenKeyboard.Open(${1:String text}, ${2:TouchScreenKeyboardType keyboardType = TouchScreenKeyboardType.Default}, ${3:boolean autocorrection = true}, ${4:boolean multiline = false}, ${5:boolean secure = false}, ${6:boolean alert = false}, ${7:String textPlaceholder = \"\"});" },
		{ "trigger": "TouchScreenKeyboard.autorotateToPortraitUpsideDown", "contents": "TouchScreenKeyboard.autorotateToPortraitUpsideDown" },
		{ "trigger": "Gradient", "contents": "Gradient" },
		{ "trigger": "Gradient()", "contents": "Gradient();" },
		{ "trigger": "Gradient.Evaluate(time)", "contents": "Gradient.Evaluate(${1:float time});" },
		{ "trigger": "Gradient.SetKeys(colorKeys, alphaKeys)", "contents": "Gradient.SetKeys(${1:GradientColorKey[] colorKeys}, ${2:GradientAlphaKey[] alphaKeys});" },
		{ "trigger": "Transform", "contents": "Transform" },
		{ "trigger": "Transform.right", "contents": "Transform.right" },
		{ "trigger": "Transform.eulerAngles", "contents": "Transform.eulerAngles" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:Vector3 translation}, ${2:Space relativeTo = Space.Self});" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:float x}, ${2:float y}, ${3:float z}, ${4:Space relativeTo = Space.Self});" },
		{ "trigger": "Transform.Translate(translation, relativeTo)", "contents": "Transform.Translate(${1:Vector3 translation}, ${2:Transform relativeTo});" },
		{ "trigger": "Transform.Translate(x, y, z, relativeTo)", "contents": "Transform.Translate(${1:float x}, ${2:float y}, ${3:float z}, ${4:Transform relativeTo});" },
		{ "trigger": "Transform.InverseTransformDirection(direction)", "contents": "Transform.InverseTransformDirection(${1:Vector3 direction});" },
		{ "trigger": "Transform.InverseTransformDirection(x, y, z)", "contents": "Transform.InverseTransformDirection(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Transform.DetachChildren()", "contents": "Transform.DetachChildren();" },
		{ "trigger": "Transform.localRotation", "contents": "Transform.localRotation" },
		{ "trigger": "Transform.lossyScale", "contents": "Transform.lossyScale" },
		{ "trigger": "Transform.LookAt(target, worldUp)", "contents": "Transform.LookAt(${1:Transform target}, ${2:Vector3 worldUp = Vector3.up});" },
		{ "trigger": "Transform.LookAt(worldPosition, worldUp)", "contents": "Transform.LookAt(${1:Vector3 worldPosition}, ${2:Vector3 worldUp = Vector3.up});" },
		{ "trigger": "Transform.forward", "contents": "Transform.forward" },
		{ "trigger": "Transform.childCount", "contents": "Transform.childCount" },
		{ "trigger": "Transform.Rotate(eulerAngles, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 eulerAngles}, ${2:Space relativeTo = Space.Self});" },
		{ "trigger": "Transform.Rotate(xAngle, yAngle, zAngle, relativeTo)", "contents": "Transform.Rotate(${1:float xAngle}, ${2:float yAngle}, ${3:float zAngle}, ${4:Space relativeTo = Space.Self});" },
		{ "trigger": "Transform.Rotate(axis, angle, relativeTo)", "contents": "Transform.Rotate(${1:Vector3 axis}, ${2:float angle}, ${3:Space relativeTo = Space.Self});" },
		{ "trigger": "Transform.localPosition", "contents": "Transform.localPosition" },
		{ "trigger": "Transform.parent", "contents": "Transform.parent" },
		{ "trigger": "Transform.TransformPoint(position)", "contents": "Transform.TransformPoint(${1:Vector3 position});" },
		{ "trigger": "Transform.TransformPoint(x, y, z)", "contents": "Transform.TransformPoint(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Transform.IsChildOf(parent)", "contents": "Transform.IsChildOf(${1:Transform parent});" },
		{ "trigger": "Transform.TransformDirection(direction)", "contents": "Transform.TransformDirection(${1:Vector3 direction});" },
		{ "trigger": "Transform.TransformDirection(x, y, z)", "contents": "Transform.TransformDirection(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Transform.localToWorldMatrix", "contents": "Transform.localToWorldMatrix" },
		{ "trigger": "Transform.localEulerAngles", "contents": "Transform.localEulerAngles" },
		{ "trigger": "Transform.rotation", "contents": "Transform.rotation" },
		{ "trigger": "Transform.InverseTransformPoint(position)", "contents": "Transform.InverseTransformPoint(${1:Vector3 position});" },
		{ "trigger": "Transform.InverseTransformPoint(x, y, z)", "contents": "Transform.InverseTransformPoint(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Transform.worldToLocalMatrix", "contents": "Transform.worldToLocalMatrix" },
		{ "trigger": "Transform.RotateAround(point, axis, angle)", "contents": "Transform.RotateAround(${1:Vector3 point}, ${2:Vector3 axis}, ${3:float angle});" },
		{ "trigger": "Transform.localScale", "contents": "Transform.localScale" },
		{ "trigger": "Transform.up", "contents": "Transform.up" },
		{ "trigger": "Transform.position", "contents": "Transform.position" },
		{ "trigger": "Transform.root", "contents": "Transform.root" },
		{ "trigger": "Transform.Find(name)", "contents": "Transform.Find(${1:String name});" },
		{ "trigger": "ControllerColliderHit", "contents": "ControllerColliderHit" },
		{ "trigger": "ControllerColliderHit.rigidbody", "contents": "ControllerColliderHit.rigidbody" },
		{ "trigger": "ControllerColliderHit.collider", "contents": "ControllerColliderHit.collider" },
		{ "trigger": "ControllerColliderHit.moveLength", "contents": "ControllerColliderHit.moveLength" },
		{ "trigger": "ControllerColliderHit.point", "contents": "ControllerColliderHit.point" },
		{ "trigger": "ControllerColliderHit.gameObject", "contents": "ControllerColliderHit.gameObject" },
		{ "trigger": "ControllerColliderHit.moveDirection", "contents": "ControllerColliderHit.moveDirection" },
		{ "trigger": "ControllerColliderHit.transform", "contents": "ControllerColliderHit.transform" },
		{ "trigger": "ControllerColliderHit.controller", "contents": "ControllerColliderHit.controller" },
		{ "trigger": "ControllerColliderHit.normal", "contents": "ControllerColliderHit.normal" },
		{ "trigger": "ConfigurableJoint", "contents": "ConfigurableJoint" },
		{ "trigger": "ConfigurableJoint.angularXMotion", "contents": "ConfigurableJoint.angularXMotion" },
		{ "trigger": "ConfigurableJoint.targetRotation", "contents": "ConfigurableJoint.targetRotation" },
		{ "trigger": "ConfigurableJoint.secondaryAxis", "contents": "ConfigurableJoint.secondaryAxis" },
		{ "trigger": "ConfigurableJoint.lowAngularXLimit", "contents": "ConfigurableJoint.lowAngularXLimit" },
		{ "trigger": "ConfigurableJoint.zMotion", "contents": "ConfigurableJoint.zMotion" },
		{ "trigger": "ConfigurableJoint.targetPosition", "contents": "ConfigurableJoint.targetPosition" },
		{ "trigger": "ConfigurableJoint.targetAngularVelocity", "contents": "ConfigurableJoint.targetAngularVelocity" },
		{ "trigger": "ConfigurableJoint.yMotion", "contents": "ConfigurableJoint.yMotion" },
		{ "trigger": "ConfigurableJoint.projectionDistance", "contents": "ConfigurableJoint.projectionDistance" },
		{ "trigger": "ConfigurableJoint.highAngularXLimit", "contents": "ConfigurableJoint.highAngularXLimit" },
		{ "trigger": "ConfigurableJoint.projectionMode", "contents": "ConfigurableJoint.projectionMode" },
		{ "trigger": "ConfigurableJoint.angularYLimit", "contents": "ConfigurableJoint.angularYLimit" },
		{ "trigger": "ConfigurableJoint.xMotion", "contents": "ConfigurableJoint.xMotion" },
		{ "trigger": "ConfigurableJoint.angularYMotion", "contents": "ConfigurableJoint.angularYMotion" },
		{ "trigger": "ConfigurableJoint.angularZLimit", "contents": "ConfigurableJoint.angularZLimit" },
		{ "trigger": "ConfigurableJoint.rotationDriveMode", "contents": "ConfigurableJoint.rotationDriveMode" },
		{ "trigger": "ConfigurableJoint.zDrive", "contents": "ConfigurableJoint.zDrive" },
		{ "trigger": "ConfigurableJoint.slerpDrive", "contents": "ConfigurableJoint.slerpDrive" },
		{ "trigger": "ConfigurableJoint.angularZMotion", "contents": "ConfigurableJoint.angularZMotion" },
		{ "trigger": "ConfigurableJoint.projectionAngle", "contents": "ConfigurableJoint.projectionAngle" },
		{ "trigger": "ConfigurableJoint.linearLimit", "contents": "ConfigurableJoint.linearLimit" },
		{ "trigger": "ConfigurableJoint.targetVelocity", "contents": "ConfigurableJoint.targetVelocity" },
		{ "trigger": "ConfigurableJoint.xDrive", "contents": "ConfigurableJoint.xDrive" },
		{ "trigger": "ConfigurableJoint.angularXDrive", "contents": "ConfigurableJoint.angularXDrive" },
		{ "trigger": "ConfigurableJoint.swapBodies", "contents": "ConfigurableJoint.swapBodies" },
		{ "trigger": "ConfigurableJoint.configuredInWorldSpace", "contents": "ConfigurableJoint.configuredInWorldSpace" },
		{ "trigger": "ConfigurableJoint.angularYZDrive", "contents": "ConfigurableJoint.angularYZDrive" },
		{ "trigger": "ConfigurableJoint.yDrive", "contents": "ConfigurableJoint.yDrive" },
		{ "trigger": "ADInterstitialAd", "contents": "ADInterstitialAd" },
		{ "trigger": "ADInterstitialAd.actionInProgress", "contents": "ADInterstitialAd.actionInProgress" },
		{ "trigger": "ADInterstitialAd.CancelAction()", "contents": "ADInterstitialAd.CancelAction();" },
		{ "trigger": "ADInterstitialAd.visible", "contents": "ADInterstitialAd.visible" },
		{ "trigger": "ADInterstitialAd()", "contents": "ADInterstitialAd();" },
		{ "trigger": "ADInterstitialAd.error", "contents": "ADInterstitialAd.error" },
		{ "trigger": "ADInterstitialAd.loaded", "contents": "ADInterstitialAd.loaded" },
		{ "trigger": "ADInterstitialAd.Present()", "contents": "ADInterstitialAd.Present();" },
		{ "trigger": "SoftJointLimit", "contents": "SoftJointLimit" },
		{ "trigger": "SoftJointLimit.damper", "contents": "SoftJointLimit.damper" },
		{ "trigger": "SoftJointLimit.bounciness", "contents": "SoftJointLimit.bounciness" },
		{ "trigger": "SoftJointLimit.limit", "contents": "SoftJointLimit.limit" },
		{ "trigger": "SoftJointLimit.spring", "contents": "SoftJointLimit.spring" },
		{ "trigger": "Tree", "contents": "Tree" },
		{ "trigger": "Tree.data", "contents": "Tree.data" },
		{ "trigger": "TreePrototype", "contents": "TreePrototype" },
		{ "trigger": "TreePrototype.prefab", "contents": "TreePrototype.prefab" },
		{ "trigger": "TreePrototype.bendFactor", "contents": "TreePrototype.bendFactor" },
		{ "trigger": "Input", "contents": "Input" },
		{ "trigger": "Input.multiTouchEnabled", "contents": "Input.multiTouchEnabled" },
		{ "trigger": "Input.compensateSensors", "contents": "Input.compensateSensors" },
		{ "trigger": "Input.GetTouch(index)", "contents": "Input.GetTouch(${1:int index});" },
		{ "trigger": "Input.GetKey(name)", "contents": "Input.GetKey(${1:String name});" },
		{ "trigger": "Input.GetKey(key)", "contents": "Input.GetKey(${1:KeyCode key});" },
		{ "trigger": "Input.anyKeyDown", "contents": "Input.anyKeyDown" },
		{ "trigger": "Input.deviceOrientation", "contents": "Input.deviceOrientation" },
		{ "trigger": "Input.compositionCursorPos", "contents": "Input.compositionCursorPos" },
		{ "trigger": "Input.GetAccelerationEvent(index)", "contents": "Input.GetAccelerationEvent(${1:int index});" },
		{ "trigger": "Input.touchCount", "contents": "Input.touchCount" },
		{ "trigger": "Input.touches", "contents": "Input.touches" },
		{ "trigger": "Input.GetButtonUp(buttonName)", "contents": "Input.GetButtonUp(${1:String buttonName});" },
		{ "trigger": "Input.GetButton(buttonName)", "contents": "Input.GetButton(${1:String buttonName});" },
		{ "trigger": "Input.inputString", "contents": "Input.inputString" },
		{ "trigger": "Input.location", "contents": "Input.location" },
		{ "trigger": "Input.anyKey", "contents": "Input.anyKey" },
		{ "trigger": "Input.acceleration", "contents": "Input.acceleration" },
		{ "trigger": "Input.GetKeyDown(name)", "contents": "Input.GetKeyDown(${1:String name});" },
		{ "trigger": "Input.GetKeyDown(key)", "contents": "Input.GetKeyDown(${1:KeyCode key});" },
		{ "trigger": "Input.GetAxis(axisName)", "contents": "Input.GetAxis(${1:String axisName});" },
		{ "trigger": "Input.GetMouseButtonDown(button)", "contents": "Input.GetMouseButtonDown(${1:int button});" },
		{ "trigger": "Input.GetMouseButtonUp(button)", "contents": "Input.GetMouseButtonUp(${1:int button});" },
		{ "trigger": "Input.imeCompositionMode", "contents": "Input.imeCompositionMode" },
		{ "trigger": "Input.GetKeyUp(name)", "contents": "Input.GetKeyUp(${1:String name});" },
		{ "trigger": "Input.GetKeyUp(key)", "contents": "Input.GetKeyUp(${1:KeyCode key});" },
		{ "trigger": "Input.compass", "contents": "Input.compass" },
		{ "trigger": "Input.ResetInputAxes()", "contents": "Input.ResetInputAxes();" },
		{ "trigger": "Input.imeIsSelected", "contents": "Input.imeIsSelected" },
		{ "trigger": "Input.accelerationEventCount", "contents": "Input.accelerationEventCount" },
		{ "trigger": "Input.mousePosition", "contents": "Input.mousePosition" },
		{ "trigger": "Input.GetAxisRaw(axisName)", "contents": "Input.GetAxisRaw(${1:String axisName});" },
		{ "trigger": "Input.GetJoystickNames()", "contents": "Input.GetJoystickNames();" },
		{ "trigger": "Input.GetMouseButton(button)", "contents": "Input.GetMouseButton(${1:int button});" },
		{ "trigger": "Input.accelerationEvents", "contents": "Input.accelerationEvents" },
		{ "trigger": "Input.GetButtonDown(buttonName)", "contents": "Input.GetButtonDown(${1:String buttonName});" },
		{ "trigger": "Input.gyro", "contents": "Input.gyro" },
		{ "trigger": "Input.compositionString", "contents": "Input.compositionString" },
		{ "trigger": "Network", "contents": "Network" },
		{ "trigger": "Network.Disconnect(timeout)", "contents": "Network.Disconnect(${1:int timeout = 200});" },
		{ "trigger": "Network.isClient", "contents": "Network.isClient" },
		{ "trigger": "Network.OnDisconnectedFromServer(mode)", "contents": "Network.OnDisconnectedFromServer(${1:NetworkDisconnection mode});" },
		{ "trigger": "Network.OnPlayerConnected(player)", "contents": "Network.OnPlayerConnected(${1:NetworkPlayer player});" },
		{ "trigger": "Network.OnSerializeNetworkView(stream, info)", "contents": "Network.OnSerializeNetworkView(${1:BitStream stream}, ${2:NetworkMessageInfo info});" },
		{ "trigger": "Network.connections", "contents": "Network.connections" },
		{ "trigger": "Network.player", "contents": "Network.player" },
		{ "trigger": "Network.SetReceivingEnabled(player, group, enabled)", "contents": "Network.SetReceivingEnabled(${1:NetworkPlayer player}, ${2:int group}, ${3:boolean enabled});" },
		{ "trigger": "Network.CloseConnection(target, sendDisconnectionNotification)", "contents": "Network.CloseConnection(${1:NetworkPlayer target}, ${2:boolean sendDisconnectionNotification});" },
		{ "trigger": "Network.Destroy(viewID)", "contents": "Network.Destroy(${1:NetworkViewID viewID});" },
		{ "trigger": "Network.Destroy(gameObject)", "contents": "Network.Destroy(${1:GameObject gameObject});" },
		{ "trigger": "Network.OnConnectedToServer()", "contents": "Network.OnConnectedToServer();" },
		{ "trigger": "Network.connectionTesterIP", "contents": "Network.connectionTesterIP" },
		{ "trigger": "Network.maxConnections", "contents": "Network.maxConnections" },
		{ "trigger": "Network.incomingPassword", "contents": "Network.incomingPassword" },
		{ "trigger": "Network.isMessageQueueRunning", "contents": "Network.isMessageQueueRunning" },
		{ "trigger": "Network.proxyPassword", "contents": "Network.proxyPassword" },
		{ "trigger": "Network.DestroyPlayerObjects(playerID)", "contents": "Network.DestroyPlayerObjects(${1:NetworkPlayer playerID});" },
		{ "trigger": "Network.logLevel", "contents": "Network.logLevel" },
		{ "trigger": "Network.minimumAllocatableViewIDs", "contents": "Network.minimumAllocatableViewIDs" },
		{ "trigger": "Network.isServer", "contents": "Network.isServer" },
		{ "trigger": "Network.natFacilitatorIP", "contents": "Network.natFacilitatorIP" },
		{ "trigger": "Network.AllocateViewID()", "contents": "Network.AllocateViewID();" },
		{ "trigger": "Network.proxyIP", "contents": "Network.proxyIP" },
		{ "trigger": "Network.RemoveRPCs(playerID)", "contents": "Network.RemoveRPCs(${1:NetworkPlayer playerID});" },
		{ "trigger": "Network.RemoveRPCs(playerID, group)", "contents": "Network.RemoveRPCs(${1:NetworkPlayer playerID}, ${2:int group});" },
		{ "trigger": "Network.RemoveRPCs(viewID)", "contents": "Network.RemoveRPCs(${1:NetworkViewID viewID});" },
		{ "trigger": "Network.Instantiate(prefab, position, rotation, group)", "contents": "Network.Instantiate(${1:Object prefab}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:int group});" },
		{ "trigger": "Network.SetSendingEnabled(group, enabled)", "contents": "Network.SetSendingEnabled(${1:int group}, ${2:boolean enabled});" },
		{ "trigger": "Network.SetSendingEnabled(player, group, enabled)", "contents": "Network.SetSendingEnabled(${1:NetworkPlayer player}, ${2:int group}, ${3:boolean enabled});" },
		{ "trigger": "Network.OnFailedToConnect(error)", "contents": "Network.OnFailedToConnect(${1:NetworkConnectionError error});" },
		{ "trigger": "Network.GetLastPing(player)", "contents": "Network.GetLastPing(${1:NetworkPlayer player});" },
		{ "trigger": "Network.TestConnectionNAT(forceTest)", "contents": "Network.TestConnectionNAT(${1:boolean forceTest = false});" },
		{ "trigger": "Network.InitializeSecurity()", "contents": "Network.InitializeSecurity();" },
		{ "trigger": "Network.RemoveRPCsInGroup(group)", "contents": "Network.RemoveRPCsInGroup(${1:int group});" },
		{ "trigger": "Network.natFacilitatorPort", "contents": "Network.natFacilitatorPort" },
		{ "trigger": "Network.OnNetworkInstantiate(info)", "contents": "Network.OnNetworkInstantiate(${1:NetworkMessageInfo info});" },
		{ "trigger": "Network.InitializeServer(connections, listenPort, useNat)", "contents": "Network.InitializeServer(${1:int connections}, ${2:int listenPort}, ${3:boolean useNat});" },
		{ "trigger": "Network.proxyPort", "contents": "Network.proxyPort" },
		{ "trigger": "Network.SetLevelPrefix(prefix)", "contents": "Network.SetLevelPrefix(${1:int prefix});" },
		{ "trigger": "Network.OnPlayerDisconnected(player)", "contents": "Network.OnPlayerDisconnected(${1:NetworkPlayer player});" },
		{ "trigger": "Network.peerType", "contents": "Network.peerType" },
		{ "trigger": "Network.useProxy", "contents": "Network.useProxy" },
		{ "trigger": "Network.HavePublicAddress()", "contents": "Network.HavePublicAddress();" },
		{ "trigger": "Network.TestConnection(forceTest)", "contents": "Network.TestConnection(${1:boolean forceTest = false});" },
		{ "trigger": "Network.OnServerInitialized()", "contents": "Network.OnServerInitialized();" },
		{ "trigger": "Network.Connect(IP, remotePort, password)", "contents": "Network.Connect(${1:String IP}, ${2:int remotePort}, ${3:String password = \"\"});" },
		{ "trigger": "Network.Connect(IPs, remotePort, password)", "contents": "Network.Connect(${1:string[] IPs}, ${2:int remotePort}, ${3:String password = \"\"});" },
		{ "trigger": "Network.Connect(GUID, password)", "contents": "Network.Connect(${1:String GUID}, ${2:String password = \"\"});" },
		{ "trigger": "Network.Connect(hostData, password)", "contents": "Network.Connect(${1:HostData hostData}, ${2:String password = \"\"});" },
		{ "trigger": "Network.time", "contents": "Network.time" },
		{ "trigger": "Network.connectionTesterPort", "contents": "Network.connectionTesterPort" },
		{ "trigger": "Network.GetAveragePing(player)", "contents": "Network.GetAveragePing(${1:NetworkPlayer player});" },
		{ "trigger": "Network.sendRate", "contents": "Network.sendRate" },
		{ "trigger": "CharacterController", "contents": "CharacterController" },
		{ "trigger": "CharacterController.detectCollisions", "contents": "CharacterController.detectCollisions" },
		{ "trigger": "CharacterController.center", "contents": "CharacterController.center" },
		{ "trigger": "CharacterController.collisionFlags", "contents": "CharacterController.collisionFlags" },
		{ "trigger": "CharacterController.OnControllerColliderHit(hit)", "contents": "CharacterController.OnControllerColliderHit(${1:ControllerColliderHit hit});" },
		{ "trigger": "CharacterController.Move(motion)", "contents": "CharacterController.Move(${1:Vector3 motion});" },
		{ "trigger": "CharacterController.radius", "contents": "CharacterController.radius" },
		{ "trigger": "CharacterController.stepOffset", "contents": "CharacterController.stepOffset" },
		{ "trigger": "CharacterController.height", "contents": "CharacterController.height" },
		{ "trigger": "CharacterController.SimpleMove(speed)", "contents": "CharacterController.SimpleMove(${1:Vector3 speed});" },
		{ "trigger": "CharacterController.slopeLimit", "contents": "CharacterController.slopeLimit" },
		{ "trigger": "CharacterController.velocity", "contents": "CharacterController.velocity" },
		{ "trigger": "CharacterController.isGrounded", "contents": "CharacterController.isGrounded" },
		{ "trigger": "AndroidJavaClass", "contents": "AndroidJavaClass" },
		{ "trigger": "AndroidJavaClass(className)", "contents": "AndroidJavaClass(${1:String className});" },
		{ "trigger": "RenderTexture", "contents": "RenderTexture" },
		{ "trigger": "RenderTexture.useMipMap", "contents": "RenderTexture.useMipMap" },
		{ "trigger": "RenderTexture.volumeDepth", "contents": "RenderTexture.volumeDepth" },
		{ "trigger": "RenderTexture.SetGlobalShaderProperty(propertyName)", "contents": "RenderTexture.SetGlobalShaderProperty(${1:String propertyName});" },
		{ "trigger": "RenderTexture.enableRandomWrite", "contents": "RenderTexture.enableRandomWrite" },
		{ "trigger": "RenderTexture.GetTemporary(width, height, depthBuffer, format, readWrite)", "contents": "RenderTexture.GetTemporary(${1:int width}, ${2:int height}, ${3:int depthBuffer = 0}, ${4:RenderTextureFormat format = RenderTextureFormat.Default}, ${5:RenderTextureReadWrite readWrite = RenderTextureReadWrite.Default});" },
		{ "trigger": "RenderTexture.isVolume", "contents": "RenderTexture.isVolume" },
		{ "trigger": "RenderTexture.format", "contents": "RenderTexture.format" },
		{ "trigger": "RenderTexture.Create()", "contents": "RenderTexture.Create();" },
		{ "trigger": "RenderTexture.colorBuffer", "contents": "RenderTexture.colorBuffer" },
		{ "trigger": "RenderTexture.depthBuffer", "contents": "RenderTexture.depthBuffer" },
		{ "trigger": "RenderTexture.DiscardContents()", "contents": "RenderTexture.DiscardContents();" },
		{ "trigger": "RenderTexture.width", "contents": "RenderTexture.width" },
		{ "trigger": "RenderTexture.depth", "contents": "RenderTexture.depth" },
		{ "trigger": "RenderTexture.sRGB", "contents": "RenderTexture.sRGB" },
		{ "trigger": "RenderTexture.IsCreated()", "contents": "RenderTexture.IsCreated();" },
		{ "trigger": "RenderTexture.Release()", "contents": "RenderTexture.Release();" },
		{ "trigger": "RenderTexture(width, height, depth, format, readWrite)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth}, ${4:RenderTextureFormat format}, ${5:RenderTextureReadWrite readWrite});" },
		{ "trigger": "RenderTexture(width, height, depth, format)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth}, ${4:RenderTextureFormat format});" },
		{ "trigger": "RenderTexture(width, height, depth)", "contents": "RenderTexture(${1:int width}, ${2:int height}, ${3:int depth});" },
		{ "trigger": "RenderTexture.isCubemap", "contents": "RenderTexture.isCubemap" },
		{ "trigger": "RenderTexture.height", "contents": "RenderTexture.height" },
		{ "trigger": "RenderTexture.ReleaseTemporary(temp)", "contents": "RenderTexture.ReleaseTemporary(${1:RenderTexture temp});" },
		{ "trigger": "RenderTexture.active", "contents": "RenderTexture.active" },
		{ "trigger": "PhysicMaterial", "contents": "PhysicMaterial" },
		{ "trigger": "PhysicMaterial.dynamicFriction", "contents": "PhysicMaterial.dynamicFriction" },
		{ "trigger": "PhysicMaterial.dynamicFriction2", "contents": "PhysicMaterial.dynamicFriction2" },
		{ "trigger": "PhysicMaterial.bounceCombine", "contents": "PhysicMaterial.bounceCombine" },
		{ "trigger": "PhysicMaterial.frictionDirection2", "contents": "PhysicMaterial.frictionDirection2" },
		{ "trigger": "PhysicMaterial.staticFriction", "contents": "PhysicMaterial.staticFriction" },
		{ "trigger": "PhysicMaterial.bounciness", "contents": "PhysicMaterial.bounciness" },
		{ "trigger": "PhysicMaterial.staticFriction2", "contents": "PhysicMaterial.staticFriction2" },
		{ "trigger": "PhysicMaterial.frictionCombine", "contents": "PhysicMaterial.frictionCombine" },
		{ "trigger": "PhysicMaterial()", "contents": "PhysicMaterial();" },
		{ "trigger": "PhysicMaterial(name)", "contents": "PhysicMaterial(${1:String name});" },
		{ "trigger": "Coroutine", "contents": "Coroutine" },
		{ "trigger": "GradientColorKey", "contents": "GradientColorKey" },
		{ "trigger": "GradientColorKey.color", "contents": "GradientColorKey.color" },
		{ "trigger": "GradientColorKey(col, time)", "contents": "GradientColorKey(${1:Color col}, ${2:float time});" },
		{ "trigger": "GradientColorKey.time", "contents": "GradientColorKey.time" },
		{ "trigger": "WheelCollider", "contents": "WheelCollider" },
		{ "trigger": "WheelCollider.suspensionDistance", "contents": "WheelCollider.suspensionDistance" },
		{ "trigger": "WheelCollider.brakeTorque", "contents": "WheelCollider.brakeTorque" },
		{ "trigger": "WheelCollider.center", "contents": "WheelCollider.center" },
		{ "trigger": "WheelCollider.motorTorque", "contents": "WheelCollider.motorTorque" },
		{ "trigger": "WheelCollider.sidewaysFriction", "contents": "WheelCollider.sidewaysFriction" },
		{ "trigger": "WheelCollider.rpm", "contents": "WheelCollider.rpm" },
		{ "trigger": "WheelCollider.GetGroundHit(out hit)", "contents": "WheelCollider.GetGroundHit(${1:WheelHit out hit});" },
		{ "trigger": "WheelCollider.suspensionSpring", "contents": "WheelCollider.suspensionSpring" },
		{ "trigger": "WheelCollider.mass", "contents": "WheelCollider.mass" },
		{ "trigger": "WheelCollider.steerAngle", "contents": "WheelCollider.steerAngle" },
		{ "trigger": "WheelCollider.radius", "contents": "WheelCollider.radius" },
		{ "trigger": "WheelCollider.isGrounded", "contents": "WheelCollider.isGrounded" },
		{ "trigger": "WheelCollider.forwardFriction", "contents": "WheelCollider.forwardFriction" },
		{ "trigger": "GUILayout", "contents": "GUILayout" },
		{ "trigger": "GUILayout.Space(pixels)", "contents": "GUILayout.Space(${1:float pixels});" },
		{ "trigger": "GUILayout.EndArea()", "contents": "GUILayout.EndArea();" },
		{ "trigger": "GUILayout.MaxHeight(maxHeight)", "contents": "GUILayout.MaxHeight(${1:float maxHeight});" },
		{ "trigger": "GUILayout.Label(image, params options)", "contents": "GUILayout.Label(${1:Texture image}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Label(text, params options)", "contents": "GUILayout.Label(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Label(content, params options)", "contents": "GUILayout.Label(${1:GUIContent content}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Label(image, style, params options)", "contents": "GUILayout.Label(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Label(text, style, params options)", "contents": "GUILayout.Label(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Label(content, style, params options)", "contents": "GUILayout.Label(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.FlexibleSpace()", "contents": "GUILayout.FlexibleSpace();" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:String text}, ${5: });" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5: });" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content}, ${5: });" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, text, style, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:String text}, ${5:GUIStyle style}, ${6: });" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, image, style, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:Texture image}, ${5:GUIStyle style}, ${6: });" },
		{ "trigger": "GUILayout.Window(id, screenRect, func, content, style, )", "contents": "GUILayout.Window(${1:int id}, ${2:Rect screenRect}, ${3:GUI.WindowFunction func}, ${4:GUIContent content}, ${5:GUIStyle style}, ${6: });" },
		{ "trigger": "GUILayout.BeginVertical(params options)", "contents": "GUILayout.BeginVertical(${1:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginVertical(style, params options)", "contents": "GUILayout.BeginVertical(${1:GUIStyle style}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginVertical(text, style, params options)", "contents": "GUILayout.BeginVertical(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginVertical(image, style, params options)", "contents": "GUILayout.BeginVertical(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginVertical(content, style, params options)", "contents": "GUILayout.BeginVertical(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, params options)", "contents": "GUILayout.VerticalScrollbar(${1:float value}, ${2:float size}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.VerticalScrollbar(value, size, topValue, bottomValue, style, params options)", "contents": "GUILayout.VerticalScrollbar(${1:float value}, ${2:float size}, ${3:float topValue}, ${4:float bottomValue}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:boolean alwaysShowHorizontal}, ${3:boolean alwaysShowVertical}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle style});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, style, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:boolean alwaysShowHorizontal}, ${3:boolean alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "GUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:boolean alwaysShowHorizontal}, ${3:boolean alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, params options)", "contents": "GUILayout.HorizontalScrollbar(${1:float value}, ${2:float size}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.HorizontalScrollbar(value, size, leftValue, rightValue, style, params options)", "contents": "GUILayout.HorizontalScrollbar(${1:float value}, ${2:float size}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextField(text, params options)", "contents": "GUILayout.TextField(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextField(text, maxLength, params options)", "contents": "GUILayout.TextField(${1:String text}, ${2:int maxLength}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextField(text, style, params options)", "contents": "GUILayout.TextField(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextField(text, maxLength, style, params options)", "contents": "GUILayout.TextField(${1:String text}, ${2:int maxLength}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, params options)", "contents": "GUILayout.VerticalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.VerticalSlider(value, leftValue, rightValue, slider, thumb, params options)", "contents": "GUILayout.VerticalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIStyle slider}, ${5:GUIStyle thumb}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextArea(text, params options)", "contents": "GUILayout.TextArea(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, params options)", "contents": "GUILayout.TextArea(${1:String text}, ${2:int maxLength}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextArea(text, style, params options)", "contents": "GUILayout.TextArea(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.TextArea(text, maxLength, style, params options)", "contents": "GUILayout.TextArea(${1:String text}, ${2:int maxLength}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(image, params options)", "contents": "GUILayout.RepeatButton(${1:Texture image}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(text, params options)", "contents": "GUILayout.RepeatButton(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(content, params options)", "contents": "GUILayout.RepeatButton(${1:GUIContent content}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(image, style, params options)", "contents": "GUILayout.RepeatButton(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(text, style, params options)", "contents": "GUILayout.RepeatButton(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.RepeatButton(content, style, params options)", "contents": "GUILayout.RepeatButton(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.MaxWidth(maxWidth)", "contents": "GUILayout.MaxWidth(${1:float maxWidth});" },
		{ "trigger": "GUILayout.EndVertical()", "contents": "GUILayout.EndVertical();" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, params options)", "contents": "GUILayout.HorizontalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.HorizontalSlider(value, leftValue, rightValue, slider, thumb, params options)", "contents": "GUILayout.HorizontalSlider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIStyle slider}, ${5:GUIStyle thumb}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, params options)", "contents": "GUILayout.PasswordField(${1:String password}, ${2:char maskChar}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, params options)", "contents": "GUILayout.PasswordField(${1:String password}, ${2:char maskChar}, ${3:int maxLength}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, style, params options)", "contents": "GUILayout.PasswordField(${1:String password}, ${2:char maskChar}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.PasswordField(password, maskChar, maxLength, style, params options)", "contents": "GUILayout.PasswordField(${1:String password}, ${2:char maskChar}, ${3:int maxLength}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.ExpandHeight(expand)", "contents": "GUILayout.ExpandHeight(${1:boolean expand});" },
		{ "trigger": "GUILayout.Toolbar(selected, images, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:Texture[] images}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toolbar(selected, content, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:GUIContent[] content}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toolbar(selected, texts, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:string[] texts}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toolbar(selected, images, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:Texture[] images}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toolbar(selected, contents, style, params options)", "contents": "GUILayout.Toolbar(${1:int selected}, ${2:GUIContent[] contents}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(image, params options)", "contents": "GUILayout.Box(${1:Texture image}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(text, params options)", "contents": "GUILayout.Box(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(content, params options)", "contents": "GUILayout.Box(${1:GUIContent content}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(image, style, params options)", "contents": "GUILayout.Box(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(text, style, params options)", "contents": "GUILayout.Box(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Box(content, style, params options)", "contents": "GUILayout.Box(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(image, params options)", "contents": "GUILayout.Button(${1:Texture image}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(text, params options)", "contents": "GUILayout.Button(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(content, params options)", "contents": "GUILayout.Button(${1:GUIContent content}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(image, style, params options)", "contents": "GUILayout.Button(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(text, style, params options)", "contents": "GUILayout.Button(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Button(content, style, params options)", "contents": "GUILayout.Button(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginHorizontal(params options)", "contents": "GUILayout.BeginHorizontal(${1:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginHorizontal(style, params options)", "contents": "GUILayout.BeginHorizontal(${1:GUIStyle style}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginHorizontal(text, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginHorizontal(image, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:Texture image}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginHorizontal(content, style, params options)", "contents": "GUILayout.BeginHorizontal(${1:GUIContent content}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.MinWidth(minWidth)", "contents": "GUILayout.MinWidth(${1:float minWidth});" },
		{ "trigger": "GUILayout.ExpandWidth(expand)", "contents": "GUILayout.ExpandWidth(${1:boolean expand});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:string[] texts}, ${3:int xCount}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:Texture[] images}, ${3:int xCount}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, content, xCount, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:GUIContent[] content}, ${3:int xCount}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, texts, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:string[] texts}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, images, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:Texture[] images}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.SelectionGrid(selected, contents, xCount, style, params options)", "contents": "GUILayout.SelectionGrid(${1:int selected}, ${2:GUIContent[] contents}, ${3:int xCount}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.BeginArea(screenRect)", "contents": "GUILayout.BeginArea(${1:Rect screenRect});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:String text});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:Texture image});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIContent content});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIStyle style});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, text, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, image, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:Texture image}, ${3:GUIStyle style});" },
		{ "trigger": "GUILayout.BeginArea(screenRect, content, style)", "contents": "GUILayout.BeginArea(${1:Rect screenRect}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "GUILayout.Width(width)", "contents": "GUILayout.Width(${1:float width});" },
		{ "trigger": "GUILayout.MinHeight(minHeight)", "contents": "GUILayout.MinHeight(${1:float minHeight});" },
		{ "trigger": "GUILayout.EndHorizontal()", "contents": "GUILayout.EndHorizontal();" },
		{ "trigger": "GUILayout.Height(height)", "contents": "GUILayout.Height(${1:float height});" },
		{ "trigger": "GUILayout.Toggle(value, image, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:Texture image}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toggle(value, text, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:String text}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toggle(value, content, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:GUIContent content}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toggle(value, image, style, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:Texture image}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toggle(value, text, style, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:String text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.Toggle(value, content, style, params options)", "contents": "GUILayout.Toggle(${1:boolean value}, ${2:GUIContent content}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "GUILayout.EndScrollView()", "contents": "GUILayout.EndScrollView();" },
		{ "trigger": "RaycastHit", "contents": "RaycastHit" },
		{ "trigger": "RaycastHit.rigidbody", "contents": "RaycastHit.rigidbody" },
		{ "trigger": "RaycastHit.distance", "contents": "RaycastHit.distance" },
		{ "trigger": "RaycastHit.collider", "contents": "RaycastHit.collider" },
		{ "trigger": "RaycastHit.normal", "contents": "RaycastHit.normal" },
		{ "trigger": "RaycastHit.point", "contents": "RaycastHit.point" },
		{ "trigger": "RaycastHit.transform", "contents": "RaycastHit.transform" },
		{ "trigger": "RaycastHit.textureCoord2", "contents": "RaycastHit.textureCoord2" },
		{ "trigger": "RaycastHit.barycentricCoordinate", "contents": "RaycastHit.barycentricCoordinate" },
		{ "trigger": "RaycastHit.lightmapCoord", "contents": "RaycastHit.lightmapCoord" },
		{ "trigger": "RaycastHit.textureCoord", "contents": "RaycastHit.textureCoord" },
		{ "trigger": "RaycastHit.triangleIndex", "contents": "RaycastHit.triangleIndex" },
		{ "trigger": "AnimationState", "contents": "AnimationState" },
		{ "trigger": "AnimationState.layer", "contents": "AnimationState.layer" },
		{ "trigger": "AnimationState.weight", "contents": "AnimationState.weight" },
		{ "trigger": "AnimationState.clip", "contents": "AnimationState.clip" },
		{ "trigger": "AnimationState.normalizedSpeed", "contents": "AnimationState.normalizedSpeed" },
		{ "trigger": "AnimationState.AddMixingTransform(mix, recursive)", "contents": "AnimationState.AddMixingTransform(${1:Transform mix}, ${2:boolean recursive = true});" },
		{ "trigger": "AnimationState.enabled", "contents": "AnimationState.enabled" },
		{ "trigger": "AnimationState.length", "contents": "AnimationState.length" },
		{ "trigger": "AnimationState.wrapMode", "contents": "AnimationState.wrapMode" },
		{ "trigger": "AnimationState.time", "contents": "AnimationState.time" },
		{ "trigger": "AnimationState.blendMode", "contents": "AnimationState.blendMode" },
		{ "trigger": "AnimationState.normalizedTime", "contents": "AnimationState.normalizedTime" },
		{ "trigger": "AnimationState.RemoveMixingTransform(mix)", "contents": "AnimationState.RemoveMixingTransform(${1:Transform mix});" },
		{ "trigger": "AnimationState.speed", "contents": "AnimationState.speed" },
		{ "trigger": "AnimationState.name", "contents": "AnimationState.name" },
		{ "trigger": "WebCamTexture", "contents": "WebCamTexture" },
		{ "trigger": "WebCamTexture.deviceName", "contents": "WebCamTexture.deviceName" },
		{ "trigger": "WebCamTexture.requestedWidth", "contents": "WebCamTexture.requestedWidth" },
		{ "trigger": "WebCamTexture.Pause()", "contents": "WebCamTexture.Pause();" },
		{ "trigger": "WebCamTexture.GetPixels()", "contents": "WebCamTexture.GetPixels();" },
		{ "trigger": "WebCamTexture.GetPixels(x, y, blockWidth, blockHeight)", "contents": "WebCamTexture.GetPixels(${1:int x}, ${2:int y}, ${3:int blockWidth}, ${4:int blockHeight});" },
		{ "trigger": "WebCamTexture.requestedFPS", "contents": "WebCamTexture.requestedFPS" },
		{ "trigger": "WebCamTexture.Stop()", "contents": "WebCamTexture.Stop();" },
		{ "trigger": "WebCamTexture.Play()", "contents": "WebCamTexture.Play();" },
		{ "trigger": "WebCamTexture.requestedHeight", "contents": "WebCamTexture.requestedHeight" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:String deviceName}, ${2:int requestedWidth}, ${3:int requestedHeight}, ${4:int requestedFPS});" },
		{ "trigger": "WebCamTexture(deviceName, requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:String deviceName}, ${2:int requestedWidth}, ${3:int requestedHeight});" },
		{ "trigger": "WebCamTexture(deviceName)", "contents": "WebCamTexture(${1:String deviceName});" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight, requestedFPS)", "contents": "WebCamTexture(${1:int requestedWidth}, ${2:int requestedHeight}, ${3:int requestedFPS});" },
		{ "trigger": "WebCamTexture(requestedWidth, requestedHeight)", "contents": "WebCamTexture(${1:int requestedWidth}, ${2:int requestedHeight});" },
		{ "trigger": "WebCamTexture()", "contents": "WebCamTexture();" },
		{ "trigger": "WebCamTexture.videoRotationAngle", "contents": "WebCamTexture.videoRotationAngle" },
		{ "trigger": "WebCamTexture.GetPixels32(colors)", "contents": "WebCamTexture.GetPixels32(${1:Color32[] colors = null});" },
		{ "trigger": "WebCamTexture.devices", "contents": "WebCamTexture.devices" },
		{ "trigger": "WebCamTexture.didUpdateThisFrame", "contents": "WebCamTexture.didUpdateThisFrame" },
		{ "trigger": "WebCamTexture.isPlaying", "contents": "WebCamTexture.isPlaying" },
		{ "trigger": "WebCamTexture.GetPixel(x, y)", "contents": "WebCamTexture.GetPixel(${1:int x}, ${2:int y});" },
		{ "trigger": "Quaternion", "contents": "Quaternion" },
		{ "trigger": "Quaternion.Slerp(from, to, t)", "contents": "Quaternion.Slerp(${1:Quaternion from}, ${2:Quaternion to}, ${3:float t});" },
		{ "trigger": "Quaternion.Inverse(rotation)", "contents": "Quaternion.Inverse(${1:Quaternion rotation});" },
		{ "trigger": "Quaternion.eulerAngles", "contents": "Quaternion.eulerAngles" },
		{ "trigger": "Quaternion.LookRotation(forward, upwards)", "contents": "Quaternion.LookRotation(${1:Vector3 forward}, ${2:Vector3 upwards = Vector3.up});" },
		{ "trigger": "Quaternion.Angle(a, b)", "contents": "Quaternion.Angle(${1:Quaternion a}, ${2:Quaternion b});" },
		{ "trigger": "Quaternion.Euler(x, y, z)", "contents": "Quaternion.Euler(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Quaternion.Euler(euler)", "contents": "Quaternion.Euler(${1:Vector3 euler});" },
		{ "trigger": "Quaternion.Lerp(from, to, t)", "contents": "Quaternion.Lerp(${1:Quaternion from}, ${2:Quaternion to}, ${3:float t});" },
		{ "trigger": "Quaternion.ToAngleAxis(out angle, out axis)", "contents": "Quaternion.ToAngleAxis(${1:float out angle}, ${2:Vector3 out axis});" },
		{ "trigger": "Quaternion(x, y, z, w)", "contents": "Quaternion(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w});" },
		{ "trigger": "Quaternion.Dot(a, b)", "contents": "Quaternion.Dot(${1:Quaternion a}, ${2:Quaternion b});" },
		{ "trigger": "Quaternion.this [int index]", "contents": "Quaternion.this [int index]" },
		{ "trigger": "Quaternion.ToString()", "contents": "Quaternion.ToString();" },
		{ "trigger": "Quaternion.ToString(format)", "contents": "Quaternion.ToString(${1:String format});" },
		{ "trigger": "Quaternion.FromToRotation(fromDirection, toDirection)", "contents": "Quaternion.FromToRotation(${1:Vector3 fromDirection}, ${2:Vector3 toDirection});" },
		{ "trigger": "Quaternion.identity", "contents": "Quaternion.identity" },
		{ "trigger": "Quaternion.SetLookRotation(view, up)", "contents": "Quaternion.SetLookRotation(${1:Vector3 view}, ${2:Vector3 up = Vector3.up});" },
		{ "trigger": "Quaternion.Set(new_x, new_y, new_z, new_w)", "contents": "Quaternion.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z}, ${4:float new_w});" },
		{ "trigger": "Quaternion.SetFromToRotation(fromDirection, toDirection)", "contents": "Quaternion.SetFromToRotation(${1:Vector3 fromDirection}, ${2:Vector3 toDirection});" },
		{ "trigger": "Quaternion.AngleAxis(angle, axis)", "contents": "Quaternion.AngleAxis(${1:float angle}, ${2:Vector3 axis});" },
		{ "trigger": "Quaternion.RotateTowards(from, to, maxDegreesDelta)", "contents": "Quaternion.RotateTowards(${1:Quaternion from}, ${2:Quaternion to}, ${3:float maxDegreesDelta});" },
		{ "trigger": "Quaternion.w", "contents": "Quaternion.w" },
		{ "trigger": "Quaternion.y", "contents": "Quaternion.y" },
		{ "trigger": "Quaternion.x", "contents": "Quaternion.x" },
		{ "trigger": "Quaternion.z", "contents": "Quaternion.z" },
		{ "trigger": "Mesh", "contents": "Mesh" },
		{ "trigger": "Mesh.GetTopology(submesh)", "contents": "Mesh.GetTopology(${1:int submesh});" },
		{ "trigger": "Mesh.vertices", "contents": "Mesh.vertices" },
		{ "trigger": "Mesh.colors", "contents": "Mesh.colors" },
		{ "trigger": "Mesh.GetTriangles(submesh)", "contents": "Mesh.GetTriangles(${1:int submesh});" },
		{ "trigger": "Mesh.SetTriangles(triangles, submesh)", "contents": "Mesh.SetTriangles(${1:int[] triangles}, ${2:int submesh});" },
		{ "trigger": "Mesh.bindposes", "contents": "Mesh.bindposes" },
		{ "trigger": "Mesh.triangles", "contents": "Mesh.triangles" },
		{ "trigger": "Mesh.Clear(keepVertexLayout)", "contents": "Mesh.Clear(${1:boolean keepVertexLayout = true});" },
		{ "trigger": "Mesh.MarkDynamic()", "contents": "Mesh.MarkDynamic();" },
		{ "trigger": "Mesh.RecalculateBounds()", "contents": "Mesh.RecalculateBounds();" },
		{ "trigger": "Mesh()", "contents": "Mesh();" },
		{ "trigger": "Mesh.Optimize()", "contents": "Mesh.Optimize();" },
		{ "trigger": "Mesh.tangents", "contents": "Mesh.tangents" },
		{ "trigger": "Mesh.uv2", "contents": "Mesh.uv2" },
		{ "trigger": "Mesh.boneWeights", "contents": "Mesh.boneWeights" },
		{ "trigger": "Mesh.vertexCount", "contents": "Mesh.vertexCount" },
		{ "trigger": "Mesh.colors32", "contents": "Mesh.colors32" },
		{ "trigger": "Mesh.subMeshCount", "contents": "Mesh.subMeshCount" },
		{ "trigger": "Mesh.uv", "contents": "Mesh.uv" },
		{ "trigger": "Mesh.bounds", "contents": "Mesh.bounds" },
		{ "trigger": "Mesh.RecalculateNormals()", "contents": "Mesh.RecalculateNormals();" },
		{ "trigger": "Mesh.CombineMeshes(combine, mergeSubMeshes, useMatrices)", "contents": "Mesh.CombineMeshes(${1:CombineInstance[] combine}, ${2:boolean mergeSubMeshes = true}, ${3:boolean useMatrices = true});" },
		{ "trigger": "Mesh.SetIndices(indices, topology, submesh)", "contents": "Mesh.SetIndices(${1:int[] indices}, ${2:MeshTopology topology}, ${3:int submesh});" },
		{ "trigger": "Mesh.isReadable", "contents": "Mesh.isReadable" },
		{ "trigger": "Mesh.normals", "contents": "Mesh.normals" },
		{ "trigger": "Mesh.GetIndices(submesh)", "contents": "Mesh.GetIndices(${1:int submesh});" },
		{ "trigger": "CapsuleCollider", "contents": "CapsuleCollider" },
		{ "trigger": "CapsuleCollider.direction", "contents": "CapsuleCollider.direction" },
		{ "trigger": "CapsuleCollider.radius", "contents": "CapsuleCollider.radius" },
		{ "trigger": "CapsuleCollider.center", "contents": "CapsuleCollider.center" },
		{ "trigger": "CapsuleCollider.height", "contents": "CapsuleCollider.height" },
		{ "trigger": "Compass", "contents": "Compass" },
		{ "trigger": "Compass.trueHeading", "contents": "Compass.trueHeading" },
		{ "trigger": "Compass.timestamp", "contents": "Compass.timestamp" },
		{ "trigger": "Compass.enabled", "contents": "Compass.enabled" },
		{ "trigger": "Compass.rawVector", "contents": "Compass.rawVector" },
		{ "trigger": "Compass.magneticHeading", "contents": "Compass.magneticHeading" },
		{ "trigger": "AnimatorTransitionInfo", "contents": "AnimatorTransitionInfo" },
		{ "trigger": "AnimatorTransitionInfo.nameHash", "contents": "AnimatorTransitionInfo.nameHash" },
		{ "trigger": "AnimatorTransitionInfo.normalizedTime", "contents": "AnimatorTransitionInfo.normalizedTime" },
		{ "trigger": "AnimatorTransitionInfo.userNameHash", "contents": "AnimatorTransitionInfo.userNameHash" },
		{ "trigger": "AnimatorTransitionInfo.IsUserName(name)", "contents": "AnimatorTransitionInfo.IsUserName(${1:String name});" },
		{ "trigger": "AnimatorTransitionInfo.IsName(name)", "contents": "AnimatorTransitionInfo.IsName(${1:String name});" },
		{ "trigger": "AudioReverbFilter", "contents": "AudioReverbFilter" },
		{ "trigger": "AudioReverbFilter.roomRolloff", "contents": "AudioReverbFilter.roomRolloff" },
		{ "trigger": "AudioReverbFilter.roomHF", "contents": "AudioReverbFilter.roomHF" },
		{ "trigger": "AudioReverbFilter.reverbLevel", "contents": "AudioReverbFilter.reverbLevel" },
		{ "trigger": "AudioReverbFilter.density", "contents": "AudioReverbFilter.density" },
		{ "trigger": "AudioReverbFilter.lFReference", "contents": "AudioReverbFilter.lFReference" },
		{ "trigger": "AudioReverbFilter.roomLF", "contents": "AudioReverbFilter.roomLF" },
		{ "trigger": "AudioReverbFilter.diffusion", "contents": "AudioReverbFilter.diffusion" },
		{ "trigger": "AudioReverbFilter.dryLevel", "contents": "AudioReverbFilter.dryLevel" },
		{ "trigger": "AudioReverbFilter.reverbPreset", "contents": "AudioReverbFilter.reverbPreset" },
		{ "trigger": "AudioReverbFilter.reflectionsLevel", "contents": "AudioReverbFilter.reflectionsLevel" },
		{ "trigger": "AudioReverbFilter.decayHFRatio", "contents": "AudioReverbFilter.decayHFRatio" },
		{ "trigger": "AudioReverbFilter.reverbDelay", "contents": "AudioReverbFilter.reverbDelay" },
		{ "trigger": "AudioReverbFilter.reflectionsDelay", "contents": "AudioReverbFilter.reflectionsDelay" },
		{ "trigger": "AudioReverbFilter.decayTime", "contents": "AudioReverbFilter.decayTime" },
		{ "trigger": "AudioReverbFilter.hfReference", "contents": "AudioReverbFilter.hfReference" },
		{ "trigger": "AudioReverbFilter.room", "contents": "AudioReverbFilter.room" },
		{ "trigger": "DetailPrototype", "contents": "DetailPrototype" },
		{ "trigger": "DetailPrototype.prototypeTexture", "contents": "DetailPrototype.prototypeTexture" },
		{ "trigger": "DetailPrototype.maxWidth", "contents": "DetailPrototype.maxWidth" },
		{ "trigger": "DetailPrototype.noiseSpread", "contents": "DetailPrototype.noiseSpread" },
		{ "trigger": "DetailPrototype.minHeight", "contents": "DetailPrototype.minHeight" },
		{ "trigger": "DetailPrototype.healthyColor", "contents": "DetailPrototype.healthyColor" },
		{ "trigger": "DetailPrototype.maxHeight", "contents": "DetailPrototype.maxHeight" },
		{ "trigger": "DetailPrototype.minWidth", "contents": "DetailPrototype.minWidth" },
		{ "trigger": "DetailPrototype.renderMode", "contents": "DetailPrototype.renderMode" },
		{ "trigger": "DetailPrototype.bendFactor", "contents": "DetailPrototype.bendFactor" },
		{ "trigger": "DetailPrototype.prototype", "contents": "DetailPrototype.prototype" },
		{ "trigger": "DetailPrototype.dryColor", "contents": "DetailPrototype.dryColor" },
		{ "trigger": "Cubemap", "contents": "Cubemap" },
		{ "trigger": "Cubemap.GetPixels(face, miplevel)", "contents": "Cubemap.GetPixels(${1:CubemapFace face}, ${2:int miplevel = 0});" },
		{ "trigger": "Cubemap.format", "contents": "Cubemap.format" },
		{ "trigger": "Cubemap(size, format, mipmap)", "contents": "Cubemap(${1:int size}, ${2:TextureFormat format}, ${3:boolean mipmap});" },
		{ "trigger": "Cubemap.SetPixel(face, x, y, color)", "contents": "Cubemap.SetPixel(${1:CubemapFace face}, ${2:int x}, ${3:int y}, ${4:Color color});" },
		{ "trigger": "Cubemap.SetPixels(colors, face, miplevel)", "contents": "Cubemap.SetPixels(${1:Color[] colors}, ${2:CubemapFace face}, ${3:int miplevel = 0});" },
		{ "trigger": "Cubemap.Apply(updateMipmaps, makeNoLongerReadable)", "contents": "Cubemap.Apply(${1:boolean updateMipmaps = true}, ${2:boolean makeNoLongerReadable = false});" },
		{ "trigger": "Cubemap.GetPixel(face, x, y)", "contents": "Cubemap.GetPixel(${1:CubemapFace face}, ${2:int x}, ${3:int y});" },
		{ "trigger": "Cubemap.SmoothEdges(smoothRegionWidthInPixels)", "contents": "Cubemap.SmoothEdges(${1:int smoothRegionWidthInPixels = 1});" },
		{ "trigger": "HostData", "contents": "HostData" },
		{ "trigger": "HostData.useNat", "contents": "HostData.useNat" },
		{ "trigger": "HostData.comment", "contents": "HostData.comment" },
		{ "trigger": "HostData.passwordProtected", "contents": "HostData.passwordProtected" },
		{ "trigger": "HostData.connectedPlayers", "contents": "HostData.connectedPlayers" },
		{ "trigger": "HostData.ip", "contents": "HostData.ip" },
		{ "trigger": "HostData.gameName", "contents": "HostData.gameName" },
		{ "trigger": "HostData.gameType", "contents": "HostData.gameType" },
		{ "trigger": "HostData.playerLimit", "contents": "HostData.playerLimit" },
		{ "trigger": "HostData.guid", "contents": "HostData.guid" },
		{ "trigger": "HostData.port", "contents": "HostData.port" },
		{ "trigger": "LightProbes", "contents": "LightProbes" },
		{ "trigger": "LightProbes.count", "contents": "LightProbes.count" },
		{ "trigger": "LightProbes.positions", "contents": "LightProbes.positions" },
		{ "trigger": "LightProbes.cellCount", "contents": "LightProbes.cellCount" },
		{ "trigger": "LightProbes.coefficients", "contents": "LightProbes.coefficients" },
		{ "trigger": "LightProbes.GetInterpolatedLightProbe(position, renderer, coefficients)", "contents": "LightProbes.GetInterpolatedLightProbe(${1:Vector3 position}, ${2:Renderer renderer}, ${3:float[] coefficients});" },
		{ "trigger": "GUIText", "contents": "GUIText" },
		{ "trigger": "GUIText.fontStyle", "contents": "GUIText.fontStyle" },
		{ "trigger": "GUIText.lineSpacing", "contents": "GUIText.lineSpacing" },
		{ "trigger": "GUIText.text", "contents": "GUIText.text" },
		{ "trigger": "GUIText.material", "contents": "GUIText.material" },
		{ "trigger": "GUIText.richText", "contents": "GUIText.richText" },
		{ "trigger": "GUIText.pixelOffset", "contents": "GUIText.pixelOffset" },
		{ "trigger": "GUIText.fontSize", "contents": "GUIText.fontSize" },
		{ "trigger": "GUIText.tabSize", "contents": "GUIText.tabSize" },
		{ "trigger": "GUIText.font", "contents": "GUIText.font" },
		{ "trigger": "GUIText.anchor", "contents": "GUIText.anchor" },
		{ "trigger": "GUIText.alignment", "contents": "GUIText.alignment" },
		{ "trigger": "GUITexture", "contents": "GUITexture" },
		{ "trigger": "GUITexture.color", "contents": "GUITexture.color" },
		{ "trigger": "GUITexture.border", "contents": "GUITexture.border" },
		{ "trigger": "GUITexture.pixelInset", "contents": "GUITexture.pixelInset" },
		{ "trigger": "GUITexture.texture", "contents": "GUITexture.texture" },
		{ "trigger": "AudioReverbZone", "contents": "AudioReverbZone" },
		{ "trigger": "AudioReverbZone.diffusion", "contents": "AudioReverbZone.diffusion" },
		{ "trigger": "AudioReverbZone.roomHF", "contents": "AudioReverbZone.roomHF" },
		{ "trigger": "AudioReverbZone.room", "contents": "AudioReverbZone.room" },
		{ "trigger": "AudioReverbZone.density", "contents": "AudioReverbZone.density" },
		{ "trigger": "AudioReverbZone.maxDistance", "contents": "AudioReverbZone.maxDistance" },
		{ "trigger": "AudioReverbZone.LFReference", "contents": "AudioReverbZone.LFReference" },
		{ "trigger": "AudioReverbZone.roomLF", "contents": "AudioReverbZone.roomLF" },
		{ "trigger": "AudioReverbZone.reverbPreset", "contents": "AudioReverbZone.reverbPreset" },
		{ "trigger": "AudioReverbZone.minDistance", "contents": "AudioReverbZone.minDistance" },
		{ "trigger": "AudioReverbZone.roomRolloffFactor", "contents": "AudioReverbZone.roomRolloffFactor" },
		{ "trigger": "AudioReverbZone.decayHFRatio", "contents": "AudioReverbZone.decayHFRatio" },
		{ "trigger": "AudioReverbZone.reverbDelay", "contents": "AudioReverbZone.reverbDelay" },
		{ "trigger": "AudioReverbZone.reflectionsDelay", "contents": "AudioReverbZone.reflectionsDelay" },
		{ "trigger": "AudioReverbZone.decayTime", "contents": "AudioReverbZone.decayTime" },
		{ "trigger": "AudioReverbZone.reverb", "contents": "AudioReverbZone.reverb" },
		{ "trigger": "AudioReverbZone.HFReference", "contents": "AudioReverbZone.HFReference" },
		{ "trigger": "AudioReverbZone.reflections", "contents": "AudioReverbZone.reflections" },
		{ "trigger": "Resolution", "contents": "Resolution" },
		{ "trigger": "Resolution.refreshRate", "contents": "Resolution.refreshRate" },
		{ "trigger": "Resolution.width", "contents": "Resolution.width" },
		{ "trigger": "Resolution.height", "contents": "Resolution.height" },
		{ "trigger": "GUILayoutOption", "contents": "GUILayoutOption" },
		{ "trigger": "AnimationEvent", "contents": "AnimationEvent" },
		{ "trigger": "AnimationEvent.intParameter", "contents": "AnimationEvent.intParameter" },
		{ "trigger": "AnimationEvent.floatParameter", "contents": "AnimationEvent.floatParameter" },
		{ "trigger": "AnimationEvent.functionName", "contents": "AnimationEvent.functionName" },
		{ "trigger": "AnimationEvent.objectReferenceParameter", "contents": "AnimationEvent.objectReferenceParameter" },
		{ "trigger": "AnimationEvent.stringParameter", "contents": "AnimationEvent.stringParameter" },
		{ "trigger": "AnimationEvent.messageOptions", "contents": "AnimationEvent.messageOptions" },
		{ "trigger": "AnimationEvent()", "contents": "AnimationEvent();" },
		{ "trigger": "AnimationEvent.time", "contents": "AnimationEvent.time" },
		{ "trigger": "AnimationEvent.animationState", "contents": "AnimationEvent.animationState" },
		{ "trigger": "OcclusionPortal", "contents": "OcclusionPortal" },
		{ "trigger": "OcclusionPortal.open", "contents": "OcclusionPortal.open" },
		{ "trigger": "TextMesh", "contents": "TextMesh" },
		{ "trigger": "TextMesh.fontStyle", "contents": "TextMesh.fontStyle" },
		{ "trigger": "TextMesh.lineSpacing", "contents": "TextMesh.lineSpacing" },
		{ "trigger": "TextMesh.characterSize", "contents": "TextMesh.characterSize" },
		{ "trigger": "TextMesh.text", "contents": "TextMesh.text" },
		{ "trigger": "TextMesh.offsetZ", "contents": "TextMesh.offsetZ" },
		{ "trigger": "TextMesh.richText", "contents": "TextMesh.richText" },
		{ "trigger": "TextMesh.fontSize", "contents": "TextMesh.fontSize" },
		{ "trigger": "TextMesh.tabSize", "contents": "TextMesh.tabSize" },
		{ "trigger": "TextMesh.font", "contents": "TextMesh.font" },
		{ "trigger": "TextMesh.anchor", "contents": "TextMesh.anchor" },
		{ "trigger": "TextMesh.alignment", "contents": "TextMesh.alignment" },
		{ "trigger": "FixedJoint", "contents": "FixedJoint" },
		{ "trigger": "GameObject", "contents": "GameObject" },
		{ "trigger": "GameObject.layer", "contents": "GameObject.layer" },
		{ "trigger": "GameObject.GetComponentsInChildren(type, includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:Type type}, ${2:boolean includeInactive = false});" },
		{ "trigger": "GameObject.GetComponentsInChildren(includeInactive)", "contents": "GameObject.GetComponentsInChildren(${1:boolean includeInactive});" },
		{ "trigger": "GameObject.GetComponentsInChildren()", "contents": "GameObject.GetComponentsInChildren();" },
		{ "trigger": "GameObject.hingeJoint", "contents": "GameObject.hingeJoint" },
		{ "trigger": "GameObject.tag", "contents": "GameObject.tag" },
		{ "trigger": "GameObject.SendMessage(methodName, value, options)", "contents": "GameObject.SendMessage(${1:String methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "GameObject.renderer", "contents": "GameObject.renderer" },
		{ "trigger": "GameObject.networkView", "contents": "GameObject.networkView" },
		{ "trigger": "GameObject.activeInHierarchy", "contents": "GameObject.activeInHierarchy" },
		{ "trigger": "GameObject.particleSystem", "contents": "GameObject.particleSystem" },
		{ "trigger": "GameObject.constantForce", "contents": "GameObject.constantForce" },
		{ "trigger": "GameObject.collider", "contents": "GameObject.collider" },
		{ "trigger": "GameObject.AddComponent(className)", "contents": "GameObject.AddComponent(${1:String className});" },
		{ "trigger": "GameObject.AddComponent(componentType)", "contents": "GameObject.AddComponent(${1:Type componentType});" },
		{ "trigger": "GameObject.AddComponent()", "contents": "GameObject.AddComponent();" },
		{ "trigger": "GameObject.GetComponentInChildren(type)", "contents": "GameObject.GetComponentInChildren(${1:Type type});" },
		{ "trigger": "GameObject.GetComponentInChildren()", "contents": "GameObject.GetComponentInChildren();" },
		{ "trigger": "GameObject.transform", "contents": "GameObject.transform" },
		{ "trigger": "GameObject.activeSelf", "contents": "GameObject.activeSelf" },
		{ "trigger": "GameObject.CompareTag(tag)", "contents": "GameObject.CompareTag(${1:String tag});" },
		{ "trigger": "GameObject.CreatePrimitive(type)", "contents": "GameObject.CreatePrimitive(${1:PrimitiveType type});" },
		{ "trigger": "GameObject.camera", "contents": "GameObject.camera" },
		{ "trigger": "GameObject.GetComponents(type)", "contents": "GameObject.GetComponents(${1:Type type});" },
		{ "trigger": "GameObject.GetComponents()", "contents": "GameObject.GetComponents();" },
		{ "trigger": "GameObject.particleEmitter", "contents": "GameObject.particleEmitter" },
		{ "trigger": "GameObject.FindWithTag(tag)", "contents": "GameObject.FindWithTag(${1:String tag});" },
		{ "trigger": "GameObject.rigidbody", "contents": "GameObject.rigidbody" },
		{ "trigger": "GameObject.isStatic", "contents": "GameObject.isStatic" },
		{ "trigger": "GameObject.BroadcastMessage(methodName, parameter, options)", "contents": "GameObject.BroadcastMessage(${1:String methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "GameObject.SendMessageUpwards(methodName, value, options)", "contents": "GameObject.SendMessageUpwards(${1:String methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:Type type});" },
		{ "trigger": "GameObject.GetComponent()", "contents": "GameObject.GetComponent();" },
		{ "trigger": "GameObject.GetComponent(type)", "contents": "GameObject.GetComponent(${1:String type});" },
		{ "trigger": "GameObject.SetActive(value)", "contents": "GameObject.SetActive(${1:boolean value});" },
		{ "trigger": "GameObject.animation", "contents": "GameObject.animation" },
		{ "trigger": "GameObject.light", "contents": "GameObject.light" },
		{ "trigger": "GameObject.guiText", "contents": "GameObject.guiText" },
		{ "trigger": "GameObject.guiTexture", "contents": "GameObject.guiTexture" },
		{ "trigger": "GameObject(name)", "contents": "GameObject(${1:String name});" },
		{ "trigger": "GameObject()", "contents": "GameObject();" },
		{ "trigger": "GameObject(name, params components)", "contents": "GameObject(${1:String name}, ${2:Type[] params components});" },
		{ "trigger": "GameObject.FindGameObjectsWithTag(tag)", "contents": "GameObject.FindGameObjectsWithTag(${1:String tag});" },
		{ "trigger": "GameObject.audio", "contents": "GameObject.audio" },
		{ "trigger": "GameObject.Find(name)", "contents": "GameObject.Find(${1:String name});" },
		{ "trigger": "GameObject.SampleAnimation(animation, time)", "contents": "GameObject.SampleAnimation(${1:AnimationClip animation}, ${2:float time});" },
		{ "trigger": "iPhoneUtils", "contents": "iPhoneUtils" },
		{ "trigger": "GUIContent", "contents": "GUIContent" },
		{ "trigger": "GUIContent.text", "contents": "GUIContent.text" },
		{ "trigger": "GUIContent.none", "contents": "GUIContent.none" },
		{ "trigger": "GUIContent.image", "contents": "GUIContent.image" },
		{ "trigger": "GUIContent()", "contents": "GUIContent();" },
		{ "trigger": "GUIContent(text)", "contents": "GUIContent(${1:String text});" },
		{ "trigger": "GUIContent(image)", "contents": "GUIContent(${1:Texture image});" },
		{ "trigger": "GUIContent(text, image)", "contents": "GUIContent(${1:String text}, ${2:Texture image});" },
		{ "trigger": "GUIContent(text, tooltip)", "contents": "GUIContent(${1:String text}, ${2:String tooltip});" },
		{ "trigger": "GUIContent(image, tooltip)", "contents": "GUIContent(${1:Texture image}, ${2:String tooltip});" },
		{ "trigger": "GUIContent(text, image, tooltip)", "contents": "GUIContent(${1:String text}, ${2:Texture image}, ${3:String tooltip});" },
		{ "trigger": "GUIContent(src)", "contents": "GUIContent(${1:GUIContent src});" },
		{ "trigger": "GUIContent.tooltip", "contents": "GUIContent.tooltip" },
		{ "trigger": "Color", "contents": "Color" },
		{ "trigger": "Color.blue", "contents": "Color.blue" },
		{ "trigger": "Color.a", "contents": "Color.a" },
		{ "trigger": "Color.b", "contents": "Color.b" },
		{ "trigger": "Color.green", "contents": "Color.green" },
		{ "trigger": "Color.g", "contents": "Color.g" },
		{ "trigger": "Color.gray", "contents": "Color.gray" },
		{ "trigger": "Color(r, g, b, a)", "contents": "Color(${1:float r}, ${2:float g}, ${3:float b}, ${4:float a});" },
		{ "trigger": "Color(r, g, b)", "contents": "Color(${1:float r}, ${2:float g}, ${3:float b});" },
		{ "trigger": "Color.clear", "contents": "Color.clear" },
		{ "trigger": "Color.Lerp(a, b, t)", "contents": "Color.Lerp(${1:Color a}, ${2:Color b}, ${3:float t});" },
		{ "trigger": "Color.grayscale", "contents": "Color.grayscale" },
		{ "trigger": "Color.grey", "contents": "Color.grey" },
		{ "trigger": "Color.yellow", "contents": "Color.yellow" },
		{ "trigger": "Color.this [int index]", "contents": "Color.this [int index]" },
		{ "trigger": "Color.ToString()", "contents": "Color.ToString();" },
		{ "trigger": "Color.ToString(format)", "contents": "Color.ToString(${1:String format});" },
		{ "trigger": "Color.cyan", "contents": "Color.cyan" },
		{ "trigger": "Color.magenta", "contents": "Color.magenta" },
		{ "trigger": "Color.r", "contents": "Color.r" },
		{ "trigger": "Color.white", "contents": "Color.white" },
		{ "trigger": "Color.red", "contents": "Color.red" },
		{ "trigger": "Color.black", "contents": "Color.black" },
		{ "trigger": "JointLimits", "contents": "JointLimits" },
		{ "trigger": "JointLimits.max", "contents": "JointLimits.max" },
		{ "trigger": "JointLimits.maxBounce", "contents": "JointLimits.maxBounce" },
		{ "trigger": "JointLimits.minBounce", "contents": "JointLimits.minBounce" },
		{ "trigger": "JointLimits.min", "contents": "JointLimits.min" },
		{ "trigger": "NetworkViewID", "contents": "NetworkViewID" },
		{ "trigger": "NetworkViewID.owner", "contents": "NetworkViewID.owner" },
		{ "trigger": "NetworkViewID.unassigned", "contents": "NetworkViewID.unassigned" },
		{ "trigger": "NetworkViewID.ToString()", "contents": "NetworkViewID.ToString();" },
		{ "trigger": "NetworkViewID.isMine", "contents": "NetworkViewID.isMine" },
		{ "trigger": "GUILayer", "contents": "GUILayer" },
		{ "trigger": "GUILayer.HitTest(screenPosition)", "contents": "GUILayer.HitTest(${1:Vector3 screenPosition});" },
		{ "trigger": "Renderer", "contents": "Renderer" },
		{ "trigger": "Renderer.worldToLocalMatrix", "contents": "Renderer.worldToLocalMatrix" },
		{ "trigger": "Renderer.OnBecameVisible()", "contents": "Renderer.OnBecameVisible();" },
		{ "trigger": "Renderer.sharedMaterials", "contents": "Renderer.sharedMaterials" },
		{ "trigger": "Renderer.sharedMaterial", "contents": "Renderer.sharedMaterial" },
		{ "trigger": "Renderer.lightmapTilingOffset", "contents": "Renderer.lightmapTilingOffset" },
		{ "trigger": "Renderer.lightmapIndex", "contents": "Renderer.lightmapIndex" },
		{ "trigger": "Renderer.OnBecameInvisible()", "contents": "Renderer.OnBecameInvisible();" },
		{ "trigger": "Renderer.material", "contents": "Renderer.material" },
		{ "trigger": "Renderer.enabled", "contents": "Renderer.enabled" },
		{ "trigger": "Renderer.bounds", "contents": "Renderer.bounds" },
		{ "trigger": "Renderer.castShadows", "contents": "Renderer.castShadows" },
		{ "trigger": "Renderer.materials", "contents": "Renderer.materials" },
		{ "trigger": "Renderer.useLightProbes", "contents": "Renderer.useLightProbes" },
		{ "trigger": "Renderer.isPartOfStaticBatch", "contents": "Renderer.isPartOfStaticBatch" },
		{ "trigger": "Renderer.isVisible", "contents": "Renderer.isVisible" },
		{ "trigger": "Renderer.receiveShadows", "contents": "Renderer.receiveShadows" },
		{ "trigger": "Renderer.SetPropertyBlock(properties)", "contents": "Renderer.SetPropertyBlock(${1:MaterialPropertyBlock properties});" },
		{ "trigger": "Renderer.localToWorldMatrix", "contents": "Renderer.localToWorldMatrix" },
		{ "trigger": "Renderer.lightProbeAnchor", "contents": "Renderer.lightProbeAnchor" },
		{ "trigger": "ActionScript", "contents": "ActionScript" },
		{ "trigger": "ActionScript.Import(package)", "contents": "ActionScript.Import(${1:String package});" },
		{ "trigger": "ActionScript.Expression(formatString, params arguments)", "contents": "ActionScript.Expression(${1:String formatString}, ${2:object[] params arguments});" },
		{ "trigger": "ActionScript.Statement(formatString, params arguments)", "contents": "ActionScript.Statement(${1:String formatString}, ${2:object[] params arguments});" },
		{ "trigger": "ContactPoint", "contents": "ContactPoint" },
		{ "trigger": "ContactPoint.otherCollider", "contents": "ContactPoint.otherCollider" },
		{ "trigger": "ContactPoint.thisCollider", "contents": "ContactPoint.thisCollider" },
		{ "trigger": "ContactPoint.normal", "contents": "ContactPoint.normal" },
		{ "trigger": "ContactPoint.point", "contents": "ContactPoint.point" },
		{ "trigger": "StaticBatchingUtility", "contents": "StaticBatchingUtility" },
		{ "trigger": "StaticBatchingUtility.Combine(staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:GameObject staticBatchRoot});" },
		{ "trigger": "StaticBatchingUtility.Combine(gos, staticBatchRoot)", "contents": "StaticBatchingUtility.Combine(${1:GameObject[] gos}, ${2:GameObject staticBatchRoot});" },
		{ "trigger": "GUIStyle", "contents": "GUIStyle" },
		{ "trigger": "GUIStyle.clipping", "contents": "GUIStyle.clipping" },
		{ "trigger": "GUIStyle.GetCursorStringIndex(position, content, cursorPixelPosition)", "contents": "GUIStyle.GetCursorStringIndex(${1:Rect position}, ${2:GUIContent content}, ${3:Vector2 cursorPixelPosition});" },
		{ "trigger": "GUIStyle.CalcMinMaxWidth(content, out minWidth, out maxWidth)", "contents": "GUIStyle.CalcMinMaxWidth(${1:GUIContent content}, ${2:float out minWidth}, ${3:float out maxWidth});" },
		{ "trigger": "GUIStyle.fixedWidth", "contents": "GUIStyle.fixedWidth" },
		{ "trigger": "GUIStyle.contentOffset", "contents": "GUIStyle.contentOffset" },
		{ "trigger": "GUIStyle.wordWrap", "contents": "GUIStyle.wordWrap" },
		{ "trigger": "GUIStyle.CalcScreenSize(contentSize)", "contents": "GUIStyle.CalcScreenSize(${1:Vector2 contentSize});" },
		{ "trigger": "GUIStyle.fixedHeight", "contents": "GUIStyle.fixedHeight" },
		{ "trigger": "GUIStyle.DrawCursor(position, content, controlID, Character)", "contents": "GUIStyle.DrawCursor(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:int Character});" },
		{ "trigger": "GUIStyle.font", "contents": "GUIStyle.font" },
		{ "trigger": "GUIStyle.border", "contents": "GUIStyle.border" },
		{ "trigger": "GUIStyle.onNormal", "contents": "GUIStyle.onNormal" },
		{ "trigger": "GUIStyle.alignment", "contents": "GUIStyle.alignment" },
		{ "trigger": "GUIStyle.Draw(position, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:boolean isHover}, ${3:boolean isActive}, ${4:boolean on}, ${5:boolean hasKeyboardFocus});" },
		{ "trigger": "GUIStyle.Draw(position, text, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:String text}, ${3:boolean isHover}, ${4:boolean isActive}, ${5:boolean on}, ${6:boolean hasKeyboardFocus});" },
		{ "trigger": "GUIStyle.Draw(position, image, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:Texture image}, ${3:boolean isHover}, ${4:boolean isActive}, ${5:boolean on}, ${6:boolean hasKeyboardFocus});" },
		{ "trigger": "GUIStyle.Draw(position, content, isHover, isActive, on, hasKeyboardFocus)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:GUIContent content}, ${3:boolean isHover}, ${4:boolean isActive}, ${5:boolean on}, ${6:boolean hasKeyboardFocus});" },
		{ "trigger": "GUIStyle.Draw(position, content, controlID, on)", "contents": "GUIStyle.Draw(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:boolean on = false});" },
		{ "trigger": "GUIStyle.DrawWithTextSelection(position, content, controlID, firstSelectedCharacter, lastSelectedCharacter)", "contents": "GUIStyle.DrawWithTextSelection(${1:Rect position}, ${2:GUIContent content}, ${3:int controlID}, ${4:int firstSelectedCharacter}, ${5:int lastSelectedCharacter});" },
		{ "trigger": "GUIStyle.GetCursorPixelPosition(position, content, cursorStringIndex)", "contents": "GUIStyle.GetCursorPixelPosition(${1:Rect position}, ${2:GUIContent content}, ${3:int cursorStringIndex});" },
		{ "trigger": "GUIStyle.fontSize", "contents": "GUIStyle.fontSize" },
		{ "trigger": "GUIStyle.lineHeight", "contents": "GUIStyle.lineHeight" },
		{ "trigger": "GUIStyle.onActive", "contents": "GUIStyle.onActive" },
		{ "trigger": "GUIStyle.hover", "contents": "GUIStyle.hover" },
		{ "trigger": "GUIStyle.normal", "contents": "GUIStyle.normal" },
		{ "trigger": "GUIStyle.imagePosition", "contents": "GUIStyle.imagePosition" },
		{ "trigger": "GUIStyle.onHover", "contents": "GUIStyle.onHover" },
		{ "trigger": "GUIStyle.richText", "contents": "GUIStyle.richText" },
		{ "trigger": "GUIStyle.padding", "contents": "GUIStyle.padding" },
		{ "trigger": "GUIStyle.focused", "contents": "GUIStyle.focused" },
		{ "trigger": "GUIStyle.active", "contents": "GUIStyle.active" },
		{ "trigger": "GUIStyle.overflow", "contents": "GUIStyle.overflow" },
		{ "trigger": "GUIStyle.none", "contents": "GUIStyle.none" },
		{ "trigger": "GUIStyle.fontStyle", "contents": "GUIStyle.fontStyle" },
		{ "trigger": "GUIStyle.CalcHeight(content, width)", "contents": "GUIStyle.CalcHeight(${1:GUIContent content}, ${2:float width});" },
		{ "trigger": "GUIStyle.name", "contents": "GUIStyle.name" },
		{ "trigger": "GUIStyle.margin", "contents": "GUIStyle.margin" },
		{ "trigger": "GUIStyle.stretchWidth", "contents": "GUIStyle.stretchWidth" },
		{ "trigger": "GUIStyle.stretchHeight", "contents": "GUIStyle.stretchHeight" },
		{ "trigger": "GUIStyle.onFocused", "contents": "GUIStyle.onFocused" },
		{ "trigger": "GUIStyle()", "contents": "GUIStyle();" },
		{ "trigger": "GUIStyle(other)", "contents": "GUIStyle(${1:GUIStyle other});" },
		{ "trigger": "GUIStyle.CalcSize(content)", "contents": "GUIStyle.CalcSize(${1:GUIContent content});" },
		{ "trigger": "WebCamDevice", "contents": "WebCamDevice" },
		{ "trigger": "WebCamDevice.name", "contents": "WebCamDevice.name" },
		{ "trigger": "WebCamDevice.isFrontFacing", "contents": "WebCamDevice.isFrontFacing" },
		{ "trigger": "SphereCollider", "contents": "SphereCollider" },
		{ "trigger": "SphereCollider.radius", "contents": "SphereCollider.radius" },
		{ "trigger": "SphereCollider.center", "contents": "SphereCollider.center" },
		{ "trigger": "Texture", "contents": "Texture" },
		{ "trigger": "Texture.GetNativeTexturePtr()", "contents": "Texture.GetNativeTexturePtr();" },
		{ "trigger": "Texture.mipMapBias", "contents": "Texture.mipMapBias" },
		{ "trigger": "Texture.filterMode", "contents": "Texture.filterMode" },
		{ "trigger": "Texture.anisoLevel", "contents": "Texture.anisoLevel" },
		{ "trigger": "Texture.height", "contents": "Texture.height" },
		{ "trigger": "Texture.width", "contents": "Texture.width" },
		{ "trigger": "Texture.wrapMode", "contents": "Texture.wrapMode" },
		{ "trigger": "Texture.GetNativeTextureID()", "contents": "Texture.GetNativeTextureID();" },
		{ "trigger": "Texture.SetGlobalAnisotropicFilteringLimits(forcedMin, globalMax)", "contents": "Texture.SetGlobalAnisotropicFilteringLimits(${1:int forcedMin}, ${2:int globalMax});" },
		{ "trigger": "Joint", "contents": "Joint" },
		{ "trigger": "Joint.breakForce", "contents": "Joint.breakForce" },
		{ "trigger": "Joint.OnJointBreak(breakForce)", "contents": "Joint.OnJointBreak(${1:float breakForce});" },
		{ "trigger": "Joint.connectedBody", "contents": "Joint.connectedBody" },
		{ "trigger": "Joint.breakTorque", "contents": "Joint.breakTorque" },
		{ "trigger": "Joint.anchor", "contents": "Joint.anchor" },
		{ "trigger": "Joint.axis", "contents": "Joint.axis" },
		{ "trigger": "LOD", "contents": "LOD" },
		{ "trigger": "LOD.screenRelativeTransitionHeight", "contents": "LOD.screenRelativeTransitionHeight" },
		{ "trigger": "LOD.renderers", "contents": "LOD.renderers" },
		{ "trigger": "LOD(screenRelativeTransitionHeight, renderers)", "contents": "LOD(${1:float screenRelativeTransitionHeight}, ${2:Renderer[] renderers});" },
		{ "trigger": "SystemInfo", "contents": "SystemInfo" },
		{ "trigger": "SystemInfo.deviceName", "contents": "SystemInfo.deviceName" },
		{ "trigger": "SystemInfo.graphicsDeviceVersion", "contents": "SystemInfo.graphicsDeviceVersion" },
		{ "trigger": "SystemInfo.supportedRenderTargetCount", "contents": "SystemInfo.supportedRenderTargetCount" },
		{ "trigger": "SystemInfo.supportsVibration", "contents": "SystemInfo.supportsVibration" },
		{ "trigger": "SystemInfo.supportsLocationService", "contents": "SystemInfo.supportsLocationService" },
		{ "trigger": "SystemInfo.graphicsMemorySize", "contents": "SystemInfo.graphicsMemorySize" },
		{ "trigger": "SystemInfo.processorType", "contents": "SystemInfo.processorType" },
		{ "trigger": "SystemInfo.supportsComputeShaders", "contents": "SystemInfo.supportsComputeShaders" },
		{ "trigger": "SystemInfo.graphicsShaderLevel", "contents": "SystemInfo.graphicsShaderLevel" },
		{ "trigger": "SystemInfo.graphicsDeviceVendorID", "contents": "SystemInfo.graphicsDeviceVendorID" },
		{ "trigger": "SystemInfo.deviceModel", "contents": "SystemInfo.deviceModel" },
		{ "trigger": "SystemInfo.graphicsDeviceID", "contents": "SystemInfo.graphicsDeviceID" },
		{ "trigger": "SystemInfo.supportsAccelerometer", "contents": "SystemInfo.supportsAccelerometer" },
		{ "trigger": "SystemInfo.supportsShadows", "contents": "SystemInfo.supportsShadows" },
		{ "trigger": "SystemInfo.deviceType", "contents": "SystemInfo.deviceType" },
		{ "trigger": "SystemInfo.supportsGyroscope", "contents": "SystemInfo.supportsGyroscope" },
		{ "trigger": "SystemInfo.systemMemorySize", "contents": "SystemInfo.systemMemorySize" },
		{ "trigger": "SystemInfo.graphicsDeviceName", "contents": "SystemInfo.graphicsDeviceName" },
		{ "trigger": "SystemInfo.supportsInstancing", "contents": "SystemInfo.supportsInstancing" },
		{ "trigger": "SystemInfo.supports3DTextures", "contents": "SystemInfo.supports3DTextures" },
		{ "trigger": "SystemInfo.graphicsDeviceVendor", "contents": "SystemInfo.graphicsDeviceVendor" },
		{ "trigger": "SystemInfo.graphicsPixelFillrate", "contents": "SystemInfo.graphicsPixelFillrate" },
		{ "trigger": "SystemInfo.processorCount", "contents": "SystemInfo.processorCount" },
		{ "trigger": "SystemInfo.supportsRenderTextures", "contents": "SystemInfo.supportsRenderTextures" },
		{ "trigger": "SystemInfo.supportsImageEffects", "contents": "SystemInfo.supportsImageEffects" },
		{ "trigger": "SystemInfo.SupportsRenderTextureFormat(format)", "contents": "SystemInfo.SupportsRenderTextureFormat(${1:RenderTextureFormat format});" },
		{ "trigger": "SystemInfo.deviceUniqueIdentifier", "contents": "SystemInfo.deviceUniqueIdentifier" },
		{ "trigger": "SystemInfo.operatingSystem", "contents": "SystemInfo.operatingSystem" },
		{ "trigger": "Vector2", "contents": "Vector2" },
		{ "trigger": "Vector2.Normalize()", "contents": "Vector2.Normalize();" },
		{ "trigger": "Vector2.right", "contents": "Vector2.right" },
		{ "trigger": "Vector2.Angle(from, to)", "contents": "Vector2.Angle(${1:Vector2 from}, ${2:Vector2 to});" },
		{ "trigger": "Vector2.Min(lhs, rhs)", "contents": "Vector2.Min(${1:Vector2 lhs}, ${2:Vector2 rhs});" },
		{ "trigger": "Vector2(x, y)", "contents": "Vector2(${1:float x}, ${2:float y});" },
		{ "trigger": "Vector2.one", "contents": "Vector2.one" },
		{ "trigger": "Vector2.zero", "contents": "Vector2.zero" },
		{ "trigger": "Vector2.Scale(scale)", "contents": "Vector2.Scale(${1:Vector2 scale});" },
		{ "trigger": "Vector2.Scale(a, b)", "contents": "Vector2.Scale(${1:Vector2 a}, ${2:Vector2 b});" },
		{ "trigger": "Vector2.ClampMagnitude(vector, maxLength)", "contents": "Vector2.ClampMagnitude(${1:Vector2 vector}, ${2:float maxLength});" },
		{ "trigger": "Vector2.Lerp(from, to, t)", "contents": "Vector2.Lerp(${1:Vector2 from}, ${2:Vector2 to}, ${3:float t});" },
		{ "trigger": "Vector2.Max(lhs, rhs)", "contents": "Vector2.Max(${1:Vector2 lhs}, ${2:Vector2 rhs});" },
		{ "trigger": "Vector2.Distance(a, b)", "contents": "Vector2.Distance(${1:Vector2 a}, ${2:Vector2 b});" },
		{ "trigger": "Vector2.this [int index]", "contents": "Vector2.this [int index]" },
		{ "trigger": "Vector2.ToString()", "contents": "Vector2.ToString();" },
		{ "trigger": "Vector2.ToString(format)", "contents": "Vector2.ToString(${1:String format});" },
		{ "trigger": "Vector2.normalized", "contents": "Vector2.normalized" },
		{ "trigger": "Vector2.Dot(lhs, rhs)", "contents": "Vector2.Dot(${1:Vector2 lhs}, ${2:Vector2 rhs});" },
		{ "trigger": "Vector2.Set(new_x, new_y)", "contents": "Vector2.Set(${1:float new_x}, ${2:float new_y});" },
		{ "trigger": "Vector2.up", "contents": "Vector2.up" },
		{ "trigger": "Vector2.magnitude", "contents": "Vector2.magnitude" },
		{ "trigger": "Vector2.sqrMagnitude", "contents": "Vector2.sqrMagnitude" },
		{ "trigger": "Vector2.y", "contents": "Vector2.y" },
		{ "trigger": "Vector2.x", "contents": "Vector2.x" },
		{ "trigger": "Vector2.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector2.MoveTowards(${1:Vector2 current}, ${2:Vector2 target}, ${3:float maxDistanceDelta});" },
		{ "trigger": "Vector3", "contents": "Vector3" },
		{ "trigger": "Vector3.Normalize()", "contents": "Vector3.Normalize();" },
		{ "trigger": "Vector3.Slerp(from, to, t)", "contents": "Vector3.Slerp(${1:Vector3 from}, ${2:Vector3 to}, ${3:float t});" },
		{ "trigger": "Vector3.right", "contents": "Vector3.right" },
		{ "trigger": "Vector3.Angle(from, to)", "contents": "Vector3.Angle(${1:Vector3 from}, ${2:Vector3 to});" },
		{ "trigger": "Vector3.Min(lhs, rhs)", "contents": "Vector3.Min(${1:Vector3 lhs}, ${2:Vector3 rhs});" },
		{ "trigger": "Vector3(x, y, z)", "contents": "Vector3(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Vector3(x, y)", "contents": "Vector3(${1:float x}, ${2:float y});" },
		{ "trigger": "Vector3.Cross(lhs, rhs)", "contents": "Vector3.Cross(${1:Vector3 lhs}, ${2:Vector3 rhs});" },
		{ "trigger": "Vector3.one", "contents": "Vector3.one" },
		{ "trigger": "Vector3.zero", "contents": "Vector3.zero" },
		{ "trigger": "Vector3.Scale(scale)", "contents": "Vector3.Scale(${1:Vector3 scale});" },
		{ "trigger": "Vector3.Scale(a, b)", "contents": "Vector3.Scale(${1:Vector3 a}, ${2:Vector3 b});" },
		{ "trigger": "Vector3.ClampMagnitude(vector, maxLength)", "contents": "Vector3.ClampMagnitude(${1:Vector3 vector}, ${2:float maxLength});" },
		{ "trigger": "Vector3.SmoothDamp(current, target, ref currentVelocity, smoothTime, maxSpeed, deltaTime)", "contents": "Vector3.SmoothDamp(${1:Vector3 current}, ${2:Vector3 target}, ${3:Vector3 ref currentVelocity}, ${4:float smoothTime}, ${5:float maxSpeed = Mathf.Infinity}, ${6:float deltaTime = Time.deltaTime});" },
		{ "trigger": "Vector3.Lerp(from, to, t)", "contents": "Vector3.Lerp(${1:Vector3 from}, ${2:Vector3 to}, ${3:float t});" },
		{ "trigger": "Vector3.Max(lhs, rhs)", "contents": "Vector3.Max(${1:Vector3 lhs}, ${2:Vector3 rhs});" },
		{ "trigger": "Vector3.Reflect(inDirection, inNormal)", "contents": "Vector3.Reflect(${1:Vector3 inDirection}, ${2:Vector3 inNormal});" },
		{ "trigger": "Vector3.forward", "contents": "Vector3.forward" },
		{ "trigger": "Vector3.Distance(a, b)", "contents": "Vector3.Distance(${1:Vector3 a}, ${2:Vector3 b});" },
		{ "trigger": "Vector3.Project(vector, onNormal)", "contents": "Vector3.Project(${1:Vector3 vector}, ${2:Vector3 onNormal});" },
		{ "trigger": "Vector3.this [int index]", "contents": "Vector3.this [int index]" },
		{ "trigger": "Vector3.ToString()", "contents": "Vector3.ToString();" },
		{ "trigger": "Vector3.ToString(format)", "contents": "Vector3.ToString(${1:String format});" },
		{ "trigger": "Vector3.normalized", "contents": "Vector3.normalized" },
		{ "trigger": "Vector3.Dot(lhs, rhs)", "contents": "Vector3.Dot(${1:Vector3 lhs}, ${2:Vector3 rhs});" },
		{ "trigger": "Vector3.Set(new_x, new_y, new_z)", "contents": "Vector3.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z});" },
		{ "trigger": "Vector3.up", "contents": "Vector3.up" },
		{ "trigger": "Vector3.RotateTowards(current, target, maxRadiansDelta, maxMagnitudeDelta)", "contents": "Vector3.RotateTowards(${1:Vector3 current}, ${2:Vector3 target}, ${3:float maxRadiansDelta}, ${4:float maxMagnitudeDelta});" },
		{ "trigger": "Vector3.magnitude", "contents": "Vector3.magnitude" },
		{ "trigger": "Vector3.sqrMagnitude", "contents": "Vector3.sqrMagnitude" },
		{ "trigger": "Vector3.y", "contents": "Vector3.y" },
		{ "trigger": "Vector3.x", "contents": "Vector3.x" },
		{ "trigger": "Vector3.z", "contents": "Vector3.z" },
		{ "trigger": "Vector3.OrthoNormalize(ref normal, ref tangent)", "contents": "Vector3.OrthoNormalize(${1:Vector3 ref normal}, ${2:Vector3 ref tangent});" },
		{ "trigger": "Vector3.OrthoNormalize(ref normal, ref tangent, ref binormal)", "contents": "Vector3.OrthoNormalize(${1:Vector3 ref normal}, ${2:Vector3 ref tangent}, ${3:Vector3 ref binormal});" },
		{ "trigger": "Vector3.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector3.MoveTowards(${1:Vector3 current}, ${2:Vector3 target}, ${3:float maxDistanceDelta});" },
		{ "trigger": "Vector4", "contents": "Vector4" },
		{ "trigger": "Vector4.Normalize()", "contents": "Vector4.Normalize();" },
		{ "trigger": "Vector4.Scale(scale)", "contents": "Vector4.Scale(${1:Vector4 scale});" },
		{ "trigger": "Vector4.Scale(a, b)", "contents": "Vector4.Scale(${1:Vector4 a}, ${2:Vector4 b});" },
		{ "trigger": "Vector4.Min(lhs, rhs)", "contents": "Vector4.Min(${1:Vector4 lhs}, ${2:Vector4 rhs});" },
		{ "trigger": "Vector4(x, y, z, w)", "contents": "Vector4(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w});" },
		{ "trigger": "Vector4(x, y, z)", "contents": "Vector4(${1:float x}, ${2:float y}, ${3:float z});" },
		{ "trigger": "Vector4(x, y)", "contents": "Vector4(${1:float x}, ${2:float y});" },
		{ "trigger": "Vector4.one", "contents": "Vector4.one" },
		{ "trigger": "Vector4.zero", "contents": "Vector4.zero" },
		{ "trigger": "Vector4.Lerp(from, to, t)", "contents": "Vector4.Lerp(${1:Vector4 from}, ${2:Vector4 to}, ${3:float t});" },
		{ "trigger": "Vector4.Max(lhs, rhs)", "contents": "Vector4.Max(${1:Vector4 lhs}, ${2:Vector4 rhs});" },
		{ "trigger": "Vector4.Distance(a, b)", "contents": "Vector4.Distance(${1:Vector4 a}, ${2:Vector4 b});" },
		{ "trigger": "Vector4.Project(a, b)", "contents": "Vector4.Project(${1:Vector4 a}, ${2:Vector4 b});" },
		{ "trigger": "Vector4.this [int index]", "contents": "Vector4.this [int index]" },
		{ "trigger": "Vector4.ToString()", "contents": "Vector4.ToString();" },
		{ "trigger": "Vector4.ToString(format)", "contents": "Vector4.ToString(${1:String format});" },
		{ "trigger": "Vector4.normalized", "contents": "Vector4.normalized" },
		{ "trigger": "Vector4.Dot(a, b)", "contents": "Vector4.Dot(${1:Vector4 a}, ${2:Vector4 b});" },
		{ "trigger": "Vector4.Set(new_x, new_y, new_z, new_w)", "contents": "Vector4.Set(${1:float new_x}, ${2:float new_y}, ${3:float new_z}, ${4:float new_w});" },
		{ "trigger": "Vector4.magnitude", "contents": "Vector4.magnitude" },
		{ "trigger": "Vector4.sqrMagnitude", "contents": "Vector4.sqrMagnitude" },
		{ "trigger": "Vector4.w", "contents": "Vector4.w" },
		{ "trigger": "Vector4.y", "contents": "Vector4.y" },
		{ "trigger": "Vector4.x", "contents": "Vector4.x" },
		{ "trigger": "Vector4.z", "contents": "Vector4.z" },
		{ "trigger": "Vector4.MoveTowards(current, target, maxDistanceDelta)", "contents": "Vector4.MoveTowards(${1:Vector4 current}, ${2:Vector4 target}, ${3:float maxDistanceDelta});" },
		{ "trigger": "AudioListener", "contents": "AudioListener" },
		{ "trigger": "AudioListener.volume", "contents": "AudioListener.volume" },
		{ "trigger": "AudioListener.velocityUpdateMode", "contents": "AudioListener.velocityUpdateMode" },
		{ "trigger": "AudioListener.pause", "contents": "AudioListener.pause" },
		{ "trigger": "AudioListener.GetSpectrumData(samples, channel, window)", "contents": "AudioListener.GetSpectrumData(${1:float[] samples}, ${2:int channel}, ${3:FFTWindow window});" },
		{ "trigger": "AudioListener.GetOutputData(samples, channel)", "contents": "AudioListener.GetOutputData(${1:float[] samples}, ${2:int channel});" },
		{ "trigger": "Matrix4x4", "contents": "Matrix4x4" },
		{ "trigger": "Matrix4x4.MultiplyPoint3x4(v)", "contents": "Matrix4x4.MultiplyPoint3x4(${1:Vector3 v});" },
		{ "trigger": "Matrix4x4.GetColumn(i)", "contents": "Matrix4x4.GetColumn(${1:int i});" },
		{ "trigger": "Matrix4x4.SetTRS(pos, q, s)", "contents": "Matrix4x4.SetTRS(${1:Vector3 pos}, ${2:Quaternion q}, ${3:Vector3 s});" },
		{ "trigger": "Matrix4x4.SetColumn(i, v)", "contents": "Matrix4x4.SetColumn(${1:int i}, ${2:Vector4 v});" },
		{ "trigger": "Matrix4x4.TRS(pos, q, s)", "contents": "Matrix4x4.TRS(${1:Vector3 pos}, ${2:Quaternion q}, ${3:Vector3 s});" },
		{ "trigger": "Matrix4x4.MultiplyVector(v)", "contents": "Matrix4x4.MultiplyVector(${1:Vector3 v});" },
		{ "trigger": "Matrix4x4.transpose", "contents": "Matrix4x4.transpose" },
		{ "trigger": "Matrix4x4.isIdentity", "contents": "Matrix4x4.isIdentity" },
		{ "trigger": "Matrix4x4.Ortho(left, right, bottom, top, zNear, zFar)", "contents": "Matrix4x4.Ortho(${1:float left}, ${2:float right}, ${3:float bottom}, ${4:float top}, ${5:float zNear}, ${6:float zFar});" },
		{ "trigger": "Matrix4x4.zero", "contents": "Matrix4x4.zero" },
		{ "trigger": "Matrix4x4.inverse", "contents": "Matrix4x4.inverse" },
		{ "trigger": "Matrix4x4.ToString()", "contents": "Matrix4x4.ToString();" },
		{ "trigger": "Matrix4x4.ToString(format)", "contents": "Matrix4x4.ToString(${1:String format});" },
		{ "trigger": "Matrix4x4.GetRow(i)", "contents": "Matrix4x4.GetRow(${1:int i});" },
		{ "trigger": "Matrix4x4.this [int row, int column]", "contents": "Matrix4x4.this [int row, int column]" },
		{ "trigger": "Matrix4x4.this [int index]", "contents": "Matrix4x4.this [int index]" },
		{ "trigger": "Matrix4x4.MultiplyPoint(v)", "contents": "Matrix4x4.MultiplyPoint(${1:Vector3 v});" },
		{ "trigger": "Matrix4x4.Scale(v)", "contents": "Matrix4x4.Scale(${1:Vector3 v});" },
		{ "trigger": "Matrix4x4.SetRow(i, v)", "contents": "Matrix4x4.SetRow(${1:int i}, ${2:Vector4 v});" },
		{ "trigger": "Matrix4x4.identity", "contents": "Matrix4x4.identity" },
		{ "trigger": "Matrix4x4.Perspective(fov, aspect, zNear, zFar)", "contents": "Matrix4x4.Perspective(${1:float fov}, ${2:float aspect}, ${3:float zNear}, ${4:float zFar});" },
		{ "trigger": "Animation", "contents": "Animation" },
		{ "trigger": "Animation.AddClip(clip, newName)", "contents": "Animation.AddClip(${1:AnimationClip clip}, ${2:String newName});" },
		{ "trigger": "Animation.AddClip(clip, newName, firstFrame, lastFrame, addLoopFrame)", "contents": "Animation.AddClip(${1:AnimationClip clip}, ${2:String newName}, ${3:int firstFrame}, ${4:int lastFrame}, ${5:boolean addLoopFrame = false});" },
		{ "trigger": "Animation.RemoveClip(clip)", "contents": "Animation.RemoveClip(${1:AnimationClip clip});" },
		{ "trigger": "Animation.RemoveClip(clipName)", "contents": "Animation.RemoveClip(${1:String clipName});" },
		{ "trigger": "Animation.Play(mode)", "contents": "Animation.Play(${1:PlayMode mode = PlayMode.StopSameLayer});" },
		{ "trigger": "Animation.Play(animation, mode)", "contents": "Animation.Play(${1:String animation}, ${2:PlayMode mode = PlayMode.StopSameLayer});" },
		{ "trigger": "Animation.isPlaying", "contents": "Animation.isPlaying" },
		{ "trigger": "Animation.this [string name]", "contents": "Animation.this [string name]" },
		{ "trigger": "Animation.clip", "contents": "Animation.clip" },
		{ "trigger": "Animation.cullingType", "contents": "Animation.cullingType" },
		{ "trigger": "Animation.localBounds", "contents": "Animation.localBounds" },
		{ "trigger": "Animation.PlayQueued(animation, queue, mode)", "contents": "Animation.PlayQueued(${1:String animation}, ${2:QueueMode queue = QueueMode.CompleteOthers}, ${3:PlayMode mode = PlayMode.StopSameLayer});" },
		{ "trigger": "Animation.playAutomatically", "contents": "Animation.playAutomatically" },
		{ "trigger": "Animation.CrossFadeQueued(animation, fadeLength, queue, mode)", "contents": "Animation.CrossFadeQueued(${1:String animation}, ${2:float fadeLength = 0.3F}, ${3:QueueMode queue = QueueMode.CompleteOthers}, ${4:PlayMode mode = PlayMode.StopSameLayer});" },
		{ "trigger": "Animation.Sample()", "contents": "Animation.Sample();" },
		{ "trigger": "Animation.SyncLayer(layer)", "contents": "Animation.SyncLayer(${1:int layer});" },
		{ "trigger": "Animation.animatePhysics", "contents": "Animation.animatePhysics" },
		{ "trigger": "Animation.CrossFade(animation, fadeLength, mode)", "contents": "Animation.CrossFade(${1:String animation}, ${2:float fadeLength = 0.3F}, ${3:PlayMode mode = PlayMode.StopSameLayer});" },
		{ "trigger": "Animation.wrapMode", "contents": "Animation.wrapMode" },
		{ "trigger": "Animation.Rewind(name)", "contents": "Animation.Rewind(${1:String name});" },
		{ "trigger": "Animation.Rewind()", "contents": "Animation.Rewind();" },
		{ "trigger": "Animation.GetClipCount()", "contents": "Animation.GetClipCount();" },
		{ "trigger": "Animation.Stop()", "contents": "Animation.Stop();" },
		{ "trigger": "Animation.Stop(name)", "contents": "Animation.Stop(${1:String name});" },
		{ "trigger": "Animation.Blend(animation, targetWeight, fadeLength)", "contents": "Animation.Blend(${1:String animation}, ${2:float targetWeight = 1.0F}, ${3:float fadeLength = 0.3F});" },
		{ "trigger": "Animation.IsPlaying(name)", "contents": "Animation.IsPlaying(${1:String name});" },
		{ "trigger": "ILocalUser", "contents": "ILocalUser" },
		{ "trigger": "ILocalUser.underage", "contents": "ILocalUser.underage" },
		{ "trigger": "ILocalUser.Authenticate(callback)", "contents": "ILocalUser.Authenticate(${1:System.Action<bool> callback});" },
		{ "trigger": "ILocalUser.friends", "contents": "ILocalUser.friends" },
		{ "trigger": "ILocalUser.authenticated", "contents": "ILocalUser.authenticated" },
		{ "trigger": "ILocalUser.LoadFriends(callback)", "contents": "ILocalUser.LoadFriends(${1:System.Action<bool> callback});" },
		{ "trigger": "InteractiveCloth", "contents": "InteractiveCloth" },
		{ "trigger": "InteractiveCloth.attachmentResponse", "contents": "InteractiveCloth.attachmentResponse" },
		{ "trigger": "InteractiveCloth.AttachToCollider(collider, tearable, twoWayInteraction)", "contents": "InteractiveCloth.AttachToCollider(${1:Collider collider}, ${2:boolean tearable = false}, ${3:boolean twoWayInteraction = false});" },
		{ "trigger": "InteractiveCloth.attachmentTearFactor", "contents": "InteractiveCloth.attachmentTearFactor" },
		{ "trigger": "InteractiveCloth.isTeared", "contents": "InteractiveCloth.isTeared" },
		{ "trigger": "InteractiveCloth.AddForceAtPosition(force, position, radius, mode)", "contents": "InteractiveCloth.AddForceAtPosition(${1:Vector3 force}, ${2:Vector3 position}, ${3:float radius}, ${4:ForceMode mode = ForceMode.Force});" },
		{ "trigger": "InteractiveCloth.density", "contents": "InteractiveCloth.density" },
		{ "trigger": "InteractiveCloth.friction", "contents": "InteractiveCloth.friction" },
		{ "trigger": "InteractiveCloth.pressure", "contents": "InteractiveCloth.pressure" },
		{ "trigger": "InteractiveCloth.mesh", "contents": "InteractiveCloth.mesh" },
		{ "trigger": "InteractiveCloth.tearFactor", "contents": "InteractiveCloth.tearFactor" },
		{ "trigger": "InteractiveCloth.collisionResponse", "contents": "InteractiveCloth.collisionResponse" },
		{ "trigger": "InteractiveCloth.DetachFromCollider(collider)", "contents": "InteractiveCloth.DetachFromCollider(${1:Collider collider});" },
		{ "trigger": "MonoBehaviour", "contents": "MonoBehaviour" },
		{ "trigger": "MonoBehaviour.OnCollisionStay(collisionInfo)", "contents": "MonoBehaviour.OnCollisionStay(${1:Collision collisionInfo});" },
		{ "trigger": "MonoBehaviour.OnDisable()", "contents": "MonoBehaviour.OnDisable();" },
		{ "trigger": "MonoBehaviour.OnJointBreak(breakForce)", "contents": "MonoBehaviour.OnJointBreak(${1:float breakForce});" },
		{ "trigger": "MonoBehaviour.OnDisconnectedFromServer(mode)", "contents": "MonoBehaviour.OnDisconnectedFromServer(${1:NetworkDisconnection mode});" },
		{ "trigger": "MonoBehaviour.OnPlayerConnected(player)", "contents": "MonoBehaviour.OnPlayerConnected(${1:NetworkPlayer player});" },
		{ "trigger": "MonoBehaviour.OnDrawGizmosSelected()", "contents": "MonoBehaviour.OnDrawGizmosSelected();" },
		{ "trigger": "MonoBehaviour.OnSerializeNetworkView(stream, info)", "contents": "MonoBehaviour.OnSerializeNetworkView(${1:BitStream stream}, ${2:NetworkMessageInfo info});" },
		{ "trigger": "MonoBehaviour.Start()", "contents": "MonoBehaviour.Start();" },
		{ "trigger": "MonoBehaviour.OnAnimatorIK(layerIndex)", "contents": "MonoBehaviour.OnAnimatorIK(${1:int layerIndex});" },
		{ "trigger": "MonoBehaviour.LateUpdate()", "contents": "MonoBehaviour.LateUpdate();" },
		{ "trigger": "MonoBehaviour.OnMouseUp()", "contents": "MonoBehaviour.OnMouseUp();" },
		{ "trigger": "MonoBehaviour.OnMasterServerEvent(msEvent)", "contents": "MonoBehaviour.OnMasterServerEvent(${1:MasterServerEvent msEvent});" },
		{ "trigger": "MonoBehaviour.OnFailedToConnectToMasterServer(error)", "contents": "MonoBehaviour.OnFailedToConnectToMasterServer(${1:NetworkConnectionError error});" },
		{ "trigger": "MonoBehaviour.OnConnectedToServer()", "contents": "MonoBehaviour.OnConnectedToServer();" },
		{ "trigger": "MonoBehaviour.StopAllCoroutines()", "contents": "MonoBehaviour.StopAllCoroutines();" },
		{ "trigger": "MonoBehaviour.Invoke(methodName, time)", "contents": "MonoBehaviour.Invoke(${1:String methodName}, ${2:float time});" },
		{ "trigger": "MonoBehaviour.OnGUI()", "contents": "MonoBehaviour.OnGUI();" },
		{ "trigger": "MonoBehaviour.OnMouseUpAsButton()", "contents": "MonoBehaviour.OnMouseUpAsButton();" },
		{ "trigger": "MonoBehaviour.OnMouseExit()", "contents": "MonoBehaviour.OnMouseExit();" },
		{ "trigger": "MonoBehaviour.Update()", "contents": "MonoBehaviour.Update();" },
		{ "trigger": "MonoBehaviour.OnAudioFilterRead()", "contents": "MonoBehaviour.OnAudioFilterRead();" },
		{ "trigger": "MonoBehaviour.OnPreRender()", "contents": "MonoBehaviour.OnPreRender();" },
		{ "trigger": "MonoBehaviour.StartCoroutine(routine)", "contents": "MonoBehaviour.StartCoroutine(${1:IEnumerator routine});" },
		{ "trigger": "MonoBehaviour.StartCoroutine(methodName, value)", "contents": "MonoBehaviour.StartCoroutine(${1:String methodName}, ${2:object value = null});" },
		{ "trigger": "MonoBehaviour.OnMouseOver()", "contents": "MonoBehaviour.OnMouseOver();" },
		{ "trigger": "MonoBehaviour.OnAnimatorMove()", "contents": "MonoBehaviour.OnAnimatorMove();" },
		{ "trigger": "MonoBehaviour.OnPreCull()", "contents": "MonoBehaviour.OnPreCull();" },
		{ "trigger": "MonoBehaviour.OnTriggerExit(other)", "contents": "MonoBehaviour.OnTriggerExit(${1:Collider other});" },
		{ "trigger": "MonoBehaviour.Awake()", "contents": "MonoBehaviour.Awake();" },
		{ "trigger": "MonoBehaviour.InvokeRepeating(methodName, time, repeatRate)", "contents": "MonoBehaviour.InvokeRepeating(${1:String methodName}, ${2:float time}, ${3:float repeatRate});" },
		{ "trigger": "MonoBehaviour.OnCollisionEnter(collisionInfo)", "contents": "MonoBehaviour.OnCollisionEnter(${1:Collision collisionInfo});" },
		{ "trigger": "MonoBehaviour.OnEnable()", "contents": "MonoBehaviour.OnEnable();" },
		{ "trigger": "MonoBehaviour.OnRenderImage(source, destination)", "contents": "MonoBehaviour.OnRenderImage(${1:RenderTexture source}, ${2:RenderTexture destination});" },
		{ "trigger": "MonoBehaviour.Reset()", "contents": "MonoBehaviour.Reset();" },
		{ "trigger": "MonoBehaviour.OnDestroy()", "contents": "MonoBehaviour.OnDestroy();" },
		{ "trigger": "MonoBehaviour.OnFailedToConnect(error)", "contents": "MonoBehaviour.OnFailedToConnect(${1:NetworkConnectionError error});" },
		{ "trigger": "MonoBehaviour.OnControllerColliderHit(hit)", "contents": "MonoBehaviour.OnControllerColliderHit(${1:ControllerColliderHit hit});" },
		{ "trigger": "MonoBehaviour.StopCoroutine(methodName)", "contents": "MonoBehaviour.StopCoroutine(${1:String methodName});" },
		{ "trigger": "MonoBehaviour.useGUILayout", "contents": "MonoBehaviour.useGUILayout" },
		{ "trigger": "MonoBehaviour.OnMouseEnter()", "contents": "MonoBehaviour.OnMouseEnter();" },
		{ "trigger": "MonoBehaviour.OnTriggerEnter(other)", "contents": "MonoBehaviour.OnTriggerEnter(${1:Collider other});" },
		{ "trigger": "MonoBehaviour.print(message)", "contents": "MonoBehaviour.print(${1:object message});" },
		{ "trigger": "MonoBehaviour.CancelInvoke()", "contents": "MonoBehaviour.CancelInvoke();" },
		{ "trigger": "MonoBehaviour.CancelInvoke(methodName)", "contents": "MonoBehaviour.CancelInvoke(${1:String methodName});" },
		{ "trigger": "MonoBehaviour.OnRenderObject()", "contents": "MonoBehaviour.OnRenderObject();" },
		{ "trigger": "MonoBehaviour.OnLevelWasLoaded(level)", "contents": "MonoBehaviour.OnLevelWasLoaded(${1:int level});" },
		{ "trigger": "MonoBehaviour.OnApplicationPause(pause)", "contents": "MonoBehaviour.OnApplicationPause(${1:boolean pause});" },
		{ "trigger": "MonoBehaviour.OnPostRender()", "contents": "MonoBehaviour.OnPostRender();" },
		{ "trigger": "MonoBehaviour.OnBecameVisible()", "contents": "MonoBehaviour.OnBecameVisible();" },
		{ "trigger": "MonoBehaviour.OnDrawGizmos()", "contents": "MonoBehaviour.OnDrawGizmos();" },
		{ "trigger": "MonoBehaviour.OnTriggerStay(other)", "contents": "MonoBehaviour.OnTriggerStay(${1:Collider other});" },
		{ "trigger": "MonoBehaviour.OnNetworkInstantiate(info)", "contents": "MonoBehaviour.OnNetworkInstantiate(${1:NetworkMessageInfo info});" },
		{ "trigger": "MonoBehaviour.OnApplicationFocus(focus)", "contents": "MonoBehaviour.OnApplicationFocus(${1:boolean focus});" },
		{ "trigger": "MonoBehaviour.IsInvoking(methodName)", "contents": "MonoBehaviour.IsInvoking(${1:String methodName});" },
		{ "trigger": "MonoBehaviour.IsInvoking()", "contents": "MonoBehaviour.IsInvoking();" },
		{ "trigger": "MonoBehaviour.OnPlayerDisconnected(player)", "contents": "MonoBehaviour.OnPlayerDisconnected(${1:NetworkPlayer player});" },
		{ "trigger": "MonoBehaviour.OnMouseDrag()", "contents": "MonoBehaviour.OnMouseDrag();" },
		{ "trigger": "MonoBehaviour.OnCollisionExit(collisionInfo)", "contents": "MonoBehaviour.OnCollisionExit(${1:Collision collisionInfo});" },
		{ "trigger": "MonoBehaviour.OnMouseDown()", "contents": "MonoBehaviour.OnMouseDown();" },
		{ "trigger": "MonoBehaviour.OnServerInitialized()", "contents": "MonoBehaviour.OnServerInitialized();" },
		{ "trigger": "MonoBehaviour.OnApplicationQuit()", "contents": "MonoBehaviour.OnApplicationQuit();" },
		{ "trigger": "MonoBehaviour.OnWillRenderObject()", "contents": "MonoBehaviour.OnWillRenderObject();" },
		{ "trigger": "MonoBehaviour.FixedUpdate()", "contents": "MonoBehaviour.FixedUpdate();" },
		{ "trigger": "MonoBehaviour.OnParticleCollision(other)", "contents": "MonoBehaviour.OnParticleCollision(${1:GameObject other});" },
		{ "trigger": "MonoBehaviour.OnBecameInvisible()", "contents": "MonoBehaviour.OnBecameInvisible();" },
		{ "trigger": "YieldInstruction", "contents": "YieldInstruction" },
		{ "trigger": "ISocialPlatform", "contents": "ISocialPlatform" },
		{ "trigger": "ISocialPlatform.CreateAchievement()", "contents": "ISocialPlatform.CreateAchievement();" },
		{ "trigger": "ISocialPlatform.localUser", "contents": "ISocialPlatform.localUser" },
		{ "trigger": "ISocialPlatform.ShowAchievementsUI()", "contents": "ISocialPlatform.ShowAchievementsUI();" },
		{ "trigger": "ISocialPlatform.LoadUsers(userIds, callback)", "contents": "ISocialPlatform.LoadUsers(${1:string[] userIds}, ${2:Action<IUserProfile[]> callback});" },
		{ "trigger": "ISocialPlatform.CreateLeaderboard()", "contents": "ISocialPlatform.CreateLeaderboard();" },
		{ "trigger": "ISocialPlatform.ReportProgress(id, progress, callback)", "contents": "ISocialPlatform.ReportProgress(${1:String id}, ${2:double progress}, ${3:System.Action<bool> callback});" },
		{ "trigger": "ISocialPlatform.LoadAchievements(callback)", "contents": "ISocialPlatform.LoadAchievements(${1:System.Action<IAchievement[]> callback});" },
		{ "trigger": "ISocialPlatform.LoadAchievementDescriptions(callback)", "contents": "ISocialPlatform.LoadAchievementDescriptions(${1:System.Action<IAchievementDescription[]> callback});" },
		{ "trigger": "ISocialPlatform.ReportScore(score, board, callback)", "contents": "ISocialPlatform.ReportScore(${1:Int64 score}, ${2:String board}, ${3:System.Action<bool> callback});" },
		{ "trigger": "ISocialPlatform.ShowLeaderboardUI()", "contents": "ISocialPlatform.ShowLeaderboardUI();" },
		{ "trigger": "ISocialPlatform.LoadScores(leaderboardID, callback)", "contents": "ISocialPlatform.LoadScores(${1:String leaderboardID}, ${2:System.Action<Score[]> callback});" },
		{ "trigger": "Gizmos", "contents": "Gizmos" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Material mat = null});" },
		{ "trigger": "Gizmos.DrawGUITexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Gizmos.DrawGUITexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:int leftBorder}, ${4:int rightBorder}, ${5:int topBorder}, ${6:int bottomBorder}, ${7:Material mat = null});" },
		{ "trigger": "Gizmos.matrix", "contents": "Gizmos.matrix" },
		{ "trigger": "Gizmos.color", "contents": "Gizmos.color" },
		{ "trigger": "Gizmos.DrawIcon(center, name, allowScaling)", "contents": "Gizmos.DrawIcon(${1:Vector3 center}, ${2:String name}, ${3:boolean allowScaling = true});" },
		{ "trigger": "Gizmos.DrawRay(r)", "contents": "Gizmos.DrawRay(${1:Ray r});" },
		{ "trigger": "Gizmos.DrawRay(from, direction)", "contents": "Gizmos.DrawRay(${1:Vector3 from}, ${2:Vector3 direction});" },
		{ "trigger": "Gizmos.DrawWireSphere(center, radius)", "contents": "Gizmos.DrawWireSphere(${1:Vector3 center}, ${2:float radius});" },
		{ "trigger": "Gizmos.DrawLine(from, to)", "contents": "Gizmos.DrawLine(${1:Vector3 from}, ${2:Vector3 to});" },
		{ "trigger": "Gizmos.DrawWireCube(center, size)", "contents": "Gizmos.DrawWireCube(${1:Vector3 center}, ${2:Vector3 size});" },
		{ "trigger": "Gizmos.DrawCube(center, size)", "contents": "Gizmos.DrawCube(${1:Vector3 center}, ${2:Vector3 size});" },
		{ "trigger": "Gizmos.DrawSphere(center, radius)", "contents": "Gizmos.DrawSphere(${1:Vector3 center}, ${2:float radius});" },
		{ "trigger": "GUIElement", "contents": "GUIElement" },
		{ "trigger": "GUIElement.HitTest(screenPosition, camera)", "contents": "GUIElement.HitTest(${1:Vector3 screenPosition}, ${2:Camera camera = null});" },
		{ "trigger": "GUIElement.GetScreenRect(camera)", "contents": "GUIElement.GetScreenRect(${1:Camera camera = null});" },
		{ "trigger": "MeshFilter", "contents": "MeshFilter" },
		{ "trigger": "MeshFilter.mesh", "contents": "MeshFilter.mesh" },
		{ "trigger": "MeshFilter.sharedMesh", "contents": "MeshFilter.sharedMesh" },
		{ "trigger": "ParticleAnimator", "contents": "ParticleAnimator" },
		{ "trigger": "ParticleAnimator.sizeGrow", "contents": "ParticleAnimator.sizeGrow" },
		{ "trigger": "ParticleAnimator.colorAnimation", "contents": "ParticleAnimator.colorAnimation" },
		{ "trigger": "ParticleAnimator.force", "contents": "ParticleAnimator.force" },
		{ "trigger": "ParticleAnimator.rndForce", "contents": "ParticleAnimator.rndForce" },
		{ "trigger": "ParticleAnimator.worldRotationAxis", "contents": "ParticleAnimator.worldRotationAxis" },
		{ "trigger": "ParticleAnimator.localRotationAxis", "contents": "ParticleAnimator.localRotationAxis" },
		{ "trigger": "ParticleAnimator.damping", "contents": "ParticleAnimator.damping" },
		{ "trigger": "ParticleAnimator.autodestruct", "contents": "ParticleAnimator.autodestruct" },
		{ "trigger": "ParticleAnimator.doesAnimateColor", "contents": "ParticleAnimator.doesAnimateColor" },
		{ "trigger": "Resources", "contents": "Resources" },
		{ "trigger": "Resources.Load(path)", "contents": "Resources.Load(${1:String path});" },
		{ "trigger": "Resources.Load(path, systemTypeInstance)", "contents": "Resources.Load(${1:String path}, ${2:Type systemTypeInstance});" },
		{ "trigger": "Resources.FindObjectsOfTypeAll(type)", "contents": "Resources.FindObjectsOfTypeAll(${1:Type type});" },
		{ "trigger": "Resources.LoadAll(path, systemTypeInstance)", "contents": "Resources.LoadAll(${1:String path}, ${2:Type systemTypeInstance});" },
		{ "trigger": "Resources.LoadAll(path)", "contents": "Resources.LoadAll(${1:String path});" },
		{ "trigger": "Resources.UnloadUnusedAssets()", "contents": "Resources.UnloadUnusedAssets();" },
		{ "trigger": "Resources.LoadAssetAtPath(assetPath, type)", "contents": "Resources.LoadAssetAtPath(${1:String assetPath}, ${2:Type type});" },
		{ "trigger": "Resources.UnloadAsset(assetToUnload)", "contents": "Resources.UnloadAsset(${1:Object assetToUnload});" },
		{ "trigger": "Component", "contents": "Component" },
		{ "trigger": "Component.hingeJoint", "contents": "Component.hingeJoint" },
		{ "trigger": "Component.tag", "contents": "Component.tag" },
		{ "trigger": "Component.SendMessage(methodName, value, options)", "contents": "Component.SendMessage(${1:String methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "Component.renderer", "contents": "Component.renderer" },
		{ "trigger": "Component.networkView", "contents": "Component.networkView" },
		{ "trigger": "Component.constantForce", "contents": "Component.constantForce" },
		{ "trigger": "Component.collider", "contents": "Component.collider" },
		{ "trigger": "Component.GetComponentInChildren(t)", "contents": "Component.GetComponentInChildren(${1:Type t});" },
		{ "trigger": "Component.GetComponentInChildren()", "contents": "Component.GetComponentInChildren();" },
		{ "trigger": "Component.transform", "contents": "Component.transform" },
		{ "trigger": "Component.animation", "contents": "Component.animation" },
		{ "trigger": "Component.GetComponents(type)", "contents": "Component.GetComponents(${1:Type type});" },
		{ "trigger": "Component.GetComponents()", "contents": "Component.GetComponents();" },
		{ "trigger": "Component.particleEmitter", "contents": "Component.particleEmitter" },
		{ "trigger": "Component.rigidbody", "contents": "Component.rigidbody" },
		{ "trigger": "Component.BroadcastMessage(methodName, parameter, options)", "contents": "Component.BroadcastMessage(${1:String methodName}, ${2:object parameter = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "Component.gameObject", "contents": "Component.gameObject" },
		{ "trigger": "Component.SendMessageUpwards(methodName, value, options)", "contents": "Component.SendMessageUpwards(${1:String methodName}, ${2:object value = null}, ${3:SendMessageOptions options = SendMessageOptions.RequireReceiver});" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:Type type});" },
		{ "trigger": "Component.GetComponent()", "contents": "Component.GetComponent();" },
		{ "trigger": "Component.GetComponent(type)", "contents": "Component.GetComponent(${1:String type});" },
		{ "trigger": "Component.GetComponentsInChildren(t, includeInactive)", "contents": "Component.GetComponentsInChildren(${1:Type t}, ${2:boolean includeInactive = false});" },
		{ "trigger": "Component.GetComponentsInChildren(includeInactive)", "contents": "Component.GetComponentsInChildren(${1:boolean includeInactive});" },
		{ "trigger": "Component.GetComponentsInChildren()", "contents": "Component.GetComponentsInChildren();" },
		{ "trigger": "Component.CompareTag(tag)", "contents": "Component.CompareTag(${1:String tag});" },
		{ "trigger": "Component.light", "contents": "Component.light" },
		{ "trigger": "Component.guiText", "contents": "Component.guiText" },
		{ "trigger": "Component.guiTexture", "contents": "Component.guiTexture" },
		{ "trigger": "Component.audio", "contents": "Component.audio" },
		{ "trigger": "Component.camera", "contents": "Component.camera" },
		{ "trigger": "Component.particleSystem", "contents": "Component.particleSystem" },
		{ "trigger": "WaitForSeconds", "contents": "WaitForSeconds" },
		{ "trigger": "WaitForSeconds(seconds)", "contents": "WaitForSeconds(${1:float seconds});" },
		{ "trigger": "IAchievementDescription", "contents": "IAchievementDescription" },
		{ "trigger": "IAchievementDescription.title", "contents": "IAchievementDescription.title" },
		{ "trigger": "IAchievementDescription.achievedDescription", "contents": "IAchievementDescription.achievedDescription" },
		{ "trigger": "IAchievementDescription.image", "contents": "IAchievementDescription.image" },
		{ "trigger": "IAchievementDescription.points", "contents": "IAchievementDescription.points" },
		{ "trigger": "IAchievementDescription.unachievedDescription", "contents": "IAchievementDescription.unachievedDescription" },
		{ "trigger": "IAchievementDescription.hidden", "contents": "IAchievementDescription.hidden" },
		{ "trigger": "IAchievementDescription.id", "contents": "IAchievementDescription.id" },
		{ "trigger": "AudioDistortionFilter", "contents": "AudioDistortionFilter" },
		{ "trigger": "AudioDistortionFilter.distortionLevel", "contents": "AudioDistortionFilter.distortionLevel" },
		{ "trigger": "Plane", "contents": "Plane" },
		{ "trigger": "Plane.distance", "contents": "Plane.distance" },
		{ "trigger": "Plane.SameSide(inPt0, inPt1)", "contents": "Plane.SameSide(${1:Vector3 inPt0}, ${2:Vector3 inPt1});" },
		{ "trigger": "Plane.SetNormalAndPosition(inNormal, inPoint)", "contents": "Plane.SetNormalAndPosition(${1:Vector3 inNormal}, ${2:Vector3 inPoint});" },
		{ "trigger": "Plane.GetSide(inPt)", "contents": "Plane.GetSide(${1:Vector3 inPt});" },
		{ "trigger": "Plane.normal", "contents": "Plane.normal" },
		{ "trigger": "Plane.Set3Points(a, b, c)", "contents": "Plane.Set3Points(${1:Vector3 a}, ${2:Vector3 b}, ${3:Vector3 c});" },
		{ "trigger": "Plane.Raycast(ray, out enter)", "contents": "Plane.Raycast(${1:Ray ray}, ${2:float out enter});" },
		{ "trigger": "Plane(inNormal, inPoint)", "contents": "Plane(${1:Vector3 inNormal}, ${2:Vector3 inPoint});" },
		{ "trigger": "Plane(inNormal, d)", "contents": "Plane(${1:Vector3 inNormal}, ${2:float d});" },
		{ "trigger": "Plane(a, b, c)", "contents": "Plane(${1:Vector3 a}, ${2:Vector3 b}, ${3:Vector3 c});" },
		{ "trigger": "Plane.GetDistanceToPoint(inPt)", "contents": "Plane.GetDistanceToPoint(${1:Vector3 inPt});" },
		{ "trigger": "TrailRenderer", "contents": "TrailRenderer" },
		{ "trigger": "TrailRenderer.startWidth", "contents": "TrailRenderer.startWidth" },
		{ "trigger": "TrailRenderer.autodestruct", "contents": "TrailRenderer.autodestruct" },
		{ "trigger": "TrailRenderer.endWidth", "contents": "TrailRenderer.endWidth" },
		{ "trigger": "TrailRenderer.time", "contents": "TrailRenderer.time" },
		{ "trigger": "GUIStyleState", "contents": "GUIStyleState" },
		{ "trigger": "GUIStyleState.textColor", "contents": "GUIStyleState.textColor" },
		{ "trigger": "GUIStyleState.background", "contents": "GUIStyleState.background" },
		{ "trigger": "GUIStyleState()", "contents": "GUIStyleState();" },
		{ "trigger": "Graphics", "contents": "Graphics" },
		{ "trigger": "Graphics.activeDepthBuffer", "contents": "Graphics.activeDepthBuffer" },
		{ "trigger": "Graphics.ClearRandomWriteTargets()", "contents": "Graphics.ClearRandomWriteTargets();" },
		{ "trigger": "Graphics.SetRenderTarget(rt)", "contents": "Graphics.SetRenderTarget(${1:RenderTexture rt});" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffer, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer colorBuffer}, ${2:RenderBuffer depthBuffer});" },
		{ "trigger": "Graphics.SetRenderTarget(colorBuffers, depthBuffer)", "contents": "Graphics.SetRenderTarget(${1:RenderBuffer[] colorBuffers}, ${2:RenderBuffer depthBuffer});" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:int index}, ${2:RenderTexture uav});" },
		{ "trigger": "Graphics.SetRandomWriteTarget(index, uav)", "contents": "Graphics.SetRandomWriteTarget(${1:int index}, ${2:ComputeBuffer uav});" },
		{ "trigger": "Graphics.DrawProceduralIndirect(topology, bufferWithArgs, argsOffset)", "contents": "Graphics.DrawProceduralIndirect(${1:MeshTopology topology}, ${2:ComputeBuffer bufferWithArgs}, ${3:int argsOffset = 0});" },
		{ "trigger": "Graphics.activeColorBuffer", "contents": "Graphics.activeColorBuffer" },
		{ "trigger": "Graphics.DrawMesh(mesh, position, rotation, material, layer, camera, submeshIndex, properties)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:Material material}, ${5:int layer}, ${6:Camera camera = null}, ${7:int submeshIndex = 0}, ${8:MaterialPropertyBlock properties = null});" },
		{ "trigger": "Graphics.DrawMesh(mesh, matrix, material, layer, camera, submeshIndex, properties)", "contents": "Graphics.DrawMesh(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:Material material}, ${4:int layer}, ${5:Camera camera = null}, ${6:int submeshIndex = 0}, ${7:MaterialPropertyBlock properties = null});" },
		{ "trigger": "Graphics.Blit(source, dest)", "contents": "Graphics.Blit(${1:Texture source}, ${2:RenderTexture dest});" },
		{ "trigger": "Graphics.Blit(source, dest, mat, pass)", "contents": "Graphics.Blit(${1:Texture source}, ${2:RenderTexture dest}, ${3:Material mat}, ${4:int pass = -1});" },
		{ "trigger": "Graphics.Blit(source, mat, pass)", "contents": "Graphics.Blit(${1:Texture source}, ${2:Material mat}, ${3:int pass = -1});" },
		{ "trigger": "Graphics.BlitMultiTap(source, dest, mat, params offsets)", "contents": "Graphics.BlitMultiTap(${1:Texture source}, ${2:RenderTexture dest}, ${3:Material mat}, ${4:Vector2[] params offsets});" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation});" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, position, rotation, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:int materialIndex});" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Matrix4x4 matrix});" },
		{ "trigger": "Graphics.DrawMeshNow(mesh, matrix, materialIndex)", "contents": "Graphics.DrawMeshNow(${1:Mesh mesh}, ${2:Matrix4x4 matrix}, ${3:int materialIndex});" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Material mat = null});" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:int leftBorder}, ${4:int rightBorder}, ${5:int topBorder}, ${6:int bottomBorder}, ${7:Material mat = null});" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Rect sourceRect}, ${4:int leftBorder}, ${5:int rightBorder}, ${6:int topBorder}, ${7:int bottomBorder}, ${8:Material mat = null});" },
		{ "trigger": "Graphics.DrawTexture(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat)", "contents": "Graphics.DrawTexture(${1:Rect screenRect}, ${2:Texture texture}, ${3:Rect sourceRect}, ${4:int leftBorder}, ${5:int rightBorder}, ${6:int topBorder}, ${7:int bottomBorder}, ${8:Color color}, ${9:Material mat = null});" },
		{ "trigger": "Graphics.DrawProcedural(topology, vertexCount, instanceCount)", "contents": "Graphics.DrawProcedural(${1:MeshTopology topology}, ${2:int vertexCount}, ${3:int instanceCount = 1});" },
		{ "trigger": "AudioEchoFilter", "contents": "AudioEchoFilter" },
		{ "trigger": "AudioEchoFilter.delay", "contents": "AudioEchoFilter.delay" },
		{ "trigger": "AudioEchoFilter.dryMix", "contents": "AudioEchoFilter.dryMix" },
		{ "trigger": "AudioEchoFilter.wetMix", "contents": "AudioEchoFilter.wetMix" },
		{ "trigger": "AudioEchoFilter.decayRatio", "contents": "AudioEchoFilter.decayRatio" },
		{ "trigger": "GUISkin", "contents": "GUISkin" },
		{ "trigger": "GUISkin.customStyles", "contents": "GUISkin.customStyles" },
		{ "trigger": "GUISkin.textArea", "contents": "GUISkin.textArea" },
		{ "trigger": "GUISkin.horizontalScrollbarLeftButton", "contents": "GUISkin.horizontalScrollbarLeftButton" },
		{ "trigger": "GUISkin.toggle", "contents": "GUISkin.toggle" },
		{ "trigger": "GUISkin.verticalSlider", "contents": "GUISkin.verticalSlider" },
		{ "trigger": "GUISkin.horizontalSlider", "contents": "GUISkin.horizontalSlider" },
		{ "trigger": "GUISkin.font", "contents": "GUISkin.font" },
		{ "trigger": "GUISkin.verticalScrollbarUpButton", "contents": "GUISkin.verticalScrollbarUpButton" },
		{ "trigger": "GUISkin.verticalScrollbarThumb", "contents": "GUISkin.verticalScrollbarThumb" },
		{ "trigger": "GUISkin.FindStyle(styleName)", "contents": "GUISkin.FindStyle(${1:String styleName});" },
		{ "trigger": "GUISkin.scrollView", "contents": "GUISkin.scrollView" },
		{ "trigger": "GUISkin.label", "contents": "GUISkin.label" },
		{ "trigger": "GUISkin.window", "contents": "GUISkin.window" },
		{ "trigger": "GUISkin.horizontalScrollbarThumb", "contents": "GUISkin.horizontalScrollbarThumb" },
		{ "trigger": "GUISkin.verticalScrollbarDownButton", "contents": "GUISkin.verticalScrollbarDownButton" },
		{ "trigger": "GUISkin.box", "contents": "GUISkin.box" },
		{ "trigger": "GUISkin.horizontalSliderThumb", "contents": "GUISkin.horizontalSliderThumb" },
		{ "trigger": "GUISkin.settings", "contents": "GUISkin.settings" },
		{ "trigger": "GUISkin.button", "contents": "GUISkin.button" },
		{ "trigger": "GUISkin.verticalSliderThumb", "contents": "GUISkin.verticalSliderThumb" },
		{ "trigger": "GUISkin.horizontalScrollbarRightButton", "contents": "GUISkin.horizontalScrollbarRightButton" },
		{ "trigger": "GUISkin.GetStyle(styleName)", "contents": "GUISkin.GetStyle(${1:String styleName});" },
		{ "trigger": "GUISkin.verticalScrollbar", "contents": "GUISkin.verticalScrollbar" },
		{ "trigger": "GUISkin.horizontalScrollbar", "contents": "GUISkin.horizontalScrollbar" },
		{ "trigger": "GUISkin.textField", "contents": "GUISkin.textField" },
		{ "trigger": "WaitForFixedUpdate", "contents": "WaitForFixedUpdate" },
		{ "trigger": "ConstantForce", "contents": "ConstantForce" },
		{ "trigger": "ConstantForce.force", "contents": "ConstantForce.force" },
		{ "trigger": "ConstantForce.relativeTorque", "contents": "ConstantForce.relativeTorque" },
		{ "trigger": "ConstantForce.torque", "contents": "ConstantForce.torque" },
		{ "trigger": "ConstantForce.relativeForce", "contents": "ConstantForce.relativeForce" },
		{ "trigger": "RenderBuffer", "contents": "RenderBuffer" },
		{ "trigger": "MeshCollider", "contents": "MeshCollider" },
		{ "trigger": "MeshCollider.smoothSphereCollisions", "contents": "MeshCollider.smoothSphereCollisions" },
		{ "trigger": "MeshCollider.sharedMesh", "contents": "MeshCollider.sharedMesh" },
		{ "trigger": "MeshCollider.convex", "contents": "MeshCollider.convex" },
		{ "trigger": "QualitySettings", "contents": "QualitySettings" },
		{ "trigger": "QualitySettings.shadowCascades", "contents": "QualitySettings.shadowCascades" },
		{ "trigger": "QualitySettings.shadowProjection", "contents": "QualitySettings.shadowProjection" },
		{ "trigger": "QualitySettings.desiredColorSpace", "contents": "QualitySettings.desiredColorSpace" },
		{ "trigger": "QualitySettings.IncreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.IncreaseLevel(${1:boolean applyExpensiveChanges = false});" },
		{ "trigger": "QualitySettings.antiAliasing", "contents": "QualitySettings.antiAliasing" },
		{ "trigger": "QualitySettings.anisotropicFiltering", "contents": "QualitySettings.anisotropicFiltering" },
		{ "trigger": "QualitySettings.masterTextureLimit", "contents": "QualitySettings.masterTextureLimit" },
		{ "trigger": "QualitySettings.particleRaycastBudget", "contents": "QualitySettings.particleRaycastBudget" },
		{ "trigger": "QualitySettings.SetQualityLevel(index, applyExpensiveChanges)", "contents": "QualitySettings.SetQualityLevel(${1:int index}, ${2:boolean applyExpensiveChanges = true});" },
		{ "trigger": "QualitySettings.lodBias", "contents": "QualitySettings.lodBias" },
		{ "trigger": "QualitySettings.maxQueuedFrames", "contents": "QualitySettings.maxQueuedFrames" },
		{ "trigger": "QualitySettings.blendWeights", "contents": "QualitySettings.blendWeights" },
		{ "trigger": "QualitySettings.softVegetation", "contents": "QualitySettings.softVegetation" },
		{ "trigger": "QualitySettings.DecreaseLevel(applyExpensiveChanges)", "contents": "QualitySettings.DecreaseLevel(${1:boolean applyExpensiveChanges = false});" },
		{ "trigger": "QualitySettings.names", "contents": "QualitySettings.names" },
		{ "trigger": "QualitySettings.GetQualityLevel()", "contents": "QualitySettings.GetQualityLevel();" },
		{ "trigger": "QualitySettings.vSyncCount", "contents": "QualitySettings.vSyncCount" },
		{ "trigger": "QualitySettings.shadowDistance", "contents": "QualitySettings.shadowDistance" },
		{ "trigger": "QualitySettings.maximumLODLevel", "contents": "QualitySettings.maximumLODLevel" },
		{ "trigger": "QualitySettings.pixelLightCount", "contents": "QualitySettings.pixelLightCount" },
		{ "trigger": "QualitySettings.activeColorSpace", "contents": "QualitySettings.activeColorSpace" },
		{ "trigger": "JointDrive", "contents": "JointDrive" },
		{ "trigger": "JointDrive.positionSpring", "contents": "JointDrive.positionSpring" },
		{ "trigger": "JointDrive.positionDamper", "contents": "JointDrive.positionDamper" },
		{ "trigger": "JointDrive.maximumForce", "contents": "JointDrive.maximumForce" },
		{ "trigger": "JointDrive.mode", "contents": "JointDrive.mode" },
		{ "trigger": "AndroidJNI", "contents": "AndroidJNI" },
		{ "trigger": "AndroidJNI.DeleteGlobalRef(obj)", "contents": "AndroidJNI.DeleteGlobalRef(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.SetCharArrayElement(array, index, val)", "contents": "AndroidJNI.SetCharArrayElement(${1:IntPtr array}, ${2:int index}, ${3:Char val});" },
		{ "trigger": "AndroidJNI.GetBooleanField(obj, fieldID)", "contents": "AndroidJNI.GetBooleanField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.FromDoubleArray(array)", "contents": "AndroidJNI.FromDoubleArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.SetBooleanArrayElement(array, index, val)", "contents": "AndroidJNI.SetBooleanArrayElement(${1:IntPtr array}, ${2:int index}, ${3:byte val});" },
		{ "trigger": "AndroidJNI.GetObjectArrayElement(array, index)", "contents": "AndroidJNI.GetObjectArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.SetObjectArrayElement(array, index, obj)", "contents": "AndroidJNI.SetObjectArrayElement(${1:IntPtr array}, ${2:int index}, ${3:IntPtr obj});" },
		{ "trigger": "AndroidJNI.CallVoidMethod(obj, methodID, args)", "contents": "AndroidJNI.CallVoidMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.FromCharArray(array)", "contents": "AndroidJNI.FromCharArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.GetShortField(obj, fieldID)", "contents": "AndroidJNI.GetShortField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetShortArrayElement(array, index)", "contents": "AndroidJNI.GetShortArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.FromLongArray(array)", "contents": "AndroidJNI.FromLongArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.SetShortArrayElement(array, index, val)", "contents": "AndroidJNI.SetShortArrayElement(${1:IntPtr array}, ${2:int index}, ${3:Int16 val});" },
		{ "trigger": "AndroidJNI.GetStaticMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticMethodID(${1:IntPtr clazz}, ${2:String name}, ${3:String sig});" },
		{ "trigger": "AndroidJNI.CallObjectMethod(obj, methodID, args)", "contents": "AndroidJNI.CallObjectMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.ToDoubleArray(array)", "contents": "AndroidJNI.ToDoubleArray(${1:double[] array});" },
		{ "trigger": "AndroidJNI.SetStringField(obj, fieldID, val)", "contents": "AndroidJNI.SetStringField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:String val});" },
		{ "trigger": "AndroidJNI.CallStaticDoubleMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticDoubleMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.AllocObject(clazz)", "contents": "AndroidJNI.AllocObject(${1:IntPtr clazz});" },
		{ "trigger": "AndroidJNI.GetFloatArrayElement(array, index)", "contents": "AndroidJNI.GetFloatArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.ThrowNew(clazz, message)", "contents": "AndroidJNI.ThrowNew(${1:IntPtr clazz}, ${2:String message});" },
		{ "trigger": "AndroidJNI.CallStaticShortMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticShortMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.FromShortArray(array)", "contents": "AndroidJNI.FromShortArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.GetStaticShortField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticShortField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.ExceptionDescribe()", "contents": "AndroidJNI.ExceptionDescribe();" },
		{ "trigger": "AndroidJNI.SetStaticStringField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticStringField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:String val});" },
		{ "trigger": "AndroidJNI.ToObjectArray(array)", "contents": "AndroidJNI.ToObjectArray(${1:IntPtr[] array});" },
		{ "trigger": "AndroidJNI.NewCharArray(size)", "contents": "AndroidJNI.NewCharArray(${1:int size});" },
		{ "trigger": "AndroidJNI.FromReflectedField(refField)", "contents": "AndroidJNI.FromReflectedField(${1:IntPtr refField});" },
		{ "trigger": "AndroidJNI.GetStringUTFChars(str)", "contents": "AndroidJNI.GetStringUTFChars(${1:IntPtr str});" },
		{ "trigger": "AndroidJNI.SetIntArrayElement(array, index, val)", "contents": "AndroidJNI.SetIntArrayElement(${1:IntPtr array}, ${2:int index}, ${3:Int32 val});" },
		{ "trigger": "AndroidJNI.SetStaticByteField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticByteField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:Byte val});" },
		{ "trigger": "AndroidJNI.GetStaticStringField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticStringField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetCharArrayElement(array, index)", "contents": "AndroidJNI.GetCharArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.PopLocalFrame(result)", "contents": "AndroidJNI.PopLocalFrame(${1:IntPtr result});" },
		{ "trigger": "AndroidJNI.SetLongField(obj, fieldID, val)", "contents": "AndroidJNI.SetLongField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:Int64 val});" },
		{ "trigger": "AndroidJNI.GetFloatField(obj, fieldID)", "contents": "AndroidJNI.GetFloatField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.NewObjectArray(size, clazz, obj)", "contents": "AndroidJNI.NewObjectArray(${1:int size}, ${2:IntPtr clazz}, ${3:IntPtr obj});" },
		{ "trigger": "AndroidJNI.FromFloatArray(array)", "contents": "AndroidJNI.FromFloatArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.ExceptionOccurred()", "contents": "AndroidJNI.ExceptionOccurred();" },
		{ "trigger": "AndroidJNI.FromByteArray(array)", "contents": "AndroidJNI.FromByteArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.ToBooleanArray(array)", "contents": "AndroidJNI.ToBooleanArray(${1:Boolean[] array});" },
		{ "trigger": "AndroidJNI.CallDoubleMethod(obj, methodID, args)", "contents": "AndroidJNI.CallDoubleMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.ToReflectedField(clazz, fieldID, isStatic)", "contents": "AndroidJNI.ToReflectedField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:boolean isStatic});" },
		{ "trigger": "AndroidJNI.FatalError(message)", "contents": "AndroidJNI.FatalError(${1:String message});" },
		{ "trigger": "AndroidJNI.ToShortArray(array)", "contents": "AndroidJNI.ToShortArray(${1:Int16[] array});" },
		{ "trigger": "AndroidJNI.GetStaticByteField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticByteField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.NewLongArray(size)", "contents": "AndroidJNI.NewLongArray(${1:int size});" },
		{ "trigger": "AndroidJNI.SetCharField(obj, fieldID, val)", "contents": "AndroidJNI.SetCharField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:Char val});" },
		{ "trigger": "AndroidJNI.SetBooleanField(obj, fieldID, val)", "contents": "AndroidJNI.SetBooleanField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:boolean val});" },
		{ "trigger": "AndroidJNI.GetIntField(obj, fieldID)", "contents": "AndroidJNI.GetIntField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.ToLongArray(array)", "contents": "AndroidJNI.ToLongArray(${1:Int64[] array});" },
		{ "trigger": "AndroidJNI.DetachCurrentThread()", "contents": "AndroidJNI.DetachCurrentThread();" },
		{ "trigger": "AndroidJNI.FromObjectArray(array)", "contents": "AndroidJNI.FromObjectArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.GetStaticIntField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticIntField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.Throw(obj)", "contents": "AndroidJNI.Throw(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.CallLongMethod(obj, methodID, args)", "contents": "AndroidJNI.CallLongMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.PushLocalFrame(capacity)", "contents": "AndroidJNI.PushLocalFrame(${1:int capacity});" },
		{ "trigger": "AndroidJNI.SetStaticDoubleField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticDoubleField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:double val});" },
		{ "trigger": "AndroidJNI.GetStringUTFLength(str)", "contents": "AndroidJNI.GetStringUTFLength(${1:IntPtr str});" },
		{ "trigger": "AndroidJNI.CallCharMethod(obj, methodID, args)", "contents": "AndroidJNI.CallCharMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetLongArrayElement(array, index)", "contents": "AndroidJNI.GetLongArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.NewLocalRef(obj)", "contents": "AndroidJNI.NewLocalRef(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.ToByteArray(array)", "contents": "AndroidJNI.ToByteArray(${1:Byte[] array});" },
		{ "trigger": "AndroidJNI.NewStringUTF(bytes)", "contents": "AndroidJNI.NewStringUTF(${1:String bytes});" },
		{ "trigger": "AndroidJNI.FindClass(name)", "contents": "AndroidJNI.FindClass(${1:String name});" },
		{ "trigger": "AndroidJNI.SetDoubleArrayElement(array, index, val)", "contents": "AndroidJNI.SetDoubleArrayElement(${1:IntPtr array}, ${2:int index}, ${3:double val});" },
		{ "trigger": "AndroidJNI.SetByteArrayElement(array, index, val)", "contents": "AndroidJNI.SetByteArrayElement(${1:IntPtr array}, ${2:int index}, ${3:sbyte val});" },
		{ "trigger": "AndroidJNI.IsInstanceOf(obj, clazz)", "contents": "AndroidJNI.IsInstanceOf(${1:IntPtr obj}, ${2:IntPtr clazz});" },
		{ "trigger": "AndroidJNI.GetDoubleArrayElement(array, index)", "contents": "AndroidJNI.GetDoubleArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.SetByteField(obj, fieldID, val)", "contents": "AndroidJNI.SetByteField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:Byte val});" },
		{ "trigger": "AndroidJNI.SetStaticLongField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticLongField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:Int64 val});" },
		{ "trigger": "AndroidJNI.CallShortMethod(obj, methodID, args)", "contents": "AndroidJNI.CallShortMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.ToIntArray(array)", "contents": "AndroidJNI.ToIntArray(${1:Int32[] array});" },
		{ "trigger": "AndroidJNI.GetStaticObjectField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticObjectField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.NewObject(clazz, methodID, args)", "contents": "AndroidJNI.NewObject(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetVersion()", "contents": "AndroidJNI.GetVersion();" },
		{ "trigger": "AndroidJNI.SetDoubleField(obj, fieldID, val)", "contents": "AndroidJNI.SetDoubleField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:double val});" },
		{ "trigger": "AndroidJNI.GetByteField(obj, fieldID)", "contents": "AndroidJNI.GetByteField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.NewGlobalRef(obj)", "contents": "AndroidJNI.NewGlobalRef(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.EnsureLocalCapacity(capacity)", "contents": "AndroidJNI.EnsureLocalCapacity(${1:int capacity});" },
		{ "trigger": "AndroidJNI.GetStaticFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetStaticFieldID(${1:IntPtr clazz}, ${2:String name}, ${3:String sig});" },
		{ "trigger": "AndroidJNI.GetDoubleField(obj, fieldID)", "contents": "AndroidJNI.GetDoubleField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetObjectClass(obj)", "contents": "AndroidJNI.GetObjectClass(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.ToFloatArray(array)", "contents": "AndroidJNI.ToFloatArray(${1:float[] array});" },
		{ "trigger": "AndroidJNI.CallStaticCharMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticCharMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.NewIntArray(size)", "contents": "AndroidJNI.NewIntArray(${1:int size});" },
		{ "trigger": "AndroidJNI.CallIntMethod(obj, methodID, args)", "contents": "AndroidJNI.CallIntMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetBooleanArrayElement(array, index)", "contents": "AndroidJNI.GetBooleanArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.GetStaticCharField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticCharField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.CallStaticObjectMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticObjectMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.CallStaticStringMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticStringMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.CallFloatMethod(obj, methodID, args)", "contents": "AndroidJNI.CallFloatMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.SetShortField(obj, fieldID, val)", "contents": "AndroidJNI.SetShortField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:Int16 val});" },
		{ "trigger": "AndroidJNI.GetStaticLongField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticLongField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetStringField(obj, fieldID)", "contents": "AndroidJNI.GetStringField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.DeleteLocalRef(obj)", "contents": "AndroidJNI.DeleteLocalRef(${1:IntPtr obj});" },
		{ "trigger": "AndroidJNI.IsSameObject(obj1, obj2)", "contents": "AndroidJNI.IsSameObject(${1:IntPtr obj1}, ${2:IntPtr obj2});" },
		{ "trigger": "AndroidJNI.NewBooleanArray(size)", "contents": "AndroidJNI.NewBooleanArray(${1:int size});" },
		{ "trigger": "AndroidJNI.ExceptionClear()", "contents": "AndroidJNI.ExceptionClear();" },
		{ "trigger": "AndroidJNI.SetLongArrayElement(array, index, val)", "contents": "AndroidJNI.SetLongArrayElement(${1:IntPtr array}, ${2:int index}, ${3:Int64 val});" },
		{ "trigger": "AndroidJNI.SetStaticFloatField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticFloatField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:float val});" },
		{ "trigger": "AndroidJNI.GetFieldID(clazz, name, sig)", "contents": "AndroidJNI.GetFieldID(${1:IntPtr clazz}, ${2:String name}, ${3:String sig});" },
		{ "trigger": "AndroidJNI.CallBooleanMethod(obj, methodID, args)", "contents": "AndroidJNI.CallBooleanMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.CallStringMethod(obj, methodID, args)", "contents": "AndroidJNI.CallStringMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.NewFloatArray(size)", "contents": "AndroidJNI.NewFloatArray(${1:int size});" },
		{ "trigger": "AndroidJNI.CallStaticByteMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticByteMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.SetFloatField(obj, fieldID, val)", "contents": "AndroidJNI.SetFloatField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:float val});" },
		{ "trigger": "AndroidJNI.SetStaticBooleanField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticBooleanField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:boolean val});" },
		{ "trigger": "AndroidJNI.CallStaticLongMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticLongMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetObjectField(obj, fieldID)", "contents": "AndroidJNI.GetObjectField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.FromBooleanArray(array)", "contents": "AndroidJNI.FromBooleanArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.GetStaticDoubleField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticDoubleField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetCharField(obj, fieldID)", "contents": "AndroidJNI.GetCharField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.FromReflectedMethod(refMethod)", "contents": "AndroidJNI.FromReflectedMethod(${1:IntPtr refMethod});" },
		{ "trigger": "AndroidJNI.ToCharArray(array)", "contents": "AndroidJNI.ToCharArray(${1:Char[] array});" },
		{ "trigger": "AndroidJNI.CallStaticVoidMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticVoidMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.AttachCurrentThread()", "contents": "AndroidJNI.AttachCurrentThread();" },
		{ "trigger": "AndroidJNI.SetStaticIntField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticIntField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:Int32 val});" },
		{ "trigger": "AndroidJNI.ToReflectedMethod(clazz, methodID, isStatic)", "contents": "AndroidJNI.ToReflectedMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:boolean isStatic});" },
		{ "trigger": "AndroidJNI.SetStaticShortField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticShortField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:Int16 val});" },
		{ "trigger": "AndroidJNI.SetFloatArrayElement(array, index, val)", "contents": "AndroidJNI.SetFloatArrayElement(${1:IntPtr array}, ${2:int index}, ${3:float val});" },
		{ "trigger": "AndroidJNI.GetIntArrayElement(array, index)", "contents": "AndroidJNI.GetIntArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.NewShortArray(size)", "contents": "AndroidJNI.NewShortArray(${1:int size});" },
		{ "trigger": "AndroidJNI.NewByteArray(size)", "contents": "AndroidJNI.NewByteArray(${1:int size});" },
		{ "trigger": "AndroidJNI.SetObjectField(obj, fieldID, val)", "contents": "AndroidJNI.SetObjectField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:IntPtr val});" },
		{ "trigger": "AndroidJNI.GetStaticBooleanField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticBooleanField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetSuperclass(clazz)", "contents": "AndroidJNI.GetSuperclass(${1:IntPtr clazz});" },
		{ "trigger": "AndroidJNI.CallStaticBooleanMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticBooleanMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.IsAssignableFrom(clazz1, clazz2)", "contents": "AndroidJNI.IsAssignableFrom(${1:IntPtr clazz1}, ${2:IntPtr clazz2});" },
		{ "trigger": "AndroidJNI.FromIntArray(array)", "contents": "AndroidJNI.FromIntArray(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.CallByteMethod(obj, methodID, args)", "contents": "AndroidJNI.CallByteMethod(${1:IntPtr obj}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetLongField(obj, fieldID)", "contents": "AndroidJNI.GetLongField(${1:IntPtr obj}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.GetStaticFloatField(clazz, fieldID)", "contents": "AndroidJNI.GetStaticFloatField(${1:IntPtr clazz}, ${2:IntPtr fieldID});" },
		{ "trigger": "AndroidJNI.SetStaticCharField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticCharField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:Char val});" },
		{ "trigger": "AndroidJNI.GetMethodID(clazz, name, sig)", "contents": "AndroidJNI.GetMethodID(${1:IntPtr clazz}, ${2:String name}, ${3:String sig});" },
		{ "trigger": "AndroidJNI.NewDoubleArray(size)", "contents": "AndroidJNI.NewDoubleArray(${1:int size});" },
		{ "trigger": "AndroidJNI.CallStaticFloatMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticFloatMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.GetByteArrayElement(array, index)", "contents": "AndroidJNI.GetByteArrayElement(${1:IntPtr array}, ${2:int index});" },
		{ "trigger": "AndroidJNI.CallStaticIntMethod(clazz, methodID, args)", "contents": "AndroidJNI.CallStaticIntMethod(${1:IntPtr clazz}, ${2:IntPtr methodID}, ${3:jvalue[] args});" },
		{ "trigger": "AndroidJNI.SetIntField(obj, fieldID, val)", "contents": "AndroidJNI.SetIntField(${1:IntPtr obj}, ${2:IntPtr fieldID}, ${3:Int32 val});" },
		{ "trigger": "AndroidJNI.GetArrayLength(array)", "contents": "AndroidJNI.GetArrayLength(${1:IntPtr array});" },
		{ "trigger": "AndroidJNI.SetStaticObjectField(clazz, fieldID, val)", "contents": "AndroidJNI.SetStaticObjectField(${1:IntPtr clazz}, ${2:IntPtr fieldID}, ${3:IntPtr val});" },
		{ "trigger": "IUserProfile", "contents": "IUserProfile" },
		{ "trigger": "IUserProfile.userName", "contents": "IUserProfile.userName" },
		{ "trigger": "IUserProfile.isFriend", "contents": "IUserProfile.isFriend" },
		{ "trigger": "IUserProfile.state", "contents": "IUserProfile.state" },
		{ "trigger": "IUserProfile.userID", "contents": "IUserProfile.userID" },
		{ "trigger": "IUserProfile.image", "contents": "IUserProfile.image" },
		{ "trigger": "NetworkMessageInfo", "contents": "NetworkMessageInfo" },
		{ "trigger": "NetworkMessageInfo.timestamp", "contents": "NetworkMessageInfo.timestamp" },
		{ "trigger": "NetworkMessageInfo.sender", "contents": "NetworkMessageInfo.sender" },
		{ "trigger": "Bounds", "contents": "Bounds" },
		{ "trigger": "Bounds.extents", "contents": "Bounds.extents" },
		{ "trigger": "Bounds.center", "contents": "Bounds.center" },
		{ "trigger": "Bounds.min", "contents": "Bounds.min" },
		{ "trigger": "Bounds.max", "contents": "Bounds.max" },
		{ "trigger": "Bounds.Contains(point)", "contents": "Bounds.Contains(${1:Vector3 point});" },
		{ "trigger": "Bounds(center, size)", "contents": "Bounds(${1:Vector3 center}, ${2:Vector3 size});" },
		{ "trigger": "Bounds.IntersectRay(ray)", "contents": "Bounds.IntersectRay(${1:Ray ray});" },
		{ "trigger": "Bounds.IntersectRay(ray, out distance)", "contents": "Bounds.IntersectRay(${1:Ray ray}, ${2:float out distance});" },
		{ "trigger": "Bounds.ToString()", "contents": "Bounds.ToString();" },
		{ "trigger": "Bounds.ToString(format)", "contents": "Bounds.ToString(${1:String format});" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:float amount});" },
		{ "trigger": "Bounds.Expand(amount)", "contents": "Bounds.Expand(${1:Vector3 amount});" },
		{ "trigger": "Bounds.SetMinMax(min, max)", "contents": "Bounds.SetMinMax(${1:Vector3 min}, ${2:Vector3 max});" },
		{ "trigger": "Bounds.Intersects(bounds)", "contents": "Bounds.Intersects(${1:Bounds bounds});" },
		{ "trigger": "Bounds.Encapsulate(point)", "contents": "Bounds.Encapsulate(${1:Vector3 point});" },
		{ "trigger": "Bounds.Encapsulate(bounds)", "contents": "Bounds.Encapsulate(${1:Bounds bounds});" },
		{ "trigger": "Bounds.SqrDistance(point)", "contents": "Bounds.SqrDistance(${1:Vector3 point});" },
		{ "trigger": "Bounds.size", "contents": "Bounds.size" },
		{ "trigger": "iPhone", "contents": "iPhone" },
		{ "trigger": "iPhone.generation", "contents": "iPhone.generation" },
		{ "trigger": "iPhone.SetNoBackupFlag(path)", "contents": "iPhone.SetNoBackupFlag(${1:String path});" },
		{ "trigger": "iPhone.ResetNoBackupFlag(path)", "contents": "iPhone.ResetNoBackupFlag(${1:String path});" },
		{ "trigger": "Shader", "contents": "Shader" },
		{ "trigger": "Shader.SetGlobalBuffer(propertyName, buffer)", "contents": "Shader.SetGlobalBuffer(${1:String propertyName}, ${2:ComputeBuffer buffer});" },
		{ "trigger": "Shader.isSupported", "contents": "Shader.isSupported" },
		{ "trigger": "Shader.SetGlobalTexture(propertyName, tex)", "contents": "Shader.SetGlobalTexture(${1:String propertyName}, ${2:Texture tex});" },
		{ "trigger": "Shader.SetGlobalVector(propertyName, vec)", "contents": "Shader.SetGlobalVector(${1:String propertyName}, ${2:Vector4 vec});" },
		{ "trigger": "Shader.maximumLOD", "contents": "Shader.maximumLOD" },
		{ "trigger": "Shader.SetGlobalMatrix(propertyName, mat)", "contents": "Shader.SetGlobalMatrix(${1:String propertyName}, ${2:Matrix4x4 mat});" },
		{ "trigger": "Shader.WarmupAllShaders()", "contents": "Shader.WarmupAllShaders();" },
		{ "trigger": "Shader.SetGlobalFloat(propertyName, value)", "contents": "Shader.SetGlobalFloat(${1:String propertyName}, ${2:float value});" },
		{ "trigger": "Shader.globalMaximumLOD", "contents": "Shader.globalMaximumLOD" },
		{ "trigger": "Shader.PropertyToID(name)", "contents": "Shader.PropertyToID(${1:String name});" },
		{ "trigger": "Shader.SetGlobalColor(propertyName, color)", "contents": "Shader.SetGlobalColor(${1:String propertyName}, ${2:Color color});" },
		{ "trigger": "Shader.Find(name)", "contents": "Shader.Find(${1:String name});" },
		{ "trigger": "Shader.renderQueue", "contents": "Shader.renderQueue" },
		{ "trigger": "TerrainData", "contents": "TerrainData" },
		{ "trigger": "TerrainData.baseMapResolution", "contents": "TerrainData.baseMapResolution" },
		{ "trigger": "TerrainData.heightmapHeight", "contents": "TerrainData.heightmapHeight" },
		{ "trigger": "TerrainData.GetSteepness(x, y)", "contents": "TerrainData.GetSteepness(${1:float x}, ${2:float y});" },
		{ "trigger": "TerrainData.wavingGrassSpeed", "contents": "TerrainData.wavingGrassSpeed" },
		{ "trigger": "TerrainData.alphamapLayers", "contents": "TerrainData.alphamapLayers" },
		{ "trigger": "TerrainData.treeInstances", "contents": "TerrainData.treeInstances" },
		{ "trigger": "TerrainData.treePrototypes", "contents": "TerrainData.treePrototypes" },
		{ "trigger": "TerrainData.detailHeight", "contents": "TerrainData.detailHeight" },
		{ "trigger": "TerrainData.GetDetailLayer(xBase, yBase, width, height, layer)", "contents": "TerrainData.GetDetailLayer(${1:int xBase}, ${2:int yBase}, ${3:int width}, ${4:int height}, ${5:int layer});" },
		{ "trigger": "TerrainData.heightmapScale", "contents": "TerrainData.heightmapScale" },
		{ "trigger": "TerrainData.size", "contents": "TerrainData.size" },
		{ "trigger": "TerrainData.SetHeights(xBase, yBase, heights)", "contents": "TerrainData.SetHeights(${1:int xBase}, ${2:int yBase}, ${3:float[,] heights});" },
		{ "trigger": "TerrainData.wavingGrassTint", "contents": "TerrainData.wavingGrassTint" },
		{ "trigger": "TerrainData.alphamapHeight", "contents": "TerrainData.alphamapHeight" },
		{ "trigger": "TerrainData.GetSupportedLayers(xBase, yBase, totalWidth, totalHeight)", "contents": "TerrainData.GetSupportedLayers(${1:int xBase}, ${2:int yBase}, ${3:int totalWidth}, ${4:int totalHeight});" },
		{ "trigger": "TerrainData.alphamapWidth", "contents": "TerrainData.alphamapWidth" },
		{ "trigger": "TerrainData.detailResolution", "contents": "TerrainData.detailResolution" },
		{ "trigger": "TerrainData.SetDetailResolution(detailResolution, resolutionPerPatch)", "contents": "TerrainData.SetDetailResolution(${1:int detailResolution}, ${2:int resolutionPerPatch});" },
		{ "trigger": "TerrainData.GetAlphamaps(x, y, width, height)", "contents": "TerrainData.GetAlphamaps(${1:int x}, ${2:int y}, ${3:int width}, ${4:int height});" },
		{ "trigger": "TerrainData.wavingGrassStrength", "contents": "TerrainData.wavingGrassStrength" },
		{ "trigger": "TerrainData.GetInterpolatedHeight(x, y)", "contents": "TerrainData.GetInterpolatedHeight(${1:float x}, ${2:float y});" },
		{ "trigger": "TerrainData.RefreshPrototypes()", "contents": "TerrainData.RefreshPrototypes();" },
		{ "trigger": "TerrainData.GetHeight(x, y)", "contents": "TerrainData.GetHeight(${1:int x}, ${2:int y});" },
		{ "trigger": "TerrainData.alphamapResolution", "contents": "TerrainData.alphamapResolution" },
		{ "trigger": "TerrainData.SetDetailLayer(xBase, yBase, layer, details)", "contents": "TerrainData.SetDetailLayer(${1:int xBase}, ${2:int yBase}, ${3:int layer}, ${4:int[,] details});" },
		{ "trigger": "TerrainData.detailPrototypes", "contents": "TerrainData.detailPrototypes" },
		{ "trigger": "TerrainData.heightmapWidth", "contents": "TerrainData.heightmapWidth" },
		{ "trigger": "TerrainData.splatPrototypes", "contents": "TerrainData.splatPrototypes" },
		{ "trigger": "TerrainData.wavingGrassAmount", "contents": "TerrainData.wavingGrassAmount" },
		{ "trigger": "TerrainData.detailWidth", "contents": "TerrainData.detailWidth" },
		{ "trigger": "TerrainData.SetAlphamaps(x, y, map)", "contents": "TerrainData.SetAlphamaps(${1:int x}, ${2:int y}, ${3:float[,,] map});" },
		{ "trigger": "TerrainData.GetHeights(xBase, yBase, width, height)", "contents": "TerrainData.GetHeights(${1:int xBase}, ${2:int yBase}, ${3:int width}, ${4:int height});" },
		{ "trigger": "TerrainData.heightmapResolution", "contents": "TerrainData.heightmapResolution" },
		{ "trigger": "TerrainData.GetInterpolatedNormal(x, y)", "contents": "TerrainData.GetInterpolatedNormal(${1:float x}, ${2:float y});" },
		{ "trigger": "Touch", "contents": "Touch" },
		{ "trigger": "Touch.deltaTime", "contents": "Touch.deltaTime" },
		{ "trigger": "Touch.tapCount", "contents": "Touch.tapCount" },
		{ "trigger": "Touch.deltaPosition", "contents": "Touch.deltaPosition" },
		{ "trigger": "Touch.phase", "contents": "Touch.phase" },
		{ "trigger": "Touch.position", "contents": "Touch.position" },
		{ "trigger": "Touch.fingerId", "contents": "Touch.fingerId" },
		{ "trigger": "Avatar", "contents": "Avatar" },
		{ "trigger": "Avatar.isValid", "contents": "Avatar.isValid" },
		{ "trigger": "Avatar.isHuman", "contents": "Avatar.isHuman" },
		{ "trigger": "Caching", "contents": "Caching" },
		{ "trigger": "Caching.Authorize(name, domain, size, signature)", "contents": "Caching.Authorize(${1:String name}, ${2:String domain}, ${3:long size}, ${4:String signature});" },
		{ "trigger": "Caching.Authorize(name, domain, size, expiration, signature)", "contents": "Caching.Authorize(${1:String name}, ${2:String domain}, ${3:long size}, ${4:int expiration}, ${5:String signature});" },
		{ "trigger": "Caching.CleanCache()", "contents": "Caching.CleanCache();" },
		{ "trigger": "Caching.enabled", "contents": "Caching.enabled" },
		{ "trigger": "Caching.ResetNoBackupFlag(url, version)", "contents": "Caching.ResetNoBackupFlag(${1:String url}, ${2:int version});" },
		{ "trigger": "Caching.MarkAsUsed(url, version)", "contents": "Caching.MarkAsUsed(${1:String url}, ${2:int version});" },
		{ "trigger": "Caching.spaceOccupied", "contents": "Caching.spaceOccupied" },
		{ "trigger": "Caching.SetNoBackupFlag(url, version)", "contents": "Caching.SetNoBackupFlag(${1:String url}, ${2:int version});" },
		{ "trigger": "Caching.spaceFree", "contents": "Caching.spaceFree" },
		{ "trigger": "Caching.maximumAvailableDiskSpace", "contents": "Caching.maximumAvailableDiskSpace" },
		{ "trigger": "Caching.ready", "contents": "Caching.ready" },
		{ "trigger": "Caching.expirationDelay", "contents": "Caching.expirationDelay" },
		{ "trigger": "Caching.IsVersionCached(url, version)", "contents": "Caching.IsVersionCached(${1:String url}, ${2:int version});" },
		{ "trigger": "Physics", "contents": "Physics" },
		{ "trigger": "Physics.RaycastAll(ray, distance, layerMask)", "contents": "Physics.RaycastAll(${1:Ray ray}, ${2:float distance = Mathf.Infinity}, ${3:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.RaycastAll(origin, direction, distance, layermask)", "contents": "Physics.RaycastAll(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float distance = Mathf.Infinity}, ${4:int layermask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.sleepVelocity", "contents": "Physics.sleepVelocity" },
		{ "trigger": "Physics.Linecast(start, end, layerMask)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.Linecast(start, end, out hitInfo, layerMask)", "contents": "Physics.Linecast(${1:Vector3 start}, ${2:Vector3 end}, ${3:RaycastHit out hitInfo}, ${4:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, distance, layerMask)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float distance = Mathf.Infinity}, ${6:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.CapsuleCast(point1, point2, radius, direction, out hitInfo, distance, layerMask)", "contents": "Physics.CapsuleCast(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:RaycastHit out hitInfo}, ${6:float distance = Mathf.Infinity}, ${7:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.bounceThreshold", "contents": "Physics.bounceThreshold" },
		{ "trigger": "Physics.CheckCapsule(start, end, radius, layermask)", "contents": "Physics.CheckCapsule(${1:Vector3 start}, ${2:Vector3 end}, ${3:float radius}, ${4:int layermask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.sleepAngularVelocity", "contents": "Physics.sleepAngularVelocity" },
		{ "trigger": "Physics.minPenetrationForPenalty", "contents": "Physics.minPenetrationForPenalty" },
		{ "trigger": "Physics.gravity", "contents": "Physics.gravity" },
		{ "trigger": "Physics.Raycast(origin, direction, distance, layerMask)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.Raycast(origin, direction, out hitInfo, distance, layerMask)", "contents": "Physics.Raycast(${1:Vector3 origin}, ${2:Vector3 direction}, ${3:RaycastHit out hitInfo}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.Raycast(ray, distance, layerMask)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:float distance = Mathf.Infinity}, ${3:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.Raycast(ray, out hitInfo, distance, layerMask)", "contents": "Physics.Raycast(${1:Ray ray}, ${2:RaycastHit out hitInfo}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.OverlapSphere(position, radius, layerMask)", "contents": "Physics.OverlapSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = kAllLayers});" },
		{ "trigger": "Physics.GetIgnoreLayerCollision(layer1, layer2)", "contents": "Physics.GetIgnoreLayerCollision(${1:int layer1}, ${2:int layer2});" },
		{ "trigger": "Physics.SphereCastAll(origin, radius, direction, distance, layerMask)", "contents": "Physics.SphereCastAll(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.SphereCastAll(ray, radius, distance, layerMask)", "contents": "Physics.SphereCastAll(${1:Ray ray}, ${2:float radius}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.CheckSphere(position, radius, layerMask)", "contents": "Physics.CheckSphere(${1:Vector3 position}, ${2:float radius}, ${3:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.solverIterationCount", "contents": "Physics.solverIterationCount" },
		{ "trigger": "Physics.IgnoreCollision(collider1, collider2, ignore)", "contents": "Physics.IgnoreCollision(${1:Collider collider1}, ${2:Collider collider2}, ${3:boolean ignore = true});" },
		{ "trigger": "Physics.maxAngularVelocity", "contents": "Physics.maxAngularVelocity" },
		{ "trigger": "Physics.IgnoreLayerCollision(layer1, layer2, ignore)", "contents": "Physics.IgnoreLayerCollision(${1:int layer1}, ${2:int layer2}, ${3:boolean ignore = true});" },
		{ "trigger": "Physics.SphereCast(origin, radius, direction, out hitInfo, distance, layerMask)", "contents": "Physics.SphereCast(${1:Vector3 origin}, ${2:float radius}, ${3:Vector3 direction}, ${4:RaycastHit out hitInfo}, ${5:float distance = Mathf.Infinity}, ${6:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.SphereCast(ray, radius, distance, layerMask)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:float distance = Mathf.Infinity}, ${4:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.SphereCast(ray, radius, out hitInfo, distance, layerMask)", "contents": "Physics.SphereCast(${1:Ray ray}, ${2:float radius}, ${3:RaycastHit out hitInfo}, ${4:float distance = Mathf.Infinity}, ${5:int layerMask = kDefaultRaycastLayers});" },
		{ "trigger": "Physics.CapsuleCastAll(point1, point2, radius, direction, distance, layermask)", "contents": "Physics.CapsuleCastAll(${1:Vector3 point1}, ${2:Vector3 point2}, ${3:float radius}, ${4:Vector3 direction}, ${5:float distance = Mathf.Infinity}, ${6:int layermask = kDefaultRaycastLayers});" },
		{ "trigger": "LocationService", "contents": "LocationService" },
		{ "trigger": "LocationService.status", "contents": "LocationService.status" },
		{ "trigger": "LocationService.lastData", "contents": "LocationService.lastData" },
		{ "trigger": "LocationService.Stop()", "contents": "LocationService.Stop();" },
		{ "trigger": "LocationService.isEnabledByUser", "contents": "LocationService.isEnabledByUser" },
		{ "trigger": "LocationService.Start(desiredAccuracyInMeters, updateDistanceInMeters)", "contents": "LocationService.Start(${1:float desiredAccuracyInMeters = 10f}, ${2:float updateDistanceInMeters = 10f});" },
		{ "trigger": "ILeaderboard", "contents": "ILeaderboard" },
		{ "trigger": "ILeaderboard.maxRange", "contents": "ILeaderboard.maxRange" },
		{ "trigger": "ILeaderboard.SetUserFilter(userIDs)", "contents": "ILeaderboard.SetUserFilter(${1:string[] userIDs});" },
		{ "trigger": "ILeaderboard.loading", "contents": "ILeaderboard.loading" },
		{ "trigger": "ILeaderboard.timeScope", "contents": "ILeaderboard.timeScope" },
		{ "trigger": "ILeaderboard.title", "contents": "ILeaderboard.title" },
		{ "trigger": "ILeaderboard.userScope", "contents": "ILeaderboard.userScope" },
		{ "trigger": "ILeaderboard.localUserScore", "contents": "ILeaderboard.localUserScore" },
		{ "trigger": "ILeaderboard.range", "contents": "ILeaderboard.range" },
		{ "trigger": "ILeaderboard.scores", "contents": "ILeaderboard.scores" },
		{ "trigger": "ILeaderboard.id", "contents": "ILeaderboard.id" },
		{ "trigger": "ILeaderboard.LoadScores(callback)", "contents": "ILeaderboard.LoadScores(${1:Action<bool> callback});" },
		{ "trigger": "RenderSettings", "contents": "RenderSettings" },
		{ "trigger": "RenderSettings.flareStrength", "contents": "RenderSettings.flareStrength" },
		{ "trigger": "RenderSettings.fogMode", "contents": "RenderSettings.fogMode" },
		{ "trigger": "RenderSettings.skybox", "contents": "RenderSettings.skybox" },
		{ "trigger": "RenderSettings.fogStartDistance", "contents": "RenderSettings.fogStartDistance" },
		{ "trigger": "RenderSettings.ambientLight", "contents": "RenderSettings.ambientLight" },
		{ "trigger": "RenderSettings.haloStrength", "contents": "RenderSettings.haloStrength" },
		{ "trigger": "RenderSettings.fog", "contents": "RenderSettings.fog" },
		{ "trigger": "RenderSettings.fogColor", "contents": "RenderSettings.fogColor" },
		{ "trigger": "RenderSettings.fogEndDistance", "contents": "RenderSettings.fogEndDistance" },
		{ "trigger": "RenderSettings.fogDensity", "contents": "RenderSettings.fogDensity" },
		{ "trigger": "NavMesh", "contents": "NavMesh" },
		{ "trigger": "NavMesh.SamplePosition(sourcePosition, out hit, maxDistance, allowedMask)", "contents": "NavMesh.SamplePosition(${1:Vector3 sourcePosition}, ${2:NavMeshHit out hit}, ${3:float maxDistance}, ${4:int allowedMask});" },
		{ "trigger": "NavMesh.SetLayerCost(layer, cost)", "contents": "NavMesh.SetLayerCost(${1:int layer}, ${2:float cost});" },
		{ "trigger": "NavMesh.GetLayerCost(layer)", "contents": "NavMesh.GetLayerCost(${1:int layer});" },
		{ "trigger": "NavMesh.CalculatePath(sourcePosition, targetPosition, passableMask, path)", "contents": "NavMesh.CalculatePath(${1:Vector3 sourcePosition}, ${2:Vector3 targetPosition}, ${3:int passableMask}, ${4:NavMeshPath path});" },
		{ "trigger": "NavMesh.Raycast(sourcePosition, targetPosition, out hit, passableMask)", "contents": "NavMesh.Raycast(${1:Vector3 sourcePosition}, ${2:Vector3 targetPosition}, ${3:NavMeshHit out hit}, ${4:int passableMask});" },
		{ "trigger": "NavMesh.GetNavMeshLayerFromName(layerName)", "contents": "NavMesh.GetNavMeshLayerFromName(${1:String layerName});" },
		{ "trigger": "NavMesh.FindClosestEdge(sourcePosition, out hit, passableMask)", "contents": "NavMesh.FindClosestEdge(${1:Vector3 sourcePosition}, ${2:NavMeshHit out hit}, ${3:int passableMask});" },
		{ "trigger": "AnimationClip", "contents": "AnimationClip" },
		{ "trigger": "AnimationClip.SetCurve(relativePath, type, propertyName, curve)", "contents": "AnimationClip.SetCurve(${1:String relativePath}, ${2:Type type}, ${3:String propertyName}, ${4:AnimationCurve curve});" },
		{ "trigger": "AnimationClip.ClearCurves()", "contents": "AnimationClip.ClearCurves();" },
		{ "trigger": "AnimationClip()", "contents": "AnimationClip();" },
		{ "trigger": "AnimationClip.localBounds", "contents": "AnimationClip.localBounds" },
		{ "trigger": "AnimationClip.frameRate", "contents": "AnimationClip.frameRate" },
		{ "trigger": "AnimationClip.length", "contents": "AnimationClip.length" },
		{ "trigger": "AnimationClip.AddEvent(evt)", "contents": "AnimationClip.AddEvent(${1:AnimationEvent evt});" },
		{ "trigger": "AnimationClip.wrapMode", "contents": "AnimationClip.wrapMode" },
		{ "trigger": "AnimationInfo", "contents": "AnimationInfo" },
		{ "trigger": "AnimationInfo.weight", "contents": "AnimationInfo.weight" },
		{ "trigger": "AnimationInfo.clip", "contents": "AnimationInfo.clip" },
		{ "trigger": "ComputeBuffer", "contents": "ComputeBuffer" },
		{ "trigger": "ComputeBuffer.count", "contents": "ComputeBuffer.count" },
		{ "trigger": "ComputeBuffer(count, stride)", "contents": "ComputeBuffer(${1:int count}, ${2:int stride});" },
		{ "trigger": "ComputeBuffer(count, stride, type)", "contents": "ComputeBuffer(${1:int count}, ${2:int stride}, ${3:ComputeBufferType type});" },
		{ "trigger": "ComputeBuffer.CopyCount(src, dst, dstOffset)", "contents": "ComputeBuffer.CopyCount(${1:ComputeBuffer src}, ${2:ComputeBuffer dst}, ${3:int dstOffset});" },
		{ "trigger": "ComputeBuffer.stride", "contents": "ComputeBuffer.stride" },
		{ "trigger": "ComputeBuffer.Release()", "contents": "ComputeBuffer.Release();" },
		{ "trigger": "ComputeBuffer.GetData(data)", "contents": "ComputeBuffer.GetData(${1:System.Array data});" },
		{ "trigger": "ComputeBuffer.SetData(data)", "contents": "ComputeBuffer.SetData(${1:System.Array data});" },
		{ "trigger": "OcclusionArea", "contents": "OcclusionArea" },
		{ "trigger": "OcclusionArea.center", "contents": "OcclusionArea.center" },
		{ "trigger": "OcclusionArea.size", "contents": "OcclusionArea.size" },
		{ "trigger": "WheelHit", "contents": "WheelHit" },
		{ "trigger": "WheelHit.point", "contents": "WheelHit.point" },
		{ "trigger": "WheelHit.force", "contents": "WheelHit.force" },
		{ "trigger": "WheelHit.normal", "contents": "WheelHit.normal" },
		{ "trigger": "WheelHit.forwardSlip", "contents": "WheelHit.forwardSlip" },
		{ "trigger": "WheelHit.sidewaysSlip", "contents": "WheelHit.sidewaysSlip" },
		{ "trigger": "WheelHit.sidewaysDir", "contents": "WheelHit.sidewaysDir" },
		{ "trigger": "WheelHit.collider", "contents": "WheelHit.collider" },
		{ "trigger": "WheelHit.forwardDir", "contents": "WheelHit.forwardDir" },
		{ "trigger": "SleepTimeout", "contents": "SleepTimeout" },
		{ "trigger": "SleepTimeout.SystemSetting", "contents": "SleepTimeout.SystemSetting" },
		{ "trigger": "SleepTimeout.NeverSleep", "contents": "SleepTimeout.NeverSleep" },
		{ "trigger": "CharacterInfo", "contents": "CharacterInfo" },
		{ "trigger": "CharacterInfo.index", "contents": "CharacterInfo.index" },
		{ "trigger": "CharacterInfo.style", "contents": "CharacterInfo.style" },
		{ "trigger": "CharacterInfo.vert", "contents": "CharacterInfo.vert" },
		{ "trigger": "CharacterInfo.uv", "contents": "CharacterInfo.uv" },
		{ "trigger": "CharacterInfo.flipped", "contents": "CharacterInfo.flipped" },
		{ "trigger": "CharacterInfo.width", "contents": "CharacterInfo.width" },
		{ "trigger": "CharacterInfo.size", "contents": "CharacterInfo.size" },
		{ "trigger": "Array", "contents": "Array" },
		{ "trigger": "Array.Sort()", "contents": "Array.Sort();" },
		{ "trigger": "Array.Join(seperator)", "contents": "Array.Join(${1:String seperator});" },
		{ "trigger": "Array.Reverse()", "contents": "Array.Reverse();" },
		{ "trigger": "Array.Shift()", "contents": "Array.Shift();" },
		{ "trigger": "Array.Clear()", "contents": "Array.Clear();" },
		{ "trigger": "Array.Unshift(newElement, optionalElement)", "contents": "Array.Unshift(${1:object newElement}, ${2:object optionalElement});" },
		{ "trigger": "Array.length", "contents": "Array.length" },
		{ "trigger": "Array.Pop()", "contents": "Array.Pop();" },
		{ "trigger": "Array.Add(value)", "contents": "Array.Add(${1:object value});" },
		{ "trigger": "Array.RemoveAt(index)", "contents": "Array.RemoveAt(${1:int index});" },
		{ "trigger": "Array.Push(value)", "contents": "Array.Push(${1:object value});" },
		{ "trigger": "Array(sizeArr)", "contents": "Array(${1:int sizeArr});" },
		{ "trigger": "Array(arrObj)", "contents": "Array(${1:Object[] arrObj});" },
		{ "trigger": "Array()", "contents": "Array();" },
		{ "trigger": "Array.Concat(array, optionalArray0, optionalArray1)", "contents": "Array.Concat(${1:Array array}, ${2:Array optionalArray0}, ${3:Array optionalArray1});" },
		{ "trigger": "WWWForm", "contents": "WWWForm" },
		{ "trigger": "WWWForm.headers", "contents": "WWWForm.headers" },
		{ "trigger": "WWWForm.AddBinaryData(fieldName, contents, fileName, mimeType)", "contents": "WWWForm.AddBinaryData(${1:String fieldName}, ${2:byte[] contents}, ${3:String fileName = null}, ${4:String mimeType = null});" },
		{ "trigger": "WWWForm.data", "contents": "WWWForm.data" },
		{ "trigger": "WWWForm()", "contents": "WWWForm();" },
		{ "trigger": "WWWForm.AddField(fieldName, value, e)", "contents": "WWWForm.AddField(${1:String fieldName}, ${2:String value}, ${3:Encoding e = System.Text.Encoding.UTF8});" },
		{ "trigger": "WWWForm.AddField(fieldName, i)", "contents": "WWWForm.AddField(${1:String fieldName}, ${2:int i});" },
		{ "trigger": "LocalNotification", "contents": "LocalNotification" },
		{ "trigger": "LocalNotification.repeatInterval", "contents": "LocalNotification.repeatInterval" },
		{ "trigger": "LocalNotification.applicationIconBadgeNumber", "contents": "LocalNotification.applicationIconBadgeNumber" },
		{ "trigger": "LocalNotification.fireDate", "contents": "LocalNotification.fireDate" },
		{ "trigger": "LocalNotification.alertLaunchImage", "contents": "LocalNotification.alertLaunchImage" },
		{ "trigger": "LocalNotification.soundName", "contents": "LocalNotification.soundName" },
		{ "trigger": "LocalNotification.hasAction", "contents": "LocalNotification.hasAction" },
		{ "trigger": "LocalNotification.defaultSoundName", "contents": "LocalNotification.defaultSoundName" },
		{ "trigger": "LocalNotification.repeatCalendar", "contents": "LocalNotification.repeatCalendar" },
		{ "trigger": "LocalNotification.userInfo", "contents": "LocalNotification.userInfo" },
		{ "trigger": "LocalNotification.alertAction", "contents": "LocalNotification.alertAction" },
		{ "trigger": "LocalNotification.timeZone", "contents": "LocalNotification.timeZone" },
		{ "trigger": "LocalNotification.alertBody", "contents": "LocalNotification.alertBody" },
		{ "trigger": "LocalNotification()", "contents": "LocalNotification();" },
		{ "trigger": "MatchTargetWeightMask", "contents": "MatchTargetWeightMask" },
		{ "trigger": "MatchTargetWeightMask(positionXYZWeight, rotationWeight)", "contents": "MatchTargetWeightMask(${1:Vector3 positionXYZWeight}, ${2:float rotationWeight});" },
		{ "trigger": "GUIUtility", "contents": "GUIUtility" },
		{ "trigger": "GUIUtility.ScreenToGUIPoint(screenPoint)", "contents": "GUIUtility.ScreenToGUIPoint(${1:Vector2 screenPoint});" },
		{ "trigger": "GUIUtility.keyboardControl", "contents": "GUIUtility.keyboardControl" },
		{ "trigger": "GUIUtility.GetControlID(focus)", "contents": "GUIUtility.GetControlID(${1:FocusType focus});" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus)", "contents": "GUIUtility.GetControlID(${1:int hint}, ${2:FocusType focus});" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus)", "contents": "GUIUtility.GetControlID(${1:GUIContent contents}, ${2:FocusType focus});" },
		{ "trigger": "GUIUtility.GetControlID(focus, position)", "contents": "GUIUtility.GetControlID(${1:FocusType focus}, ${2:Rect position});" },
		{ "trigger": "GUIUtility.GetControlID(hint, focus, position)", "contents": "GUIUtility.GetControlID(${1:int hint}, ${2:FocusType focus}, ${3:Rect position});" },
		{ "trigger": "GUIUtility.GetControlID(contents, focus, position)", "contents": "GUIUtility.GetControlID(${1:GUIContent contents}, ${2:FocusType focus}, ${3:Rect position});" },
		{ "trigger": "GUIUtility.QueryStateObject(t, controlID)", "contents": "GUIUtility.QueryStateObject(${1:Type t}, ${2:int controlID});" },
		{ "trigger": "GUIUtility.GUIToScreenPoint(guiPoint)", "contents": "GUIUtility.GUIToScreenPoint(${1:Vector2 guiPoint});" },
		{ "trigger": "GUIUtility.hotControl", "contents": "GUIUtility.hotControl" },
		{ "trigger": "GUIUtility.RotateAroundPivot(angle, pivotPoint)", "contents": "GUIUtility.RotateAroundPivot(${1:float angle}, ${2:Vector2 pivotPoint});" },
		{ "trigger": "GUIUtility.GetStateObject(t, controlID)", "contents": "GUIUtility.GetStateObject(${1:Type t}, ${2:int controlID});" },
		{ "trigger": "GUIUtility.ScaleAroundPivot(scale, pivotPoint)", "contents": "GUIUtility.ScaleAroundPivot(${1:Vector2 scale}, ${2:Vector2 pivotPoint});" },

		// Runtime Enumerations
		{ "trigger": "TextAnchor", "contents": "TextAnchor" },
		{ "trigger": "TextAnchor.UpperLeft", "contents": "TextAnchor.UpperLeft" },
		{ "trigger": "TextAnchor.LowerCenter", "contents": "TextAnchor.LowerCenter" },
		{ "trigger": "TextAnchor.UpperRight", "contents": "TextAnchor.UpperRight" },
		{ "trigger": "TextAnchor.MiddleLeft", "contents": "TextAnchor.MiddleLeft" },
		{ "trigger": "TextAnchor.UpperCenter", "contents": "TextAnchor.UpperCenter" },
		{ "trigger": "TextAnchor.LowerRight", "contents": "TextAnchor.LowerRight" },
		{ "trigger": "TextAnchor.MiddleCenter", "contents": "TextAnchor.MiddleCenter" },
		{ "trigger": "TextAnchor.LowerLeft", "contents": "TextAnchor.LowerLeft" },
		{ "trigger": "TextAnchor.MiddleRight", "contents": "TextAnchor.MiddleRight" },
		{ "trigger": "OffMeshLinkType", "contents": "OffMeshLinkType" },
		{ "trigger": "OffMeshLinkType.LinkTypeManual", "contents": "OffMeshLinkType.LinkTypeManual" },
		{ "trigger": "OffMeshLinkType.LinkTypeJumpAcross", "contents": "OffMeshLinkType.LinkTypeJumpAcross" },
		{ "trigger": "OffMeshLinkType.LinkTypeDropDown", "contents": "OffMeshLinkType.LinkTypeDropDown" },
		{ "trigger": "CameraClearFlags", "contents": "CameraClearFlags" },
		{ "trigger": "CameraClearFlags.Skybox", "contents": "CameraClearFlags.Skybox" },
		{ "trigger": "CameraClearFlags.SolidColor", "contents": "CameraClearFlags.SolidColor" },
		{ "trigger": "CameraClearFlags.Depth", "contents": "CameraClearFlags.Depth" },
		{ "trigger": "CameraClearFlags.Nothing", "contents": "CameraClearFlags.Nothing" },
		{ "trigger": "CursorMode", "contents": "CursorMode" },
		{ "trigger": "CursorMode.Auto", "contents": "CursorMode.Auto" },
		{ "trigger": "CursorMode.ForceSoftware", "contents": "CursorMode.ForceSoftware" },
		{ "trigger": "AudioRolloffMode", "contents": "AudioRolloffMode" },
		{ "trigger": "AudioRolloffMode.Linear", "contents": "AudioRolloffMode.Linear" },
		{ "trigger": "AudioRolloffMode.Logarithmic", "contents": "AudioRolloffMode.Logarithmic" },
		{ "trigger": "AudioRolloffMode.Custom", "contents": "AudioRolloffMode.Custom" },
		{ "trigger": "NavMeshPathStatus", "contents": "NavMeshPathStatus" },
		{ "trigger": "NavMeshPathStatus.PathComplete", "contents": "NavMeshPathStatus.PathComplete" },
		{ "trigger": "NavMeshPathStatus.PathInvalid", "contents": "NavMeshPathStatus.PathInvalid" },
		{ "trigger": "NavMeshPathStatus.PathPartial", "contents": "NavMeshPathStatus.PathPartial" },
		{ "trigger": "RPCMode", "contents": "RPCMode" },
		{ "trigger": "RPCMode.Others", "contents": "RPCMode.Others" },
		{ "trigger": "RPCMode.All", "contents": "RPCMode.All" },
		{ "trigger": "RPCMode.AllBuffered", "contents": "RPCMode.AllBuffered" },
		{ "trigger": "RPCMode.OthersBuffered", "contents": "RPCMode.OthersBuffered" },
		{ "trigger": "RPCMode.Server", "contents": "RPCMode.Server" },
		{ "trigger": "NetworkConnectionError", "contents": "NetworkConnectionError" },
		{ "trigger": "NetworkConnectionError.InvalidPassword", "contents": "NetworkConnectionError.InvalidPassword" },
		{ "trigger": "NetworkConnectionError.IncorrectParameters", "contents": "NetworkConnectionError.IncorrectParameters" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToAnotherServer", "contents": "NetworkConnectionError.AlreadyConnectedToAnotherServer" },
		{ "trigger": "NetworkConnectionError.ConnectionFailed", "contents": "NetworkConnectionError.ConnectionFailed" },
		{ "trigger": "NetworkConnectionError.AlreadyConnectedToServer", "contents": "NetworkConnectionError.AlreadyConnectedToServer" },
		{ "trigger": "NetworkConnectionError.NATPunchthroughFailed", "contents": "NetworkConnectionError.NATPunchthroughFailed" },
		{ "trigger": "NetworkConnectionError.TooManyConnectedPlayers", "contents": "NetworkConnectionError.TooManyConnectedPlayers" },
		{ "trigger": "NetworkConnectionError.NoError", "contents": "NetworkConnectionError.NoError" },
		{ "trigger": "NetworkConnectionError.NATTargetConnectionLost", "contents": "NetworkConnectionError.NATTargetConnectionLost" },
		{ "trigger": "NetworkConnectionError.ConnectionBanned", "contents": "NetworkConnectionError.ConnectionBanned" },
		{ "trigger": "NetworkConnectionError.NATTargetNotConnected", "contents": "NetworkConnectionError.NATTargetNotConnected" },
		{ "trigger": "NetworkConnectionError.CreateSocketOrThreadFailure", "contents": "NetworkConnectionError.CreateSocketOrThreadFailure" },
		{ "trigger": "NetworkConnectionError.EmptyConnectTarget", "contents": "NetworkConnectionError.EmptyConnectTarget" },
		{ "trigger": "NetworkConnectionError.RSAPublicKeyMismatch", "contents": "NetworkConnectionError.RSAPublicKeyMismatch" },
		{ "trigger": "NetworkConnectionError.InternalDirectConnectFailed", "contents": "NetworkConnectionError.InternalDirectConnectFailed" },
		{ "trigger": "PlayMode", "contents": "PlayMode" },
		{ "trigger": "PlayMode.StopSameLayer", "contents": "PlayMode.StopSameLayer" },
		{ "trigger": "PlayMode.StopAll", "contents": "PlayMode.StopAll" },
		{ "trigger": "DepthTextureMode", "contents": "DepthTextureMode" },
		{ "trigger": "DepthTextureMode.None", "contents": "DepthTextureMode.None" },
		{ "trigger": "DepthTextureMode.Depth", "contents": "DepthTextureMode.Depth" },
		{ "trigger": "DepthTextureMode.DepthNormals", "contents": "DepthTextureMode.DepthNormals" },
		{ "trigger": "AnimatorCullingMode", "contents": "AnimatorCullingMode" },
		{ "trigger": "AnimatorCullingMode.AlwaysAnimate", "contents": "AnimatorCullingMode.AlwaysAnimate" },
		{ "trigger": "AnimatorCullingMode.BasedOnRenderers", "contents": "AnimatorCullingMode.BasedOnRenderers" },
		{ "trigger": "AudioReverbPreset", "contents": "AudioReverbPreset" },
		{ "trigger": "AudioReverbPreset.Concerthall", "contents": "AudioReverbPreset.Concerthall" },
		{ "trigger": "AudioReverbPreset.City", "contents": "AudioReverbPreset.City" },
		{ "trigger": "AudioReverbPreset.Bathroom", "contents": "AudioReverbPreset.Bathroom" },
		{ "trigger": "AudioReverbPreset.Livingroom", "contents": "AudioReverbPreset.Livingroom" },
		{ "trigger": "AudioReverbPreset.Underwater", "contents": "AudioReverbPreset.Underwater" },
		{ "trigger": "AudioReverbPreset.Generic", "contents": "AudioReverbPreset.Generic" },
		{ "trigger": "AudioReverbPreset.Cave", "contents": "AudioReverbPreset.Cave" },
		{ "trigger": "AudioReverbPreset.ParkingLot", "contents": "AudioReverbPreset.ParkingLot" },
		{ "trigger": "AudioReverbPreset.StoneCorridor", "contents": "AudioReverbPreset.StoneCorridor" },
		{ "trigger": "AudioReverbPreset.Psychotic", "contents": "AudioReverbPreset.Psychotic" },
		{ "trigger": "AudioReverbPreset.Forest", "contents": "AudioReverbPreset.Forest" },
		{ "trigger": "AudioReverbPreset.Hallway", "contents": "AudioReverbPreset.Hallway" },
		{ "trigger": "AudioReverbPreset.Quarry", "contents": "AudioReverbPreset.Quarry" },
		{ "trigger": "AudioReverbPreset.Stoneroom", "contents": "AudioReverbPreset.Stoneroom" },
		{ "trigger": "AudioReverbPreset.User", "contents": "AudioReverbPreset.User" },
		{ "trigger": "AudioReverbPreset.Plain", "contents": "AudioReverbPreset.Plain" },
		{ "trigger": "AudioReverbPreset.Arena", "contents": "AudioReverbPreset.Arena" },
		{ "trigger": "AudioReverbPreset.Off", "contents": "AudioReverbPreset.Off" },
		{ "trigger": "AudioReverbPreset.Room", "contents": "AudioReverbPreset.Room" },
		{ "trigger": "AudioReverbPreset.Mountains", "contents": "AudioReverbPreset.Mountains" },
		{ "trigger": "AudioReverbPreset.Drugged", "contents": "AudioReverbPreset.Drugged" },
		{ "trigger": "AudioReverbPreset.PaddedCell", "contents": "AudioReverbPreset.PaddedCell" },
		{ "trigger": "AudioReverbPreset.Auditorium", "contents": "AudioReverbPreset.Auditorium" },
		{ "trigger": "AudioReverbPreset.CarpetedHallway", "contents": "AudioReverbPreset.CarpetedHallway" },
		{ "trigger": "AudioReverbPreset.SewerPipe", "contents": "AudioReverbPreset.SewerPipe" },
		{ "trigger": "AudioReverbPreset.Alley", "contents": "AudioReverbPreset.Alley" },
		{ "trigger": "AudioReverbPreset.Dizzy", "contents": "AudioReverbPreset.Dizzy" },
		{ "trigger": "AudioReverbPreset.Hangar", "contents": "AudioReverbPreset.Hangar" },
		{ "trigger": "RotationDriveMode", "contents": "RotationDriveMode" },
		{ "trigger": "RotationDriveMode.XYAndZ", "contents": "RotationDriveMode.XYAndZ" },
		{ "trigger": "RotationDriveMode.Slerp", "contents": "RotationDriveMode.Slerp" },
		{ "trigger": "TouchScreenKeyboardType", "contents": "TouchScreenKeyboardType" },
		{ "trigger": "TouchScreenKeyboardType.PhonePad", "contents": "TouchScreenKeyboardType.PhonePad" },
		{ "trigger": "TouchScreenKeyboardType.ASCIICapable", "contents": "TouchScreenKeyboardType.ASCIICapable" },
		{ "trigger": "TouchScreenKeyboardType.Default", "contents": "TouchScreenKeyboardType.Default" },
		{ "trigger": "TouchScreenKeyboardType.NumbersAndPunctuation", "contents": "TouchScreenKeyboardType.NumbersAndPunctuation" },
		{ "trigger": "TouchScreenKeyboardType.URL", "contents": "TouchScreenKeyboardType.URL" },
		{ "trigger": "TouchScreenKeyboardType.EmailAddress", "contents": "TouchScreenKeyboardType.EmailAddress" },
		{ "trigger": "TouchScreenKeyboardType.NumberPad", "contents": "TouchScreenKeyboardType.NumberPad" },
		{ "trigger": "TouchScreenKeyboardType.NamePhonePad", "contents": "TouchScreenKeyboardType.NamePhonePad" },
		{ "trigger": "iOSActivityIndicatorStyle", "contents": "iOSActivityIndicatorStyle" },
		{ "trigger": "iOSActivityIndicatorStyle.Gray", "contents": "iOSActivityIndicatorStyle.Gray" },
		{ "trigger": "iOSActivityIndicatorStyle.DontShow", "contents": "iOSActivityIndicatorStyle.DontShow" },
		{ "trigger": "iOSActivityIndicatorStyle.White", "contents": "iOSActivityIndicatorStyle.White" },
		{ "trigger": "iOSActivityIndicatorStyle.WhiteLarge", "contents": "iOSActivityIndicatorStyle.WhiteLarge" },
		{ "trigger": "ScaleMode", "contents": "ScaleMode" },
		{ "trigger": "ScaleMode.ScaleToFit", "contents": "ScaleMode.ScaleToFit" },
		{ "trigger": "ScaleMode.StretchToFill", "contents": "ScaleMode.StretchToFill" },
		{ "trigger": "ScaleMode.ScaleAndCrop", "contents": "ScaleMode.ScaleAndCrop" },
		{ "trigger": "MasterServerEvent", "contents": "MasterServerEvent" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameName", "contents": "MasterServerEvent.RegistrationFailedGameName" },
		{ "trigger": "MasterServerEvent.HostListReceived", "contents": "MasterServerEvent.HostListReceived" },
		{ "trigger": "MasterServerEvent.RegistrationFailedGameType", "contents": "MasterServerEvent.RegistrationFailedGameType" },
		{ "trigger": "MasterServerEvent.RegistrationFailedNoServer", "contents": "MasterServerEvent.RegistrationFailedNoServer" },
		{ "trigger": "MasterServerEvent.RegistrationSucceeded", "contents": "MasterServerEvent.RegistrationSucceeded" },
		{ "trigger": "UserAuthorization", "contents": "UserAuthorization" },
		{ "trigger": "UserAuthorization.WebCam", "contents": "UserAuthorization.WebCam" },
		{ "trigger": "UserAuthorization.Microphone", "contents": "UserAuthorization.Microphone" },
		{ "trigger": "LightShadows", "contents": "LightShadows" },
		{ "trigger": "LightShadows.None", "contents": "LightShadows.None" },
		{ "trigger": "LightShadows.Hard", "contents": "LightShadows.Hard" },
		{ "trigger": "LightShadows.Soft", "contents": "LightShadows.Soft" },
		{ "trigger": "RemoteNotificationType", "contents": "RemoteNotificationType" },
		{ "trigger": "RemoteNotificationType.Sound", "contents": "RemoteNotificationType.Sound" },
		{ "trigger": "RemoteNotificationType.None", "contents": "RemoteNotificationType.None" },
		{ "trigger": "RemoteNotificationType.Badge", "contents": "RemoteNotificationType.Badge" },
		{ "trigger": "RemoteNotificationType.Alert", "contents": "RemoteNotificationType.Alert" },
		{ "trigger": "PrimitiveType", "contents": "PrimitiveType" },
		{ "trigger": "PrimitiveType.Sphere", "contents": "PrimitiveType.Sphere" },
		{ "trigger": "PrimitiveType.Capsule", "contents": "PrimitiveType.Capsule" },
		{ "trigger": "PrimitiveType.Cube", "contents": "PrimitiveType.Cube" },
		{ "trigger": "PrimitiveType.Cylinder", "contents": "PrimitiveType.Cylinder" },
		{ "trigger": "PrimitiveType.Plane", "contents": "PrimitiveType.Plane" },
		{ "trigger": "MeshTopology", "contents": "MeshTopology" },
		{ "trigger": "MeshTopology.Quads", "contents": "MeshTopology.Quads" },
		{ "trigger": "MeshTopology.Points", "contents": "MeshTopology.Points" },
		{ "trigger": "MeshTopology.Lines", "contents": "MeshTopology.Lines" },
		{ "trigger": "MeshTopology.LineStrip", "contents": "MeshTopology.LineStrip" },
		{ "trigger": "MeshTopology.Triangles", "contents": "MeshTopology.Triangles" },
		{ "trigger": "RuntimePlatform", "contents": "RuntimePlatform" },
		{ "trigger": "RuntimePlatform.WiiPlayer", "contents": "RuntimePlatform.WiiPlayer" },
		{ "trigger": "RuntimePlatform.OSXEditor", "contents": "RuntimePlatform.OSXEditor" },
		{ "trigger": "RuntimePlatform.WindowsPlayer", "contents": "RuntimePlatform.WindowsPlayer" },
		{ "trigger": "RuntimePlatform.OSXPlayer", "contents": "RuntimePlatform.OSXPlayer" },
		{ "trigger": "RuntimePlatform.XBOX360", "contents": "RuntimePlatform.XBOX360" },
		{ "trigger": "RuntimePlatform.WindowsEditor", "contents": "RuntimePlatform.WindowsEditor" },
		{ "trigger": "RuntimePlatform.NaCl", "contents": "RuntimePlatform.NaCl" },
		{ "trigger": "RuntimePlatform.IPhonePlayer", "contents": "RuntimePlatform.IPhonePlayer" },
		{ "trigger": "RuntimePlatform.OSXDashboardPlayer", "contents": "RuntimePlatform.OSXDashboardPlayer" },
		{ "trigger": "RuntimePlatform.PS3", "contents": "RuntimePlatform.PS3" },
		{ "trigger": "RuntimePlatform.Android", "contents": "RuntimePlatform.Android" },
		{ "trigger": "RuntimePlatform.OSXWebPlayer", "contents": "RuntimePlatform.OSXWebPlayer" },
		{ "trigger": "RuntimePlatform.WindowsWebPlayer", "contents": "RuntimePlatform.WindowsWebPlayer" },
		{ "trigger": "RuntimePlatform.FlashPlayer", "contents": "RuntimePlatform.FlashPlayer" },
		{ "trigger": "ADPosition", "contents": "ADPosition" },
		{ "trigger": "ADPosition.Top", "contents": "ADPosition.Top" },
		{ "trigger": "ADPosition.Manual", "contents": "ADPosition.Manual" },
		{ "trigger": "ADPosition.Bottom", "contents": "ADPosition.Bottom" },
		{ "trigger": "RenderingPath", "contents": "RenderingPath" },
		{ "trigger": "RenderingPath.VertexLit", "contents": "RenderingPath.VertexLit" },
		{ "trigger": "RenderingPath.Forward", "contents": "RenderingPath.Forward" },
		{ "trigger": "RenderingPath.UsePlayerSettings", "contents": "RenderingPath.UsePlayerSettings" },
		{ "trigger": "RenderingPath.DeferredLighting", "contents": "RenderingPath.DeferredLighting" },
		{ "trigger": "ParticleSystemRenderMode", "contents": "ParticleSystemRenderMode" },
		{ "trigger": "ParticleSystemRenderMode.Billboard", "contents": "ParticleSystemRenderMode.Billboard" },
		{ "trigger": "ParticleSystemRenderMode.Stretch", "contents": "ParticleSystemRenderMode.Stretch" },
		{ "trigger": "ParticleSystemRenderMode.HorizontalBillboard", "contents": "ParticleSystemRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleSystemRenderMode.Mesh", "contents": "ParticleSystemRenderMode.Mesh" },
		{ "trigger": "ParticleSystemRenderMode.VerticalBillboard", "contents": "ParticleSystemRenderMode.VerticalBillboard" },
		{ "trigger": "ConfigurableJointMotion", "contents": "ConfigurableJointMotion" },
		{ "trigger": "ConfigurableJointMotion.Limited", "contents": "ConfigurableJointMotion.Limited" },
		{ "trigger": "ConfigurableJointMotion.Locked", "contents": "ConfigurableJointMotion.Locked" },
		{ "trigger": "ConfigurableJointMotion.Free", "contents": "ConfigurableJointMotion.Free" },
		{ "trigger": "LocationServiceStatus", "contents": "LocationServiceStatus" },
		{ "trigger": "LocationServiceStatus.Failed", "contents": "LocationServiceStatus.Failed" },
		{ "trigger": "LocationServiceStatus.Running", "contents": "LocationServiceStatus.Running" },
		{ "trigger": "LocationServiceStatus.Stopped", "contents": "LocationServiceStatus.Stopped" },
		{ "trigger": "LocationServiceStatus.Initializing", "contents": "LocationServiceStatus.Initializing" },
		{ "trigger": "ForceMode", "contents": "ForceMode" },
		{ "trigger": "ForceMode.Acceleration", "contents": "ForceMode.Acceleration" },
		{ "trigger": "ForceMode.VelocityChange", "contents": "ForceMode.VelocityChange" },
		{ "trigger": "ForceMode.Force", "contents": "ForceMode.Force" },
		{ "trigger": "ForceMode.Impulse", "contents": "ForceMode.Impulse" },
		{ "trigger": "EventModifiers", "contents": "EventModifiers" },
		{ "trigger": "EventModifiers.Control", "contents": "EventModifiers.Control" },
		{ "trigger": "EventModifiers.FunctionKey", "contents": "EventModifiers.FunctionKey" },
		{ "trigger": "EventModifiers.Shift", "contents": "EventModifiers.Shift" },
		{ "trigger": "EventModifiers.Numeric", "contents": "EventModifiers.Numeric" },
		{ "trigger": "EventModifiers.CapsLock", "contents": "EventModifiers.CapsLock" },
		{ "trigger": "EventModifiers.Command", "contents": "EventModifiers.Command" },
		{ "trigger": "EventModifiers.Alt", "contents": "EventModifiers.Alt" },
		{ "trigger": "TextAlignment", "contents": "TextAlignment" },
		{ "trigger": "TextAlignment.Right", "contents": "TextAlignment.Right" },
		{ "trigger": "TextAlignment.Center", "contents": "TextAlignment.Center" },
		{ "trigger": "TextAlignment.Left", "contents": "TextAlignment.Left" },
		{ "trigger": "ProceduralProcessorUsage", "contents": "ProceduralProcessorUsage" },
		{ "trigger": "ProceduralProcessorUsage.All", "contents": "ProceduralProcessorUsage.All" },
		{ "trigger": "ProceduralProcessorUsage.Half", "contents": "ProceduralProcessorUsage.Half" },
		{ "trigger": "ProceduralProcessorUsage.Unsupported", "contents": "ProceduralProcessorUsage.Unsupported" },
		{ "trigger": "ProceduralProcessorUsage.One", "contents": "ProceduralProcessorUsage.One" },
		{ "trigger": "FFTWindow", "contents": "FFTWindow" },
		{ "trigger": "FFTWindow.Triangle", "contents": "FFTWindow.Triangle" },
		{ "trigger": "FFTWindow.Rectangular", "contents": "FFTWindow.Rectangular" },
		{ "trigger": "FFTWindow.Hanning", "contents": "FFTWindow.Hanning" },
		{ "trigger": "FFTWindow.Hamming", "contents": "FFTWindow.Hamming" },
		{ "trigger": "FFTWindow.Blackman", "contents": "FFTWindow.Blackman" },
		{ "trigger": "FFTWindow.BlackmanHarris", "contents": "FFTWindow.BlackmanHarris" },
		{ "trigger": "AudioVelocityUpdateMode", "contents": "AudioVelocityUpdateMode" },
		{ "trigger": "AudioVelocityUpdateMode.Auto", "contents": "AudioVelocityUpdateMode.Auto" },
		{ "trigger": "AudioVelocityUpdateMode.Fixed", "contents": "AudioVelocityUpdateMode.Fixed" },
		{ "trigger": "AudioVelocityUpdateMode.Dynamic", "contents": "AudioVelocityUpdateMode.Dynamic" },
		{ "trigger": "ColorSpace", "contents": "ColorSpace" },
		{ "trigger": "ColorSpace.Uninitialized", "contents": "ColorSpace.Uninitialized" },
		{ "trigger": "ColorSpace.Linear", "contents": "ColorSpace.Linear" },
		{ "trigger": "ColorSpace.Gamma", "contents": "ColorSpace.Gamma" },
		{ "trigger": "PhysicMaterialCombine", "contents": "PhysicMaterialCombine" },
		{ "trigger": "PhysicMaterialCombine.Multiply", "contents": "PhysicMaterialCombine.Multiply" },
		{ "trigger": "PhysicMaterialCombine.Average", "contents": "PhysicMaterialCombine.Average" },
		{ "trigger": "PhysicMaterialCombine.Minimum", "contents": "PhysicMaterialCombine.Minimum" },
		{ "trigger": "PhysicMaterialCombine.Maximum", "contents": "PhysicMaterialCombine.Maximum" },
		{ "trigger": "DeviceOrientation", "contents": "DeviceOrientation" },
		{ "trigger": "DeviceOrientation.FaceDown", "contents": "DeviceOrientation.FaceDown" },
		{ "trigger": "DeviceOrientation.PortraitUpsideDown", "contents": "DeviceOrientation.PortraitUpsideDown" },
		{ "trigger": "DeviceOrientation.Unknown", "contents": "DeviceOrientation.Unknown" },
		{ "trigger": "DeviceOrientation.FaceUp", "contents": "DeviceOrientation.FaceUp" },
		{ "trigger": "DeviceOrientation.LandscapeLeft", "contents": "DeviceOrientation.LandscapeLeft" },
		{ "trigger": "DeviceOrientation.LandscapeRight", "contents": "DeviceOrientation.LandscapeRight" },
		{ "trigger": "DeviceOrientation.Portrait", "contents": "DeviceOrientation.Portrait" },
		{ "trigger": "AudioType", "contents": "AudioType" },
		{ "trigger": "AudioType.ACC", "contents": "AudioType.ACC" },
		{ "trigger": "AudioType.MPEG", "contents": "AudioType.MPEG" },
		{ "trigger": "AudioType.XM", "contents": "AudioType.XM" },
		{ "trigger": "AudioType.UNKNOWN", "contents": "AudioType.UNKNOWN" },
		{ "trigger": "AudioType.AIFF", "contents": "AudioType.AIFF" },
		{ "trigger": "AudioType.IT", "contents": "AudioType.IT" },
		{ "trigger": "AudioType.XMA", "contents": "AudioType.XMA" },
		{ "trigger": "AudioType.S3M", "contents": "AudioType.S3M" },
		{ "trigger": "AudioType.AUDIOQUEUE", "contents": "AudioType.AUDIOQUEUE" },
		{ "trigger": "AudioType.GCADPCM", "contents": "AudioType.GCADPCM" },
		{ "trigger": "AudioType.WAV", "contents": "AudioType.WAV" },
		{ "trigger": "AudioType.OGGVORBIS", "contents": "AudioType.OGGVORBIS" },
		{ "trigger": "AudioType.MOD", "contents": "AudioType.MOD" },
		{ "trigger": "AnimationCullingType", "contents": "AnimationCullingType" },
		{ "trigger": "AnimationCullingType.BasedOnClipBounds", "contents": "AnimationCullingType.BasedOnClipBounds" },
		{ "trigger": "AnimationCullingType.AlwaysAnimate", "contents": "AnimationCullingType.AlwaysAnimate" },
		{ "trigger": "AnimationCullingType.BasedOnRenderers", "contents": "AnimationCullingType.BasedOnRenderers" },
		{ "trigger": "AnimationCullingType.BasedOnUserBounds", "contents": "AnimationCullingType.BasedOnUserBounds" },
		{ "trigger": "RenderTextureReadWrite", "contents": "RenderTextureReadWrite" },
		{ "trigger": "RenderTextureReadWrite.Default", "contents": "RenderTextureReadWrite.Default" },
		{ "trigger": "RenderTextureReadWrite.sRGB", "contents": "RenderTextureReadWrite.sRGB" },
		{ "trigger": "RenderTextureReadWrite.Linear", "contents": "RenderTextureReadWrite.Linear" },
		{ "trigger": "ComputeBufferType", "contents": "ComputeBufferType" },
		{ "trigger": "ComputeBufferType.Default", "contents": "ComputeBufferType.Default" },
		{ "trigger": "ComputeBufferType.Raw", "contents": "ComputeBufferType.Raw" },
		{ "trigger": "ComputeBufferType.DrawIndirect", "contents": "ComputeBufferType.DrawIndirect" },
		{ "trigger": "ComputeBufferType.Append", "contents": "ComputeBufferType.Append" },
		{ "trigger": "ComputeBufferType.Counter", "contents": "ComputeBufferType.Counter" },
		{ "trigger": "AvatarIKGoal", "contents": "AvatarIKGoal" },
		{ "trigger": "AvatarIKGoal.RightHand", "contents": "AvatarIKGoal.RightHand" },
		{ "trigger": "AvatarIKGoal.RightFoot", "contents": "AvatarIKGoal.RightFoot" },
		{ "trigger": "AvatarIKGoal.LeftHand", "contents": "AvatarIKGoal.LeftHand" },
		{ "trigger": "AvatarIKGoal.LeftFoot", "contents": "AvatarIKGoal.LeftFoot" },
		{ "trigger": "JointDriveMode", "contents": "JointDriveMode" },
		{ "trigger": "JointDriveMode.Position", "contents": "JointDriveMode.Position" },
		{ "trigger": "JointDriveMode.None", "contents": "JointDriveMode.None" },
		{ "trigger": "JointDriveMode.PositionAndVelocity", "contents": "JointDriveMode.PositionAndVelocity" },
		{ "trigger": "JointDriveMode.Velocity", "contents": "JointDriveMode.Velocity" },
		{ "trigger": "ThreadPriority", "contents": "ThreadPriority" },
		{ "trigger": "ThreadPriority.High", "contents": "ThreadPriority.High" },
		{ "trigger": "ThreadPriority.Normal", "contents": "ThreadPriority.Normal" },
		{ "trigger": "ThreadPriority.Low", "contents": "ThreadPriority.Low" },
		{ "trigger": "ThreadPriority.BelowNormal", "contents": "ThreadPriority.BelowNormal" },
		{ "trigger": "HideFlags", "contents": "HideFlags" },
		{ "trigger": "HideFlags.HideInHierarchy", "contents": "HideFlags.HideInHierarchy" },
		{ "trigger": "HideFlags.DontSave", "contents": "HideFlags.DontSave" },
		{ "trigger": "HideFlags.NotEditable", "contents": "HideFlags.NotEditable" },
		{ "trigger": "HideFlags.HideAndDontSave", "contents": "HideFlags.HideAndDontSave" },
		{ "trigger": "HideFlags.HideInInspector", "contents": "HideFlags.HideInInspector" },
		{ "trigger": "NetworkLogLevel", "contents": "NetworkLogLevel" },
		{ "trigger": "NetworkLogLevel.Informational", "contents": "NetworkLogLevel.Informational" },
		{ "trigger": "NetworkLogLevel.Full", "contents": "NetworkLogLevel.Full" },
		{ "trigger": "NetworkLogLevel.Off", "contents": "NetworkLogLevel.Off" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement", "contents": "WiiUtils.LoadingScreen.Placement" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.TopLeft", "contents": "WiiUtils.LoadingScreen.Placement.TopLeft" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.TopCenter", "contents": "WiiUtils.LoadingScreen.Placement.TopCenter" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.BottomLeft", "contents": "WiiUtils.LoadingScreen.Placement.BottomLeft" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.BottomRight", "contents": "WiiUtils.LoadingScreen.Placement.BottomRight" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.MiddleLeft", "contents": "WiiUtils.LoadingScreen.Placement.MiddleLeft" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.TopRight", "contents": "WiiUtils.LoadingScreen.Placement.TopRight" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.MiddleCenter", "contents": "WiiUtils.LoadingScreen.Placement.MiddleCenter" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.MiddlerRight", "contents": "WiiUtils.LoadingScreen.Placement.MiddlerRight" },
		{ "trigger": "WiiUtils.LoadingScreen.Placement.BottomCenter", "contents": "WiiUtils.LoadingScreen.Placement.BottomCenter" },
		{ "trigger": "FogMode", "contents": "FogMode" },
		{ "trigger": "FogMode.ExponentialSquared", "contents": "FogMode.ExponentialSquared" },
		{ "trigger": "FogMode.Linear", "contents": "FogMode.Linear" },
		{ "trigger": "FogMode.Exponential", "contents": "FogMode.Exponential" },
		{ "trigger": "CollisionFlags", "contents": "CollisionFlags" },
		{ "trigger": "CollisionFlags.None", "contents": "CollisionFlags.None" },
		{ "trigger": "CollisionFlags.Below", "contents": "CollisionFlags.Below" },
		{ "trigger": "CollisionFlags.Above", "contents": "CollisionFlags.Above" },
		{ "trigger": "CollisionFlags.Sides", "contents": "CollisionFlags.Sides" },
		{ "trigger": "ImagePosition", "contents": "ImagePosition" },
		{ "trigger": "ImagePosition.ImageLeft", "contents": "ImagePosition.ImageLeft" },
		{ "trigger": "ImagePosition.ImageOnly", "contents": "ImagePosition.ImageOnly" },
		{ "trigger": "ImagePosition.TextOnly", "contents": "ImagePosition.TextOnly" },
		{ "trigger": "ImagePosition.ImageAbove", "contents": "ImagePosition.ImageAbove" },
		{ "trigger": "LightRenderMode", "contents": "LightRenderMode" },
		{ "trigger": "LightRenderMode.Auto", "contents": "LightRenderMode.Auto" },
		{ "trigger": "LightRenderMode.ForceVertex", "contents": "LightRenderMode.ForceVertex" },
		{ "trigger": "LightRenderMode.ForcePixel", "contents": "LightRenderMode.ForcePixel" },
		{ "trigger": "RigidbodyConstraints", "contents": "RigidbodyConstraints" },
		{ "trigger": "RigidbodyConstraints.None", "contents": "RigidbodyConstraints.None" },
		{ "trigger": "RigidbodyConstraints.FreezeAll", "contents": "RigidbodyConstraints.FreezeAll" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationZ", "contents": "RigidbodyConstraints.FreezeRotationZ" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationX", "contents": "RigidbodyConstraints.FreezeRotationX" },
		{ "trigger": "RigidbodyConstraints.FreezeRotationY", "contents": "RigidbodyConstraints.FreezeRotationY" },
		{ "trigger": "RigidbodyConstraints.FreezePosition", "contents": "RigidbodyConstraints.FreezePosition" },
		{ "trigger": "RigidbodyConstraints.FreezeRotation", "contents": "RigidbodyConstraints.FreezeRotation" },
		{ "trigger": "RigidbodyConstraints.FreezePositionZ", "contents": "RigidbodyConstraints.FreezePositionZ" },
		{ "trigger": "RigidbodyConstraints.FreezePositionY", "contents": "RigidbodyConstraints.FreezePositionY" },
		{ "trigger": "RigidbodyConstraints.FreezePositionX", "contents": "RigidbodyConstraints.FreezePositionX" },
		{ "trigger": "TransparencySortMode", "contents": "TransparencySortMode" },
		{ "trigger": "TransparencySortMode.Default", "contents": "TransparencySortMode.Default" },
		{ "trigger": "TransparencySortMode.Perspective", "contents": "TransparencySortMode.Perspective" },
		{ "trigger": "TransparencySortMode.Orthographic", "contents": "TransparencySortMode.Orthographic" },
		{ "trigger": "FullScreenMovieControlMode", "contents": "FullScreenMovieControlMode" },
		{ "trigger": "FullScreenMovieControlMode.Hidden", "contents": "FullScreenMovieControlMode.Hidden" },
		{ "trigger": "FullScreenMovieControlMode.Full", "contents": "FullScreenMovieControlMode.Full" },
		{ "trigger": "FullScreenMovieControlMode.CancelOnInput", "contents": "FullScreenMovieControlMode.CancelOnInput" },
		{ "trigger": "FullScreenMovieControlMode.Minimal", "contents": "FullScreenMovieControlMode.Minimal" },
		{ "trigger": "BlendWeights", "contents": "BlendWeights" },
		{ "trigger": "BlendWeights.FourBones", "contents": "BlendWeights.FourBones" },
		{ "trigger": "BlendWeights.OneBone", "contents": "BlendWeights.OneBone" },
		{ "trigger": "BlendWeights.TwoBones", "contents": "BlendWeights.TwoBones" },
		{ "trigger": "FullScreenMovieScalingMode", "contents": "FullScreenMovieScalingMode" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFill", "contents": "FullScreenMovieScalingMode.AspectFill" },
		{ "trigger": "FullScreenMovieScalingMode.None", "contents": "FullScreenMovieScalingMode.None" },
		{ "trigger": "FullScreenMovieScalingMode.AspectFit", "contents": "FullScreenMovieScalingMode.AspectFit" },
		{ "trigger": "FullScreenMovieScalingMode.Fill", "contents": "FullScreenMovieScalingMode.Fill" },
		{ "trigger": "QueueMode", "contents": "QueueMode" },
		{ "trigger": "QueueMode.PlayNow", "contents": "QueueMode.PlayNow" },
		{ "trigger": "QueueMode.CompleteOthers", "contents": "QueueMode.CompleteOthers" },
		{ "trigger": "FontStyle", "contents": "FontStyle" },
		{ "trigger": "FontStyle.BoldAndItalic", "contents": "FontStyle.BoldAndItalic" },
		{ "trigger": "FontStyle.Bold", "contents": "FontStyle.Bold" },
		{ "trigger": "FontStyle.Italic", "contents": "FontStyle.Italic" },
		{ "trigger": "FontStyle.Normal", "contents": "FontStyle.Normal" },
		{ "trigger": "AudioSpeakerMode", "contents": "AudioSpeakerMode" },
		{ "trigger": "AudioSpeakerMode.Stereo", "contents": "AudioSpeakerMode.Stereo" },
		{ "trigger": "AudioSpeakerMode.Mode7point1", "contents": "AudioSpeakerMode.Mode7point1" },
		{ "trigger": "AudioSpeakerMode.Mono", "contents": "AudioSpeakerMode.Mono" },
		{ "trigger": "AudioSpeakerMode.Prologic", "contents": "AudioSpeakerMode.Prologic" },
		{ "trigger": "AudioSpeakerMode.Mode5point1", "contents": "AudioSpeakerMode.Mode5point1" },
		{ "trigger": "AudioSpeakerMode.Raw", "contents": "AudioSpeakerMode.Raw" },
		{ "trigger": "AudioSpeakerMode.Surround", "contents": "AudioSpeakerMode.Surround" },
		{ "trigger": "AudioSpeakerMode.Quad", "contents": "AudioSpeakerMode.Quad" },
		{ "trigger": "CalendarIdentifier", "contents": "CalendarIdentifier" },
		{ "trigger": "CalendarIdentifier.BuddhistCalendar", "contents": "CalendarIdentifier.BuddhistCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCalendar", "contents": "CalendarIdentifier.IslamicCalendar" },
		{ "trigger": "CalendarIdentifier.ChineseCalendar", "contents": "CalendarIdentifier.ChineseCalendar" },
		{ "trigger": "CalendarIdentifier.HebrewCalendar", "contents": "CalendarIdentifier.HebrewCalendar" },
		{ "trigger": "CalendarIdentifier.IndianCalendar", "contents": "CalendarIdentifier.IndianCalendar" },
		{ "trigger": "CalendarIdentifier.IslamicCivilCalendar", "contents": "CalendarIdentifier.IslamicCivilCalendar" },
		{ "trigger": "CalendarIdentifier.JapaneseCalendar", "contents": "CalendarIdentifier.JapaneseCalendar" },
		{ "trigger": "CalendarIdentifier.ISO8601Calendar", "contents": "CalendarIdentifier.ISO8601Calendar" },
		{ "trigger": "CalendarIdentifier.PersianCalendar", "contents": "CalendarIdentifier.PersianCalendar" },
		{ "trigger": "CalendarIdentifier.GregorianCalendar", "contents": "CalendarIdentifier.GregorianCalendar" },
		{ "trigger": "CalendarIdentifier.RepublicOfChinaCalendar", "contents": "CalendarIdentifier.RepublicOfChinaCalendar" },
		{ "trigger": "AvatarTarget", "contents": "AvatarTarget" },
		{ "trigger": "AvatarTarget.Body", "contents": "AvatarTarget.Body" },
		{ "trigger": "AvatarTarget.RightHand", "contents": "AvatarTarget.RightHand" },
		{ "trigger": "AvatarTarget.Root", "contents": "AvatarTarget.Root" },
		{ "trigger": "AvatarTarget.LeftFoot", "contents": "AvatarTarget.LeftFoot" },
		{ "trigger": "AvatarTarget.LeftHand", "contents": "AvatarTarget.LeftHand" },
		{ "trigger": "AvatarTarget.RightFoot", "contents": "AvatarTarget.RightFoot" },
		{ "trigger": "LightType", "contents": "LightType" },
		{ "trigger": "LightType.Area", "contents": "LightType.Area" },
		{ "trigger": "LightType.Point", "contents": "LightType.Point" },
		{ "trigger": "LightType.Spot", "contents": "LightType.Spot" },
		{ "trigger": "LightType.Directional", "contents": "LightType.Directional" },
		{ "trigger": "ProceduralCacheSize", "contents": "ProceduralCacheSize" },
		{ "trigger": "ProceduralCacheSize.Heavy", "contents": "ProceduralCacheSize.Heavy" },
		{ "trigger": "ProceduralCacheSize.NoLimit", "contents": "ProceduralCacheSize.NoLimit" },
		{ "trigger": "ProceduralCacheSize.None", "contents": "ProceduralCacheSize.None" },
		{ "trigger": "ProceduralCacheSize.Medium", "contents": "ProceduralCacheSize.Medium" },
		{ "trigger": "ProceduralCacheSize.Tiny", "contents": "ProceduralCacheSize.Tiny" },
		{ "trigger": "AndroidActivityIndicatorStyle", "contents": "AndroidActivityIndicatorStyle" },
		{ "trigger": "AndroidActivityIndicatorStyle.Large", "contents": "AndroidActivityIndicatorStyle.Large" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedLarge", "contents": "AndroidActivityIndicatorStyle.InversedLarge" },
		{ "trigger": "AndroidActivityIndicatorStyle.DontShow", "contents": "AndroidActivityIndicatorStyle.DontShow" },
		{ "trigger": "AndroidActivityIndicatorStyle.Small", "contents": "AndroidActivityIndicatorStyle.Small" },
		{ "trigger": "AndroidActivityIndicatorStyle.InversedSmall", "contents": "AndroidActivityIndicatorStyle.InversedSmall" },
		{ "trigger": "AnisotropicFiltering", "contents": "AnisotropicFiltering" },
		{ "trigger": "AnisotropicFiltering.Disable", "contents": "AnisotropicFiltering.Disable" },
		{ "trigger": "AnisotropicFiltering.Enable", "contents": "AnisotropicFiltering.Enable" },
		{ "trigger": "AnisotropicFiltering.ForceEnable", "contents": "AnisotropicFiltering.ForceEnable" },
		{ "trigger": "SendMessageOptions", "contents": "SendMessageOptions" },
		{ "trigger": "SendMessageOptions.RequireReceiver", "contents": "SendMessageOptions.RequireReceiver" },
		{ "trigger": "SendMessageOptions.DontRequireReceiver", "contents": "SendMessageOptions.DontRequireReceiver" },
		{ "trigger": "RenderTextureFormat", "contents": "RenderTextureFormat" },
		{ "trigger": "RenderTextureFormat.ARGBFloat", "contents": "RenderTextureFormat.ARGBFloat" },
		{ "trigger": "RenderTextureFormat.RFloat", "contents": "RenderTextureFormat.RFloat" },
		{ "trigger": "RenderTextureFormat.ARGBInt", "contents": "RenderTextureFormat.ARGBInt" },
		{ "trigger": "RenderTextureFormat.ARGB1555", "contents": "RenderTextureFormat.ARGB1555" },
		{ "trigger": "RenderTextureFormat.Default", "contents": "RenderTextureFormat.Default" },
		{ "trigger": "RenderTextureFormat.RInt", "contents": "RenderTextureFormat.RInt" },
		{ "trigger": "RenderTextureFormat.R8", "contents": "RenderTextureFormat.R8" },
		{ "trigger": "RenderTextureFormat.ARGB32", "contents": "RenderTextureFormat.ARGB32" },
		{ "trigger": "RenderTextureFormat.RGInt", "contents": "RenderTextureFormat.RGInt" },
		{ "trigger": "RenderTextureFormat.Depth", "contents": "RenderTextureFormat.Depth" },
		{ "trigger": "RenderTextureFormat.RGHalf", "contents": "RenderTextureFormat.RGHalf" },
		{ "trigger": "RenderTextureFormat.ARGBHalf", "contents": "RenderTextureFormat.ARGBHalf" },
		{ "trigger": "RenderTextureFormat.ARGB4444", "contents": "RenderTextureFormat.ARGB4444" },
		{ "trigger": "RenderTextureFormat.DefaultHDR", "contents": "RenderTextureFormat.DefaultHDR" },
		{ "trigger": "RenderTextureFormat.RGFloat", "contents": "RenderTextureFormat.RGFloat" },
		{ "trigger": "RenderTextureFormat.RHalf", "contents": "RenderTextureFormat.RHalf" },
		{ "trigger": "RenderTextureFormat.RGB565", "contents": "RenderTextureFormat.RGB565" },
		{ "trigger": "ShadowProjection", "contents": "ShadowProjection" },
		{ "trigger": "ShadowProjection.CloseFit", "contents": "ShadowProjection.CloseFit" },
		{ "trigger": "ShadowProjection.StableFit", "contents": "ShadowProjection.StableFit" },
		{ "trigger": "EventType", "contents": "EventType" },
		{ "trigger": "EventType.ScrollWheel", "contents": "EventType.ScrollWheel" },
		{ "trigger": "EventType.Repaint", "contents": "EventType.Repaint" },
		{ "trigger": "EventType.Used", "contents": "EventType.Used" },
		{ "trigger": "EventType.Layout", "contents": "EventType.Layout" },
		{ "trigger": "EventType.ValidateCommand", "contents": "EventType.ValidateCommand" },
		{ "trigger": "EventType.ExecuteCommand", "contents": "EventType.ExecuteCommand" },
		{ "trigger": "EventType.KeyUp", "contents": "EventType.KeyUp" },
		{ "trigger": "EventType.MouseUp", "contents": "EventType.MouseUp" },
		{ "trigger": "EventType.KeyDown", "contents": "EventType.KeyDown" },
		{ "trigger": "EventType.MouseMove", "contents": "EventType.MouseMove" },
		{ "trigger": "EventType.Ignore", "contents": "EventType.Ignore" },
		{ "trigger": "EventType.DragPerform", "contents": "EventType.DragPerform" },
		{ "trigger": "EventType.DragExited", "contents": "EventType.DragExited" },
		{ "trigger": "EventType.MouseDown", "contents": "EventType.MouseDown" },
		{ "trigger": "EventType.DragUpdated", "contents": "EventType.DragUpdated" },
		{ "trigger": "EventType.MouseDrag", "contents": "EventType.MouseDrag" },
		{ "trigger": "EventType.ContextClick", "contents": "EventType.ContextClick" },
		{ "trigger": "TextClipping", "contents": "TextClipping" },
		{ "trigger": "TextClipping.Overflow", "contents": "TextClipping.Overflow" },
		{ "trigger": "TextClipping.Clip", "contents": "TextClipping.Clip" },
		{ "trigger": "LogType", "contents": "LogType" },
		{ "trigger": "LogType.Assert", "contents": "LogType.Assert" },
		{ "trigger": "LogType.Exception", "contents": "LogType.Exception" },
		{ "trigger": "LogType.Warning", "contents": "LogType.Warning" },
		{ "trigger": "LogType.Log", "contents": "LogType.Log" },
		{ "trigger": "LogType.Error", "contents": "LogType.Error" },
		{ "trigger": "JointProjectionMode", "contents": "JointProjectionMode" },
		{ "trigger": "JointProjectionMode.None", "contents": "JointProjectionMode.None" },
		{ "trigger": "JointProjectionMode.PositionOnly", "contents": "JointProjectionMode.PositionOnly" },
		{ "trigger": "JointProjectionMode.PositionAndRotation", "contents": "JointProjectionMode.PositionAndRotation" },
		{ "trigger": "NetworkPeerType", "contents": "NetworkPeerType" },
		{ "trigger": "NetworkPeerType.Client", "contents": "NetworkPeerType.Client" },
		{ "trigger": "NetworkPeerType.Connecting", "contents": "NetworkPeerType.Connecting" },
		{ "trigger": "NetworkPeerType.Disconnected", "contents": "NetworkPeerType.Disconnected" },
		{ "trigger": "NetworkPeerType.Server", "contents": "NetworkPeerType.Server" },
		{ "trigger": "RigidbodyInterpolation", "contents": "RigidbodyInterpolation" },
		{ "trigger": "RigidbodyInterpolation.None", "contents": "RigidbodyInterpolation.None" },
		{ "trigger": "RigidbodyInterpolation.Extrapolate", "contents": "RigidbodyInterpolation.Extrapolate" },
		{ "trigger": "RigidbodyInterpolation.Interpolate", "contents": "RigidbodyInterpolation.Interpolate" },
		{ "trigger": "CollisionDetectionMode", "contents": "CollisionDetectionMode" },
		{ "trigger": "CollisionDetectionMode.Discrete", "contents": "CollisionDetectionMode.Discrete" },
		{ "trigger": "CollisionDetectionMode.Continuous", "contents": "CollisionDetectionMode.Continuous" },
		{ "trigger": "CollisionDetectionMode.ContinuousDynamic", "contents": "CollisionDetectionMode.ContinuousDynamic" },
		{ "trigger": "NetworkStateSynchronization", "contents": "NetworkStateSynchronization" },
		{ "trigger": "NetworkStateSynchronization.ReliableDeltaCompressed", "contents": "NetworkStateSynchronization.ReliableDeltaCompressed" },
		{ "trigger": "NetworkStateSynchronization.Unreliable", "contents": "NetworkStateSynchronization.Unreliable" },
		{ "trigger": "NetworkStateSynchronization.Off", "contents": "NetworkStateSynchronization.Off" },
		{ "trigger": "UserScope", "contents": "UserScope" },
		{ "trigger": "UserScope.FriendsOnly", "contents": "UserScope.FriendsOnly" },
		{ "trigger": "UserScope.Global", "contents": "UserScope.Global" },
		{ "trigger": "DeviceType", "contents": "DeviceType" },
		{ "trigger": "DeviceType.Unknown", "contents": "DeviceType.Unknown" },
		{ "trigger": "DeviceType.Console", "contents": "DeviceType.Console" },
		{ "trigger": "DeviceType.Handheld", "contents": "DeviceType.Handheld" },
		{ "trigger": "DeviceType.Desktop", "contents": "DeviceType.Desktop" },
		{ "trigger": "ProceduralPropertyType", "contents": "ProceduralPropertyType" },
		{ "trigger": "ProceduralPropertyType.Float", "contents": "ProceduralPropertyType.Float" },
		{ "trigger": "ProceduralPropertyType.Vector2", "contents": "ProceduralPropertyType.Vector2" },
		{ "trigger": "ProceduralPropertyType.Vector3", "contents": "ProceduralPropertyType.Vector3" },
		{ "trigger": "ProceduralPropertyType.Vector4", "contents": "ProceduralPropertyType.Vector4" },
		{ "trigger": "ProceduralPropertyType.Texture", "contents": "ProceduralPropertyType.Texture" },
		{ "trigger": "ProceduralPropertyType.Color3", "contents": "ProceduralPropertyType.Color3" },
		{ "trigger": "ProceduralPropertyType.Boolean", "contents": "ProceduralPropertyType.Boolean" },
		{ "trigger": "ProceduralPropertyType.Color4", "contents": "ProceduralPropertyType.Color4" },
		{ "trigger": "ProceduralPropertyType.Enum", "contents": "ProceduralPropertyType.Enum" },
		{ "trigger": "LightmapsMode", "contents": "LightmapsMode" },
		{ "trigger": "LightmapsMode.Single", "contents": "LightmapsMode.Single" },
		{ "trigger": "LightmapsMode.Dual", "contents": "LightmapsMode.Dual" },
		{ "trigger": "LightmapsMode.Directional", "contents": "LightmapsMode.Directional" },
		{ "trigger": "TerrainRenderFlags", "contents": "TerrainRenderFlags" },
		{ "trigger": "TerrainRenderFlags.heightmap", "contents": "TerrainRenderFlags.heightmap" },
		{ "trigger": "TerrainRenderFlags.details", "contents": "TerrainRenderFlags.details" },
		{ "trigger": "TerrainRenderFlags.trees", "contents": "TerrainRenderFlags.trees" },
		{ "trigger": "HumanBodyBones", "contents": "HumanBodyBones" },
		{ "trigger": "HumanBodyBones.LeftLowerLeg", "contents": "HumanBodyBones.LeftLowerLeg" },
		{ "trigger": "HumanBodyBones.Jaw", "contents": "HumanBodyBones.Jaw" },
		{ "trigger": "HumanBodyBones.Chest", "contents": "HumanBodyBones.Chest" },
		{ "trigger": "HumanBodyBones.LeftHand", "contents": "HumanBodyBones.LeftHand" },
		{ "trigger": "HumanBodyBones.Head", "contents": "HumanBodyBones.Head" },
		{ "trigger": "HumanBodyBones.RightHand", "contents": "HumanBodyBones.RightHand" },
		{ "trigger": "HumanBodyBones.RightLowerArm", "contents": "HumanBodyBones.RightLowerArm" },
		{ "trigger": "HumanBodyBones.RightLowerLeg", "contents": "HumanBodyBones.RightLowerLeg" },
		{ "trigger": "HumanBodyBones.LastBone", "contents": "HumanBodyBones.LastBone" },
		{ "trigger": "HumanBodyBones.LeftToes", "contents": "HumanBodyBones.LeftToes" },
		{ "trigger": "HumanBodyBones.Neck", "contents": "HumanBodyBones.Neck" },
		{ "trigger": "HumanBodyBones.Spine", "contents": "HumanBodyBones.Spine" },
		{ "trigger": "HumanBodyBones.LeftUpperLeg", "contents": "HumanBodyBones.LeftUpperLeg" },
		{ "trigger": "HumanBodyBones.LeftFoot", "contents": "HumanBodyBones.LeftFoot" },
		{ "trigger": "HumanBodyBones.LeftUpperArm", "contents": "HumanBodyBones.LeftUpperArm" },
		{ "trigger": "HumanBodyBones.LeftShoulder", "contents": "HumanBodyBones.LeftShoulder" },
		{ "trigger": "HumanBodyBones.RightUpperArm", "contents": "HumanBodyBones.RightUpperArm" },
		{ "trigger": "HumanBodyBones.Hips", "contents": "HumanBodyBones.Hips" },
		{ "trigger": "HumanBodyBones.RightFoot", "contents": "HumanBodyBones.RightFoot" },
		{ "trigger": "HumanBodyBones.RightUpperLeg", "contents": "HumanBodyBones.RightUpperLeg" },
		{ "trigger": "HumanBodyBones.RightToes", "contents": "HumanBodyBones.RightToes" },
		{ "trigger": "HumanBodyBones.LeftEye", "contents": "HumanBodyBones.LeftEye" },
		{ "trigger": "HumanBodyBones.RightEye", "contents": "HumanBodyBones.RightEye" },
		{ "trigger": "HumanBodyBones.LeftLowerArm", "contents": "HumanBodyBones.LeftLowerArm" },
		{ "trigger": "HumanBodyBones.RightShoulder", "contents": "HumanBodyBones.RightShoulder" },
		{ "trigger": "TextureCompressionQuality", "contents": "TextureCompressionQuality" },
		{ "trigger": "TextureCompressionQuality.Best", "contents": "TextureCompressionQuality.Best" },
		{ "trigger": "TextureCompressionQuality.Fast", "contents": "TextureCompressionQuality.Fast" },
		{ "trigger": "TextureCompressionQuality.Normal", "contents": "TextureCompressionQuality.Normal" },
		{ "trigger": "ScreenOrientation", "contents": "ScreenOrientation" },
		{ "trigger": "ScreenOrientation.Portrait", "contents": "ScreenOrientation.Portrait" },
		{ "trigger": "ScreenOrientation.AutoRotation", "contents": "ScreenOrientation.AutoRotation" },
		{ "trigger": "ScreenOrientation.LandscapeLeft", "contents": "ScreenOrientation.LandscapeLeft" },
		{ "trigger": "ScreenOrientation.LandscapeRight", "contents": "ScreenOrientation.LandscapeRight" },
		{ "trigger": "ScreenOrientation.PortraitUpsideDown", "contents": "ScreenOrientation.PortraitUpsideDown" },
		{ "trigger": "NetworkDisconnection", "contents": "NetworkDisconnection" },
		{ "trigger": "NetworkDisconnection.LostConnection", "contents": "NetworkDisconnection.LostConnection" },
		{ "trigger": "NetworkDisconnection.Disconnected", "contents": "NetworkDisconnection.Disconnected" },
		{ "trigger": "IMECompositionMode", "contents": "IMECompositionMode" },
		{ "trigger": "IMECompositionMode.Auto", "contents": "IMECompositionMode.Auto" },
		{ "trigger": "IMECompositionMode.Off", "contents": "IMECompositionMode.Off" },
		{ "trigger": "IMECompositionMode.On", "contents": "IMECompositionMode.On" },
		{ "trigger": "ObstacleAvoidanceType", "contents": "ObstacleAvoidanceType" },
		{ "trigger": "ObstacleAvoidanceType.MedQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.MedQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.GoodQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.HighQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.HighQualityObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.NoObstacleAvoidance", "contents": "ObstacleAvoidanceType.NoObstacleAvoidance" },
		{ "trigger": "ObstacleAvoidanceType.LowQualityObstacleAvoidance", "contents": "ObstacleAvoidanceType.LowQualityObstacleAvoidance" },
		{ "trigger": "ConnectionTesterStatus", "contents": "ConnectionTesterStatus" },
		{ "trigger": "ConnectionTesterStatus.Undetermined", "contents": "ConnectionTesterStatus.Undetermined" },
		{ "trigger": "ConnectionTesterStatus.PublicIPNoServerStarted", "contents": "ConnectionTesterStatus.PublicIPNoServerStarted" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughSymmetric" },
		{ "trigger": "ConnectionTesterStatus.PublicIPIsConnectable", "contents": "ConnectionTesterStatus.PublicIPIsConnectable" },
		{ "trigger": "ConnectionTesterStatus.PublicIPPortBlocked", "contents": "ConnectionTesterStatus.PublicIPPortBlocked" },
		{ "trigger": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted", "contents": "ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone", "contents": "ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone" },
		{ "trigger": "ConnectionTesterStatus.Error", "contents": "ConnectionTesterStatus.Error" },
		{ "trigger": "ConnectionTesterStatus.NATpunchthroughFullCone", "contents": "ConnectionTesterStatus.NATpunchthroughFullCone" },
		{ "trigger": "KeyCode", "contents": "KeyCode" },
		{ "trigger": "KeyCode.Alpha2", "contents": "KeyCode.Alpha2" },
		{ "trigger": "KeyCode.Alpha3", "contents": "KeyCode.Alpha3" },
		{ "trigger": "KeyCode.Alpha0", "contents": "KeyCode.Alpha0" },
		{ "trigger": "KeyCode.Alpha1", "contents": "KeyCode.Alpha1" },
		{ "trigger": "KeyCode.Alpha6", "contents": "KeyCode.Alpha6" },
		{ "trigger": "KeyCode.Alpha7", "contents": "KeyCode.Alpha7" },
		{ "trigger": "KeyCode.Alpha4", "contents": "KeyCode.Alpha4" },
		{ "trigger": "KeyCode.Alpha5", "contents": "KeyCode.Alpha5" },
		{ "trigger": "KeyCode.RightApple", "contents": "KeyCode.RightApple" },
		{ "trigger": "KeyCode.Alpha8", "contents": "KeyCode.Alpha8" },
		{ "trigger": "KeyCode.Alpha9", "contents": "KeyCode.Alpha9" },
		{ "trigger": "KeyCode.RightBracket", "contents": "KeyCode.RightBracket" },
		{ "trigger": "KeyCode.X", "contents": "KeyCode.X" },
		{ "trigger": "KeyCode.LeftCommand", "contents": "KeyCode.LeftCommand" },
		{ "trigger": "KeyCode.Hash", "contents": "KeyCode.Hash" },
		{ "trigger": "KeyCode.Greater", "contents": "KeyCode.Greater" },
		{ "trigger": "KeyCode.Caret", "contents": "KeyCode.Caret" },
		{ "trigger": "KeyCode.PageUp", "contents": "KeyCode.PageUp" },
		{ "trigger": "KeyCode.RightCommand", "contents": "KeyCode.RightCommand" },
		{ "trigger": "KeyCode.Minus", "contents": "KeyCode.Minus" },
		{ "trigger": "KeyCode.Joystick1Button1", "contents": "KeyCode.Joystick1Button1" },
		{ "trigger": "KeyCode.Joystick1Button0", "contents": "KeyCode.Joystick1Button0" },
		{ "trigger": "KeyCode.Joystick1Button3", "contents": "KeyCode.Joystick1Button3" },
		{ "trigger": "KeyCode.AltGr", "contents": "KeyCode.AltGr" },
		{ "trigger": "KeyCode.Joystick1Button5", "contents": "KeyCode.Joystick1Button5" },
		{ "trigger": "KeyCode.LeftControl", "contents": "KeyCode.LeftControl" },
		{ "trigger": "KeyCode.Joystick1Button7", "contents": "KeyCode.Joystick1Button7" },
		{ "trigger": "KeyCode.Joystick1Button6", "contents": "KeyCode.Joystick1Button6" },
		{ "trigger": "KeyCode.Joystick1Button9", "contents": "KeyCode.Joystick1Button9" },
		{ "trigger": "KeyCode.Joystick1Button8", "contents": "KeyCode.Joystick1Button8" },
		{ "trigger": "KeyCode.Keypad7", "contents": "KeyCode.Keypad7" },
		{ "trigger": "KeyCode.Joystick1Button11", "contents": "KeyCode.Joystick1Button11" },
		{ "trigger": "KeyCode.Joystick1Button10", "contents": "KeyCode.Joystick1Button10" },
		{ "trigger": "KeyCode.Joystick1Button13", "contents": "KeyCode.Joystick1Button13" },
		{ "trigger": "KeyCode.Joystick1Button12", "contents": "KeyCode.Joystick1Button12" },
		{ "trigger": "KeyCode.Joystick1Button15", "contents": "KeyCode.Joystick1Button15" },
		{ "trigger": "KeyCode.D", "contents": "KeyCode.D" },
		{ "trigger": "KeyCode.Joystick1Button17", "contents": "KeyCode.Joystick1Button17" },
		{ "trigger": "KeyCode.Joystick1Button16", "contents": "KeyCode.Joystick1Button16" },
		{ "trigger": "KeyCode.Joystick1Button19", "contents": "KeyCode.Joystick1Button19" },
		{ "trigger": "KeyCode.Joystick1Button18", "contents": "KeyCode.Joystick1Button18" },
		{ "trigger": "KeyCode.L", "contents": "KeyCode.L" },
		{ "trigger": "KeyCode.LeftShift", "contents": "KeyCode.LeftShift" },
		{ "trigger": "KeyCode.P", "contents": "KeyCode.P" },
		{ "trigger": "KeyCode.Joystick3Button19", "contents": "KeyCode.Joystick3Button19" },
		{ "trigger": "KeyCode.RightAlt", "contents": "KeyCode.RightAlt" },
		{ "trigger": "KeyCode.Plus", "contents": "KeyCode.Plus" },
		{ "trigger": "KeyCode.T", "contents": "KeyCode.T" },
		{ "trigger": "KeyCode.Joystick2Button13", "contents": "KeyCode.Joystick2Button13" },
		{ "trigger": "KeyCode.Joystick3Button13", "contents": "KeyCode.Joystick3Button13" },
		{ "trigger": "KeyCode.Joystick3Button12", "contents": "KeyCode.Joystick3Button12" },
		{ "trigger": "KeyCode.Joystick3Button11", "contents": "KeyCode.Joystick3Button11" },
		{ "trigger": "KeyCode.Joystick3Button10", "contents": "KeyCode.Joystick3Button10" },
		{ "trigger": "KeyCode.Joystick3Button17", "contents": "KeyCode.Joystick3Button17" },
		{ "trigger": "KeyCode.Joystick3Button16", "contents": "KeyCode.Joystick3Button16" },
		{ "trigger": "KeyCode.Joystick3Button15", "contents": "KeyCode.Joystick3Button15" },
		{ "trigger": "KeyCode.Joystick3Button14", "contents": "KeyCode.Joystick3Button14" },
		{ "trigger": "KeyCode.Help", "contents": "KeyCode.Help" },
		{ "trigger": "KeyCode.Semicolon", "contents": "KeyCode.Semicolon" },
		{ "trigger": "KeyCode.Less", "contents": "KeyCode.Less" },
		{ "trigger": "KeyCode.LeftArrow", "contents": "KeyCode.LeftArrow" },
		{ "trigger": "KeyCode.Backslash", "contents": "KeyCode.Backslash" },
		{ "trigger": "KeyCode.KeypadMinus", "contents": "KeyCode.KeypadMinus" },
		{ "trigger": "KeyCode.Tab", "contents": "KeyCode.Tab" },
		{ "trigger": "KeyCode.KeypadPlus", "contents": "KeyCode.KeypadPlus" },
		{ "trigger": "KeyCode.SysReq", "contents": "KeyCode.SysReq" },
		{ "trigger": "KeyCode.ScrollLock", "contents": "KeyCode.ScrollLock" },
		{ "trigger": "KeyCode.End", "contents": "KeyCode.End" },
		{ "trigger": "KeyCode.LeftBracket", "contents": "KeyCode.LeftBracket" },
		{ "trigger": "KeyCode.KeypadPeriod", "contents": "KeyCode.KeypadPeriod" },
		{ "trigger": "KeyCode.Question", "contents": "KeyCode.Question" },
		{ "trigger": "KeyCode.C", "contents": "KeyCode.C" },
		{ "trigger": "KeyCode.KeypadDivide", "contents": "KeyCode.KeypadDivide" },
		{ "trigger": "KeyCode.Joystick4Button6", "contents": "KeyCode.Joystick4Button6" },
		{ "trigger": "KeyCode.Keypad6", "contents": "KeyCode.Keypad6" },
		{ "trigger": "KeyCode.Keypad5", "contents": "KeyCode.Keypad5" },
		{ "trigger": "KeyCode.Joystick4Button5", "contents": "KeyCode.Joystick4Button5" },
		{ "trigger": "KeyCode.Backspace", "contents": "KeyCode.Backspace" },
		{ "trigger": "KeyCode.Keypad2", "contents": "KeyCode.Keypad2" },
		{ "trigger": "KeyCode.Keypad1", "contents": "KeyCode.Keypad1" },
		{ "trigger": "KeyCode.Keypad0", "contents": "KeyCode.Keypad0" },
		{ "trigger": "KeyCode.LeftApple", "contents": "KeyCode.LeftApple" },
		{ "trigger": "KeyCode.Keypad9", "contents": "KeyCode.Keypad9" },
		{ "trigger": "KeyCode.Keypad8", "contents": "KeyCode.Keypad8" },
		{ "trigger": "KeyCode.Joystick4Button2", "contents": "KeyCode.Joystick4Button2" },
		{ "trigger": "KeyCode.Underscore", "contents": "KeyCode.Underscore" },
		{ "trigger": "KeyCode.DoubleQuote", "contents": "KeyCode.DoubleQuote" },
		{ "trigger": "KeyCode.Joystick4Button11", "contents": "KeyCode.Joystick4Button11" },
		{ "trigger": "KeyCode.None", "contents": "KeyCode.None" },
		{ "trigger": "KeyCode.G", "contents": "KeyCode.G" },
		{ "trigger": "KeyCode.K", "contents": "KeyCode.K" },
		{ "trigger": "KeyCode.Joystick2Button9", "contents": "KeyCode.Joystick2Button9" },
		{ "trigger": "KeyCode.O", "contents": "KeyCode.O" },
		{ "trigger": "KeyCode.S", "contents": "KeyCode.S" },
		{ "trigger": "KeyCode.W", "contents": "KeyCode.W" },
		{ "trigger": "KeyCode.F12", "contents": "KeyCode.F12" },
		{ "trigger": "KeyCode.F13", "contents": "KeyCode.F13" },
		{ "trigger": "KeyCode.F10", "contents": "KeyCode.F10" },
		{ "trigger": "KeyCode.F11", "contents": "KeyCode.F11" },
		{ "trigger": "KeyCode.F14", "contents": "KeyCode.F14" },
		{ "trigger": "KeyCode.Delete", "contents": "KeyCode.Delete" },
		{ "trigger": "KeyCode.Joystick2Button8", "contents": "KeyCode.Joystick2Button8" },
		{ "trigger": "KeyCode.Joystick3Button9", "contents": "KeyCode.Joystick3Button9" },
		{ "trigger": "KeyCode.LeftAlt", "contents": "KeyCode.LeftAlt" },
		{ "trigger": "KeyCode.Joystick3Button7", "contents": "KeyCode.Joystick3Button7" },
		{ "trigger": "KeyCode.Joystick3Button6", "contents": "KeyCode.Joystick3Button6" },
		{ "trigger": "KeyCode.Joystick3Button5", "contents": "KeyCode.Joystick3Button5" },
		{ "trigger": "KeyCode.Joystick3Button4", "contents": "KeyCode.Joystick3Button4" },
		{ "trigger": "KeyCode.Joystick3Button3", "contents": "KeyCode.Joystick3Button3" },
		{ "trigger": "KeyCode.CapsLock", "contents": "KeyCode.CapsLock" },
		{ "trigger": "KeyCode.Joystick3Button1", "contents": "KeyCode.Joystick3Button1" },
		{ "trigger": "KeyCode.Joystick3Button0", "contents": "KeyCode.Joystick3Button0" },
		{ "trigger": "KeyCode.Joystick4Button7", "contents": "KeyCode.Joystick4Button7" },
		{ "trigger": "KeyCode.Escape", "contents": "KeyCode.Escape" },
		{ "trigger": "KeyCode.Home", "contents": "KeyCode.Home" },
		{ "trigger": "KeyCode.Keypad4", "contents": "KeyCode.Keypad4" },
		{ "trigger": "KeyCode.Pause", "contents": "KeyCode.Pause" },
		{ "trigger": "KeyCode.Asterisk", "contents": "KeyCode.Asterisk" },
		{ "trigger": "KeyCode.Joystick2Button0", "contents": "KeyCode.Joystick2Button0" },
		{ "trigger": "KeyCode.DownArrow", "contents": "KeyCode.DownArrow" },
		{ "trigger": "KeyCode.RightShift", "contents": "KeyCode.RightShift" },
		{ "trigger": "KeyCode.RightArrow", "contents": "KeyCode.RightArrow" },
		{ "trigger": "KeyCode.LeftWindows", "contents": "KeyCode.LeftWindows" },
		{ "trigger": "KeyCode.JoystickButton12", "contents": "KeyCode.JoystickButton12" },
		{ "trigger": "KeyCode.LeftParen", "contents": "KeyCode.LeftParen" },
		{ "trigger": "KeyCode.Equals", "contents": "KeyCode.Equals" },
		{ "trigger": "KeyCode.Break", "contents": "KeyCode.Break" },
		{ "trigger": "KeyCode.Joystick1Button2", "contents": "KeyCode.Joystick1Button2" },
		{ "trigger": "KeyCode.KeypadMultiply", "contents": "KeyCode.KeypadMultiply" },
		{ "trigger": "KeyCode.F15", "contents": "KeyCode.F15" },
		{ "trigger": "KeyCode.Joystick1Button4", "contents": "KeyCode.Joystick1Button4" },
		{ "trigger": "KeyCode.B", "contents": "KeyCode.B" },
		{ "trigger": "KeyCode.F", "contents": "KeyCode.F" },
		{ "trigger": "KeyCode.J", "contents": "KeyCode.J" },
		{ "trigger": "KeyCode.N", "contents": "KeyCode.N" },
		{ "trigger": "KeyCode.R", "contents": "KeyCode.R" },
		{ "trigger": "KeyCode.RightParen", "contents": "KeyCode.RightParen" },
		{ "trigger": "KeyCode.V", "contents": "KeyCode.V" },
		{ "trigger": "KeyCode.Z", "contents": "KeyCode.Z" },
		{ "trigger": "KeyCode.F1", "contents": "KeyCode.F1" },
		{ "trigger": "KeyCode.F2", "contents": "KeyCode.F2" },
		{ "trigger": "KeyCode.F3", "contents": "KeyCode.F3" },
		{ "trigger": "KeyCode.F4", "contents": "KeyCode.F4" },
		{ "trigger": "KeyCode.F5", "contents": "KeyCode.F5" },
		{ "trigger": "KeyCode.F6", "contents": "KeyCode.F6" },
		{ "trigger": "KeyCode.F7", "contents": "KeyCode.F7" },
		{ "trigger": "KeyCode.F8", "contents": "KeyCode.F8" },
		{ "trigger": "KeyCode.F9", "contents": "KeyCode.F9" },
		{ "trigger": "KeyCode.Joystick3Button8", "contents": "KeyCode.Joystick3Button8" },
		{ "trigger": "KeyCode.Dollar", "contents": "KeyCode.Dollar" },
		{ "trigger": "KeyCode.Joystick4Button4", "contents": "KeyCode.Joystick4Button4" },
		{ "trigger": "KeyCode.Joystick4Button14", "contents": "KeyCode.Joystick4Button14" },
		{ "trigger": "KeyCode.Joystick4Button15", "contents": "KeyCode.Joystick4Button15" },
		{ "trigger": "KeyCode.Joystick4Button16", "contents": "KeyCode.Joystick4Button16" },
		{ "trigger": "KeyCode.Joystick4Button17", "contents": "KeyCode.Joystick4Button17" },
		{ "trigger": "KeyCode.Joystick4Button10", "contents": "KeyCode.Joystick4Button10" },
		{ "trigger": "KeyCode.PageDown", "contents": "KeyCode.PageDown" },
		{ "trigger": "KeyCode.Joystick4Button12", "contents": "KeyCode.Joystick4Button12" },
		{ "trigger": "KeyCode.Joystick4Button13", "contents": "KeyCode.Joystick4Button13" },
		{ "trigger": "KeyCode.Keypad3", "contents": "KeyCode.Keypad3" },
		{ "trigger": "KeyCode.Numlock", "contents": "KeyCode.Numlock" },
		{ "trigger": "KeyCode.Joystick4Button18", "contents": "KeyCode.Joystick4Button18" },
		{ "trigger": "KeyCode.Joystick4Button19", "contents": "KeyCode.Joystick4Button19" },
		{ "trigger": "KeyCode.Joystick4Button3", "contents": "KeyCode.Joystick4Button3" },
		{ "trigger": "KeyCode.JoystickButton15", "contents": "KeyCode.JoystickButton15" },
		{ "trigger": "KeyCode.JoystickButton14", "contents": "KeyCode.JoystickButton14" },
		{ "trigger": "KeyCode.JoystickButton17", "contents": "KeyCode.JoystickButton17" },
		{ "trigger": "KeyCode.JoystickButton16", "contents": "KeyCode.JoystickButton16" },
		{ "trigger": "KeyCode.JoystickButton11", "contents": "KeyCode.JoystickButton11" },
		{ "trigger": "KeyCode.JoystickButton10", "contents": "KeyCode.JoystickButton10" },
		{ "trigger": "KeyCode.JoystickButton13", "contents": "KeyCode.JoystickButton13" },
		{ "trigger": "KeyCode.Space", "contents": "KeyCode.Space" },
		{ "trigger": "KeyCode.Menu", "contents": "KeyCode.Menu" },
		{ "trigger": "KeyCode.Joystick4Button1", "contents": "KeyCode.Joystick4Button1" },
		{ "trigger": "KeyCode.JoystickButton19", "contents": "KeyCode.JoystickButton19" },
		{ "trigger": "KeyCode.JoystickButton18", "contents": "KeyCode.JoystickButton18" },
		{ "trigger": "KeyCode.Joystick3Button2", "contents": "KeyCode.Joystick3Button2" },
		{ "trigger": "KeyCode.Print", "contents": "KeyCode.Print" },
		{ "trigger": "KeyCode.Ampersand", "contents": "KeyCode.Ampersand" },
		{ "trigger": "KeyCode.Slash", "contents": "KeyCode.Slash" },
		{ "trigger": "KeyCode.Period", "contents": "KeyCode.Period" },
		{ "trigger": "KeyCode.Mouse5", "contents": "KeyCode.Mouse5" },
		{ "trigger": "KeyCode.Mouse4", "contents": "KeyCode.Mouse4" },
		{ "trigger": "KeyCode.Mouse6", "contents": "KeyCode.Mouse6" },
		{ "trigger": "KeyCode.Mouse1", "contents": "KeyCode.Mouse1" },
		{ "trigger": "KeyCode.Mouse0", "contents": "KeyCode.Mouse0" },
		{ "trigger": "KeyCode.RightWindows", "contents": "KeyCode.RightWindows" },
		{ "trigger": "KeyCode.Joystick1Button14", "contents": "KeyCode.Joystick1Button14" },
		{ "trigger": "KeyCode.Return", "contents": "KeyCode.Return" },
		{ "trigger": "KeyCode.Quote", "contents": "KeyCode.Quote" },
		{ "trigger": "KeyCode.Joystick2Button18", "contents": "KeyCode.Joystick2Button18" },
		{ "trigger": "KeyCode.Joystick2Button19", "contents": "KeyCode.Joystick2Button19" },
		{ "trigger": "KeyCode.Mouse3", "contents": "KeyCode.Mouse3" },
		{ "trigger": "KeyCode.H", "contents": "KeyCode.H" },
		{ "trigger": "KeyCode.Joystick2Button12", "contents": "KeyCode.Joystick2Button12" },
		{ "trigger": "KeyCode.Comma", "contents": "KeyCode.Comma" },
		{ "trigger": "KeyCode.Joystick2Button10", "contents": "KeyCode.Joystick2Button10" },
		{ "trigger": "KeyCode.Joystick2Button11", "contents": "KeyCode.Joystick2Button11" },
		{ "trigger": "KeyCode.Joystick2Button16", "contents": "KeyCode.Joystick2Button16" },
		{ "trigger": "KeyCode.Joystick2Button17", "contents": "KeyCode.Joystick2Button17" },
		{ "trigger": "KeyCode.Joystick2Button14", "contents": "KeyCode.Joystick2Button14" },
		{ "trigger": "KeyCode.Joystick2Button15", "contents": "KeyCode.Joystick2Button15" },
		{ "trigger": "KeyCode.A", "contents": "KeyCode.A" },
		{ "trigger": "KeyCode.Insert", "contents": "KeyCode.Insert" },
		{ "trigger": "KeyCode.Exclaim", "contents": "KeyCode.Exclaim" },
		{ "trigger": "KeyCode.E", "contents": "KeyCode.E" },
		{ "trigger": "KeyCode.KeypadEquals", "contents": "KeyCode.KeypadEquals" },
		{ "trigger": "KeyCode.I", "contents": "KeyCode.I" },
		{ "trigger": "KeyCode.Clear", "contents": "KeyCode.Clear" },
		{ "trigger": "KeyCode.M", "contents": "KeyCode.M" },
		{ "trigger": "KeyCode.Joystick4Button8", "contents": "KeyCode.Joystick4Button8" },
		{ "trigger": "KeyCode.Q", "contents": "KeyCode.Q" },
		{ "trigger": "KeyCode.RightControl", "contents": "KeyCode.RightControl" },
		{ "trigger": "KeyCode.U", "contents": "KeyCode.U" },
		{ "trigger": "KeyCode.KeypadEnter", "contents": "KeyCode.KeypadEnter" },
		{ "trigger": "KeyCode.Y", "contents": "KeyCode.Y" },
		{ "trigger": "KeyCode.Joystick2Button1", "contents": "KeyCode.Joystick2Button1" },
		{ "trigger": "KeyCode.Joystick2Button2", "contents": "KeyCode.Joystick2Button2" },
		{ "trigger": "KeyCode.Joystick2Button3", "contents": "KeyCode.Joystick2Button3" },
		{ "trigger": "KeyCode.Joystick2Button4", "contents": "KeyCode.Joystick2Button4" },
		{ "trigger": "KeyCode.Joystick2Button5", "contents": "KeyCode.Joystick2Button5" },
		{ "trigger": "KeyCode.Joystick2Button6", "contents": "KeyCode.Joystick2Button6" },
		{ "trigger": "KeyCode.Joystick2Button7", "contents": "KeyCode.Joystick2Button7" },
		{ "trigger": "KeyCode.Joystick4Button0", "contents": "KeyCode.Joystick4Button0" },
		{ "trigger": "KeyCode.JoystickButton2", "contents": "KeyCode.JoystickButton2" },
		{ "trigger": "KeyCode.Joystick4Button9", "contents": "KeyCode.Joystick4Button9" },
		{ "trigger": "KeyCode.UpArrow", "contents": "KeyCode.UpArrow" },
		{ "trigger": "KeyCode.JoystickButton9", "contents": "KeyCode.JoystickButton9" },
		{ "trigger": "KeyCode.JoystickButton8", "contents": "KeyCode.JoystickButton8" },
		{ "trigger": "KeyCode.Joystick3Button18", "contents": "KeyCode.Joystick3Button18" },
		{ "trigger": "KeyCode.Colon", "contents": "KeyCode.Colon" },
		{ "trigger": "KeyCode.At", "contents": "KeyCode.At" },
		{ "trigger": "KeyCode.BackQuote", "contents": "KeyCode.BackQuote" },
		{ "trigger": "KeyCode.JoystickButton1", "contents": "KeyCode.JoystickButton1" },
		{ "trigger": "KeyCode.JoystickButton0", "contents": "KeyCode.JoystickButton0" },
		{ "trigger": "KeyCode.JoystickButton3", "contents": "KeyCode.JoystickButton3" },
		{ "trigger": "KeyCode.Mouse2", "contents": "KeyCode.Mouse2" },
		{ "trigger": "KeyCode.JoystickButton5", "contents": "KeyCode.JoystickButton5" },
		{ "trigger": "KeyCode.JoystickButton4", "contents": "KeyCode.JoystickButton4" },
		{ "trigger": "KeyCode.JoystickButton7", "contents": "KeyCode.JoystickButton7" },
		{ "trigger": "KeyCode.JoystickButton6", "contents": "KeyCode.JoystickButton6" },
		{ "trigger": "Space", "contents": "Space" },
		{ "trigger": "Space.World", "contents": "Space.World" },
		{ "trigger": "Space.Self", "contents": "Space.Self" },
		{ "trigger": "ProceduralLoadingBehavior", "contents": "ProceduralLoadingBehavior" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndKeep", "contents": "ProceduralLoadingBehavior.BakeAndKeep" },
		{ "trigger": "ProceduralLoadingBehavior.DoNothing", "contents": "ProceduralLoadingBehavior.DoNothing" },
		{ "trigger": "ProceduralLoadingBehavior.Generate", "contents": "ProceduralLoadingBehavior.Generate" },
		{ "trigger": "ProceduralLoadingBehavior.BakeAndDiscard", "contents": "ProceduralLoadingBehavior.BakeAndDiscard" },
		{ "trigger": "TextureWrapMode", "contents": "TextureWrapMode" },
		{ "trigger": "TextureWrapMode.Clamp", "contents": "TextureWrapMode.Clamp" },
		{ "trigger": "TextureWrapMode.Repeat", "contents": "TextureWrapMode.Repeat" },
		{ "trigger": "TextureFormat", "contents": "TextureFormat" },
		{ "trigger": "TextureFormat.ATF_RGBA_JPG", "contents": "TextureFormat.ATF_RGBA_JPG" },
		{ "trigger": "TextureFormat.PVRTC_RGB2", "contents": "TextureFormat.PVRTC_RGB2" },
		{ "trigger": "TextureFormat.ATC_RGB4", "contents": "TextureFormat.ATC_RGB4" },
		{ "trigger": "TextureFormat.RGB565", "contents": "TextureFormat.RGB565" },
		{ "trigger": "TextureFormat.PVRTC_RGB4", "contents": "TextureFormat.PVRTC_RGB4" },
		{ "trigger": "TextureFormat.ATF_RGB_JPG", "contents": "TextureFormat.ATF_RGB_JPG" },
		{ "trigger": "TextureFormat.DXT5", "contents": "TextureFormat.DXT5" },
		{ "trigger": "TextureFormat.Alpha8", "contents": "TextureFormat.Alpha8" },
		{ "trigger": "TextureFormat.ATC_RGBA8", "contents": "TextureFormat.ATC_RGBA8" },
		{ "trigger": "TextureFormat.DXT1", "contents": "TextureFormat.DXT1" },
		{ "trigger": "TextureFormat.ARGB32", "contents": "TextureFormat.ARGB32" },
		{ "trigger": "TextureFormat.PVRTC_RGBA2", "contents": "TextureFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureFormat.RGB24", "contents": "TextureFormat.RGB24" },
		{ "trigger": "TextureFormat.ARGB4444", "contents": "TextureFormat.ARGB4444" },
		{ "trigger": "TextureFormat.PVRTC_RGBA4", "contents": "TextureFormat.PVRTC_RGBA4" },
		{ "trigger": "TextureFormat.RGBA4444", "contents": "TextureFormat.RGBA4444" },
		{ "trigger": "TextureFormat.BGRA32", "contents": "TextureFormat.BGRA32" },
		{ "trigger": "TextureFormat.ETC_RGB4", "contents": "TextureFormat.ETC_RGB4" },
		{ "trigger": "TextureFormat.ATF_RGB_DXT1", "contents": "TextureFormat.ATF_RGB_DXT1" },
		{ "trigger": "TouchPhase", "contents": "TouchPhase" },
		{ "trigger": "TouchPhase.Canceled", "contents": "TouchPhase.Canceled" },
		{ "trigger": "TouchPhase.Began", "contents": "TouchPhase.Began" },
		{ "trigger": "TouchPhase.Stationary", "contents": "TouchPhase.Stationary" },
		{ "trigger": "TouchPhase.Moved", "contents": "TouchPhase.Moved" },
		{ "trigger": "TouchPhase.Ended", "contents": "TouchPhase.Ended" },
		{ "trigger": "NetworkReachability", "contents": "NetworkReachability" },
		{ "trigger": "NetworkReachability.NotReachable", "contents": "NetworkReachability.NotReachable" },
		{ "trigger": "NetworkReachability.ReachableViaCarrierDataNetwork", "contents": "NetworkReachability.ReachableViaCarrierDataNetwork" },
		{ "trigger": "NetworkReachability.ReachableViaLocalAreaNetwork", "contents": "NetworkReachability.ReachableViaLocalAreaNetwork" },
		{ "trigger": "ADErrorCode", "contents": "ADErrorCode" },
		{ "trigger": "ADErrorCode.ApplicationInactive", "contents": "ADErrorCode.ApplicationInactive" },
		{ "trigger": "ADErrorCode.ServerFailure", "contents": "ADErrorCode.ServerFailure" },
		{ "trigger": "ADErrorCode.InventoryUnavailable", "contents": "ADErrorCode.InventoryUnavailable" },
		{ "trigger": "ADErrorCode.Unknown", "contents": "ADErrorCode.Unknown" },
		{ "trigger": "ADErrorCode.ConfigurationError", "contents": "ADErrorCode.ConfigurationError" },
		{ "trigger": "ADErrorCode.LoadingThrottled", "contents": "ADErrorCode.LoadingThrottled" },
		{ "trigger": "ADErrorCode.BannerVisibleWithoutContent", "contents": "ADErrorCode.BannerVisibleWithoutContent" },
		{ "trigger": "SkinQuality", "contents": "SkinQuality" },
		{ "trigger": "SkinQuality.Auto", "contents": "SkinQuality.Auto" },
		{ "trigger": "SkinQuality.Bone1", "contents": "SkinQuality.Bone1" },
		{ "trigger": "SkinQuality.Bone4", "contents": "SkinQuality.Bone4" },
		{ "trigger": "SkinQuality.Bone2", "contents": "SkinQuality.Bone2" },
		{ "trigger": "FocusType", "contents": "FocusType" },
		{ "trigger": "FocusType.Passive", "contents": "FocusType.Passive" },
		{ "trigger": "FocusType.Keyboard", "contents": "FocusType.Keyboard" },
		{ "trigger": "FocusType.Native", "contents": "FocusType.Native" },
		{ "trigger": "ADSizeIdentifier", "contents": "ADSizeIdentifier" },
		{ "trigger": "ADSizeIdentifier.Unknown", "contents": "ADSizeIdentifier.Unknown" },
		{ "trigger": "ADSizeIdentifier.Landscape", "contents": "ADSizeIdentifier.Landscape" },
		{ "trigger": "ADSizeIdentifier.Portrait", "contents": "ADSizeIdentifier.Portrait" },
		{ "trigger": "AnimationBlendMode", "contents": "AnimationBlendMode" },
		{ "trigger": "AnimationBlendMode.Additive", "contents": "AnimationBlendMode.Additive" },
		{ "trigger": "AnimationBlendMode.Blend", "contents": "AnimationBlendMode.Blend" },
		{ "trigger": "WrapMode", "contents": "WrapMode" },
		{ "trigger": "WrapMode.Default", "contents": "WrapMode.Default" },
		{ "trigger": "WrapMode.ClampForever", "contents": "WrapMode.ClampForever" },
		{ "trigger": "WrapMode.PingPong", "contents": "WrapMode.PingPong" },
		{ "trigger": "WrapMode.Loop", "contents": "WrapMode.Loop" },
		{ "trigger": "WrapMode.Once", "contents": "WrapMode.Once" },
		{ "trigger": "UserState", "contents": "UserState" },
		{ "trigger": "UserState.Offline", "contents": "UserState.Offline" },
		{ "trigger": "UserState.OnlineAndAway", "contents": "UserState.OnlineAndAway" },
		{ "trigger": "UserState.Playing", "contents": "UserState.Playing" },
		{ "trigger": "UserState.OnlineAndBusy", "contents": "UserState.OnlineAndBusy" },
		{ "trigger": "UserState.Online", "contents": "UserState.Online" },
		{ "trigger": "TimeScope", "contents": "TimeScope" },
		{ "trigger": "TimeScope.Week", "contents": "TimeScope.Week" },
		{ "trigger": "TimeScope.AllTime", "contents": "TimeScope.AllTime" },
		{ "trigger": "TimeScope.Today", "contents": "TimeScope.Today" },
		{ "trigger": "iPhoneGeneration", "contents": "iPhoneGeneration" },
		{ "trigger": "iPhoneGeneration.iPadUnknown", "contents": "iPhoneGeneration.iPadUnknown" },
		{ "trigger": "iPhoneGeneration.iPodTouchUnknown", "contents": "iPhoneGeneration.iPodTouchUnknown" },
		{ "trigger": "iPhoneGeneration.iPhone5", "contents": "iPhoneGeneration.iPhone5" },
		{ "trigger": "iPhoneGeneration.iPodTouch3Gen", "contents": "iPhoneGeneration.iPodTouch3Gen" },
		{ "trigger": "iPhoneGeneration.iPodTouch1Gen", "contents": "iPhoneGeneration.iPodTouch1Gen" },
		{ "trigger": "iPhoneGeneration.iPhone4", "contents": "iPhoneGeneration.iPhone4" },
		{ "trigger": "iPhoneGeneration.iPodTouch5Gen", "contents": "iPhoneGeneration.iPodTouch5Gen" },
		{ "trigger": "iPhoneGeneration.iPad2Gen", "contents": "iPhoneGeneration.iPad2Gen" },
		{ "trigger": "iPhoneGeneration.iPhone3G", "contents": "iPhoneGeneration.iPhone3G" },
		{ "trigger": "iPhoneGeneration.iPodTouch2Gen", "contents": "iPhoneGeneration.iPodTouch2Gen" },
		{ "trigger": "iPhoneGeneration.iPodTouch4Gen", "contents": "iPhoneGeneration.iPodTouch4Gen" },
		{ "trigger": "iPhoneGeneration.iPhone3GS", "contents": "iPhoneGeneration.iPhone3GS" },
		{ "trigger": "iPhoneGeneration.iPhone", "contents": "iPhoneGeneration.iPhone" },
		{ "trigger": "iPhoneGeneration.iPadMini1Gen", "contents": "iPhoneGeneration.iPadMini1Gen" },
		{ "trigger": "iPhoneGeneration.iPad1Gen", "contents": "iPhoneGeneration.iPad1Gen" },
		{ "trigger": "iPhoneGeneration.iPad3Gen", "contents": "iPhoneGeneration.iPad3Gen" },
		{ "trigger": "iPhoneGeneration.iPhone4S", "contents": "iPhoneGeneration.iPhone4S" },
		{ "trigger": "iPhoneGeneration.iPhoneUnknown", "contents": "iPhoneGeneration.iPhoneUnknown" },
		{ "trigger": "iPhoneGeneration.iPad4Gen", "contents": "iPhoneGeneration.iPad4Gen" },
		{ "trigger": "ParticleRenderMode", "contents": "ParticleRenderMode" },
		{ "trigger": "ParticleRenderMode.Billboard", "contents": "ParticleRenderMode.Billboard" },
		{ "trigger": "ParticleRenderMode.Stretch", "contents": "ParticleRenderMode.Stretch" },
		{ "trigger": "ParticleRenderMode.HorizontalBillboard", "contents": "ParticleRenderMode.HorizontalBillboard" },
		{ "trigger": "ParticleRenderMode.SortedBillboard", "contents": "ParticleRenderMode.SortedBillboard" },
		{ "trigger": "ParticleRenderMode.VerticalBillboard", "contents": "ParticleRenderMode.VerticalBillboard" },
		{ "trigger": "CalendarUnit", "contents": "CalendarUnit" },
		{ "trigger": "CalendarUnit.Week", "contents": "CalendarUnit.Week" },
		{ "trigger": "CalendarUnit.Hour", "contents": "CalendarUnit.Hour" },
		{ "trigger": "CalendarUnit.WeekdayOrdinal", "contents": "CalendarUnit.WeekdayOrdinal" },
		{ "trigger": "CalendarUnit.Month", "contents": "CalendarUnit.Month" },
		{ "trigger": "CalendarUnit.Second", "contents": "CalendarUnit.Second" },
		{ "trigger": "CalendarUnit.Era", "contents": "CalendarUnit.Era" },
		{ "trigger": "CalendarUnit.Year", "contents": "CalendarUnit.Year" },
		{ "trigger": "CalendarUnit.Quarter", "contents": "CalendarUnit.Quarter" },
		{ "trigger": "CalendarUnit.Day", "contents": "CalendarUnit.Day" },
		{ "trigger": "CalendarUnit.Minute", "contents": "CalendarUnit.Minute" },
		{ "trigger": "CalendarUnit.Weekday", "contents": "CalendarUnit.Weekday" },
		{ "trigger": "CubemapFace", "contents": "CubemapFace" },
		{ "trigger": "CubemapFace.PositiveZ", "contents": "CubemapFace.PositiveZ" },
		{ "trigger": "CubemapFace.PositiveX", "contents": "CubemapFace.PositiveX" },
		{ "trigger": "CubemapFace.PositiveY", "contents": "CubemapFace.PositiveY" },
		{ "trigger": "CubemapFace.NegativeZ", "contents": "CubemapFace.NegativeZ" },
		{ "trigger": "CubemapFace.NegativeX", "contents": "CubemapFace.NegativeX" },
		{ "trigger": "CubemapFace.NegativeY", "contents": "CubemapFace.NegativeY" },
		{ "trigger": "DetailRenderMode", "contents": "DetailRenderMode" },
		{ "trigger": "DetailRenderMode.VertexLit", "contents": "DetailRenderMode.VertexLit" },
		{ "trigger": "DetailRenderMode.Grass", "contents": "DetailRenderMode.Grass" },
		{ "trigger": "DetailRenderMode.GrassBillboard", "contents": "DetailRenderMode.GrassBillboard" },
		{ "trigger": "SystemLanguage", "contents": "SystemLanguage" },
		{ "trigger": "SystemLanguage.Swedish", "contents": "SystemLanguage.Swedish" },
		{ "trigger": "SystemLanguage.Icelandic", "contents": "SystemLanguage.Icelandic" },
		{ "trigger": "SystemLanguage.Estonian", "contents": "SystemLanguage.Estonian" },
		{ "trigger": "SystemLanguage.Turkish", "contents": "SystemLanguage.Turkish" },
		{ "trigger": "SystemLanguage.Romanian", "contents": "SystemLanguage.Romanian" },
		{ "trigger": "SystemLanguage.Slovenian", "contents": "SystemLanguage.Slovenian" },
		{ "trigger": "SystemLanguage.Lithuanian", "contents": "SystemLanguage.Lithuanian" },
		{ "trigger": "SystemLanguage.Dutch", "contents": "SystemLanguage.Dutch" },
		{ "trigger": "SystemLanguage.Faroese", "contents": "SystemLanguage.Faroese" },
		{ "trigger": "SystemLanguage.Korean", "contents": "SystemLanguage.Korean" },
		{ "trigger": "SystemLanguage.Danish", "contents": "SystemLanguage.Danish" },
		{ "trigger": "SystemLanguage.Bulgarian", "contents": "SystemLanguage.Bulgarian" },
		{ "trigger": "SystemLanguage.Spanish", "contents": "SystemLanguage.Spanish" },
		{ "trigger": "SystemLanguage.SerboCroatian", "contents": "SystemLanguage.SerboCroatian" },
		{ "trigger": "SystemLanguage.Hungarian", "contents": "SystemLanguage.Hungarian" },
		{ "trigger": "SystemLanguage.Catalan", "contents": "SystemLanguage.Catalan" },
		{ "trigger": "SystemLanguage.Vietnamese", "contents": "SystemLanguage.Vietnamese" },
		{ "trigger": "SystemLanguage.French", "contents": "SystemLanguage.French" },
		{ "trigger": "SystemLanguage.Norwegian", "contents": "SystemLanguage.Norwegian" },
		{ "trigger": "SystemLanguage.Unknown", "contents": "SystemLanguage.Unknown" },
		{ "trigger": "SystemLanguage.Russian", "contents": "SystemLanguage.Russian" },
		{ "trigger": "SystemLanguage.Thai", "contents": "SystemLanguage.Thai" },
		{ "trigger": "SystemLanguage.Afrikaans", "contents": "SystemLanguage.Afrikaans" },
		{ "trigger": "SystemLanguage.Finnish", "contents": "SystemLanguage.Finnish" },
		{ "trigger": "SystemLanguage.Hebrew", "contents": "SystemLanguage.Hebrew" },
		{ "trigger": "SystemLanguage.Indonesian", "contents": "SystemLanguage.Indonesian" },
		{ "trigger": "SystemLanguage.Greek", "contents": "SystemLanguage.Greek" },
		{ "trigger": "SystemLanguage.Latvian", "contents": "SystemLanguage.Latvian" },
		{ "trigger": "SystemLanguage.English", "contents": "SystemLanguage.English" },
		{ "trigger": "SystemLanguage.Italian", "contents": "SystemLanguage.Italian" },
		{ "trigger": "SystemLanguage.Portuguese", "contents": "SystemLanguage.Portuguese" },
		{ "trigger": "SystemLanguage.Chinese", "contents": "SystemLanguage.Chinese" },
		{ "trigger": "SystemLanguage.German", "contents": "SystemLanguage.German" },
		{ "trigger": "SystemLanguage.Ukrainian", "contents": "SystemLanguage.Ukrainian" },
		{ "trigger": "SystemLanguage.Japanese", "contents": "SystemLanguage.Japanese" },
		{ "trigger": "SystemLanguage.Belarusian", "contents": "SystemLanguage.Belarusian" },
		{ "trigger": "SystemLanguage.Czech", "contents": "SystemLanguage.Czech" },
		{ "trigger": "SystemLanguage.Slovak", "contents": "SystemLanguage.Slovak" },
		{ "trigger": "SystemLanguage.Basque", "contents": "SystemLanguage.Basque" },
		{ "trigger": "SystemLanguage.Polish", "contents": "SystemLanguage.Polish" },
		{ "trigger": "SystemLanguage.Arabic", "contents": "SystemLanguage.Arabic" },
		{ "trigger": "FilterMode", "contents": "FilterMode" },
		{ "trigger": "FilterMode.Bilinear", "contents": "FilterMode.Bilinear" },
		{ "trigger": "FilterMode.Trilinear", "contents": "FilterMode.Trilinear" },
		{ "trigger": "FilterMode.Point", "contents": "FilterMode.Point" },

		// Editor Classes
		{ "trigger": "AssetPreview", "contents": "AssetPreview" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreview(instanceID)", "contents": "AssetPreview.IsLoadingAssetPreview(${1:int instanceID});" },
		{ "trigger": "AssetPreview.GetMiniThumbnail(obj)", "contents": "AssetPreview.GetMiniThumbnail(${1:Object obj});" },
		{ "trigger": "AssetPreview.IsLoadingAssetPreviews()", "contents": "AssetPreview.IsLoadingAssetPreviews();" },
		{ "trigger": "AssetPreview.GetMiniTypeThumbnail(type)", "contents": "AssetPreview.GetMiniTypeThumbnail(${1:Type type});" },
		{ "trigger": "AssetPreview.GetAssetPreview(asset)", "contents": "AssetPreview.GetAssetPreview(${1:Object asset});" },
		{ "trigger": "SubstanceImporter", "contents": "SubstanceImporter" },
		{ "trigger": "SubstanceImporter.GetGenerateAllOutputs(material)", "contents": "SubstanceImporter.GetGenerateAllOutputs(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.SetMaterialOffset(material, offset)", "contents": "SubstanceImporter.SetMaterialOffset(${1:ProceduralMaterial material}, ${2:Vector2 offset});" },
		{ "trigger": "SubstanceImporter.GetMaterialScale(material)", "contents": "SubstanceImporter.GetMaterialScale(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.SetTextureAlphaSource(material, textureName, alphaSource)", "contents": "SubstanceImporter.SetTextureAlphaSource(${1:ProceduralMaterial material}, ${2:String textureName}, ${3:ProceduralOutputType alphaSource});" },
		{ "trigger": "SubstanceImporter.GetAnimationUpdateRate(material)", "contents": "SubstanceImporter.GetAnimationUpdateRate(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.SetAnimationUpdateRate(material, animation_update_rate)", "contents": "SubstanceImporter.SetAnimationUpdateRate(${1:ProceduralMaterial material}, ${2:int animation_update_rate});" },
		{ "trigger": "SubstanceImporter.GetMaterials()", "contents": "SubstanceImporter.GetMaterials();" },
		{ "trigger": "SubstanceImporter.GetPrototypeNames()", "contents": "SubstanceImporter.GetPrototypeNames();" },
		{ "trigger": "SubstanceImporter.GetMaterialCount()", "contents": "SubstanceImporter.GetMaterialCount();" },
		{ "trigger": "SubstanceImporter.SetGenerateAllOutputs(material, generated)", "contents": "SubstanceImporter.SetGenerateAllOutputs(${1:ProceduralMaterial material}, ${2:boolean generated});" },
		{ "trigger": "SubstanceImporter.ResetMaterial(material)", "contents": "SubstanceImporter.ResetMaterial(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.InstantiateMaterial(prototypeName)", "contents": "SubstanceImporter.InstantiateMaterial(${1:String prototypeName});" },
		{ "trigger": "SubstanceImporter.GetTextureAlphaSource(material, textureName)", "contents": "SubstanceImporter.GetTextureAlphaSource(${1:ProceduralMaterial material}, ${2:String textureName});" },
		{ "trigger": "SubstanceImporter.RenameMaterial(material, name)", "contents": "SubstanceImporter.RenameMaterial(${1:ProceduralMaterial material}, ${2:String name});" },
		{ "trigger": "SubstanceImporter.CloneMaterial(material)", "contents": "SubstanceImporter.CloneMaterial(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.OnShaderModified(material)", "contents": "SubstanceImporter.OnShaderModified(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.SetMaterialScale(material, scale)", "contents": "SubstanceImporter.SetMaterialScale(${1:ProceduralMaterial material}, ${2:Vector2 scale});" },
		{ "trigger": "SubstanceImporter.DestroyMaterial(material)", "contents": "SubstanceImporter.DestroyMaterial(${1:ProceduralMaterial material});" },
		{ "trigger": "SubstanceImporter.GetMaterialOffset(material)", "contents": "SubstanceImporter.GetMaterialOffset(${1:ProceduralMaterial material});" },
		{ "trigger": "LightmapEditorSettings", "contents": "LightmapEditorSettings" },
		{ "trigger": "LightmapEditorSettings.maxAtlasWidth", "contents": "LightmapEditorSettings.maxAtlasWidth" },
		{ "trigger": "LightmapEditorSettings.maxAtlasHeight", "contents": "LightmapEditorSettings.maxAtlasHeight" },
		{ "trigger": "LightmapEditorSettings.lockAtlas", "contents": "LightmapEditorSettings.lockAtlas" },
		{ "trigger": "LightmapEditorSettings.finalGatherGradientThreshold", "contents": "LightmapEditorSettings.finalGatherGradientThreshold" },
		{ "trigger": "LightmapEditorSettings.lastUsedResolution", "contents": "LightmapEditorSettings.lastUsedResolution" },
		{ "trigger": "LightmapEditorSettings.aoContrast", "contents": "LightmapEditorSettings.aoContrast" },
		{ "trigger": "LightmapEditorSettings.bounces", "contents": "LightmapEditorSettings.bounces" },
		{ "trigger": "LightmapEditorSettings.textureCompression", "contents": "LightmapEditorSettings.textureCompression" },
		{ "trigger": "LightmapEditorSettings.bounceIntensity", "contents": "LightmapEditorSettings.bounceIntensity" },
		{ "trigger": "LightmapEditorSettings.skyLightIntensity", "contents": "LightmapEditorSettings.skyLightIntensity" },
		{ "trigger": "LightmapEditorSettings.aoMaxDistance", "contents": "LightmapEditorSettings.aoMaxDistance" },
		{ "trigger": "LightmapEditorSettings.skyLightColor", "contents": "LightmapEditorSettings.skyLightColor" },
		{ "trigger": "LightmapEditorSettings.padding", "contents": "LightmapEditorSettings.padding" },
		{ "trigger": "LightmapEditorSettings.finalGatherContrastThreshold", "contents": "LightmapEditorSettings.finalGatherContrastThreshold" },
		{ "trigger": "LightmapEditorSettings.finalGatherInterpolationPoints", "contents": "LightmapEditorSettings.finalGatherInterpolationPoints" },
		{ "trigger": "LightmapEditorSettings.resolution", "contents": "LightmapEditorSettings.resolution" },
		{ "trigger": "LightmapEditorSettings.bounceBoost", "contents": "LightmapEditorSettings.bounceBoost" },
		{ "trigger": "LightmapEditorSettings.quality", "contents": "LightmapEditorSettings.quality" },
		{ "trigger": "LightmapEditorSettings.finalGatherRays", "contents": "LightmapEditorSettings.finalGatherRays" },
		{ "trigger": "LightmapEditorSettings.aoAmount", "contents": "LightmapEditorSettings.aoAmount" },
		{ "trigger": "EditorApplication", "contents": "EditorApplication" },
		{ "trigger": "EditorApplication.searchChanged", "contents": "EditorApplication.searchChanged" },
		{ "trigger": "EditorApplication.applicationPath", "contents": "EditorApplication.applicationPath" },
		{ "trigger": "EditorApplication.SaveScene(path, saveAsCopy)", "contents": "EditorApplication.SaveScene(${1:String path = \"\"}, ${2:boolean saveAsCopy = false});" },
		{ "trigger": "EditorApplication.Exit(returnValue)", "contents": "EditorApplication.Exit(${1:int returnValue});" },
		{ "trigger": "EditorApplication.hierarchyWindowItemOnGUI", "contents": "EditorApplication.hierarchyWindowItemOnGUI" },
		{ "trigger": "EditorApplication.CallbackFunction()", "contents": "EditorApplication.CallbackFunction();" },
		{ "trigger": "EditorApplication.Beep()", "contents": "EditorApplication.Beep();" },
		{ "trigger": "EditorApplication.projectWindowItemOnGUI", "contents": "EditorApplication.projectWindowItemOnGUI" },
		{ "trigger": "EditorApplication.NewScene()", "contents": "EditorApplication.NewScene();" },
		{ "trigger": "EditorApplication.applicationContentsPath", "contents": "EditorApplication.applicationContentsPath" },
		{ "trigger": "EditorApplication.OpenScene(path)", "contents": "EditorApplication.OpenScene(${1:String path});" },
		{ "trigger": "EditorApplication.timeSinceStartup", "contents": "EditorApplication.timeSinceStartup" },
		{ "trigger": "EditorApplication.playmodeStateChanged", "contents": "EditorApplication.playmodeStateChanged" },
		{ "trigger": "EditorApplication.Step()", "contents": "EditorApplication.Step();" },
		{ "trigger": "EditorApplication.OpenProject(projectPath, params args)", "contents": "EditorApplication.OpenProject(${1:String projectPath}, ${2:string[] params args});" },
		{ "trigger": "EditorApplication.delayCall", "contents": "EditorApplication.delayCall" },
		{ "trigger": "EditorApplication.hierarchyWindowChanged", "contents": "EditorApplication.hierarchyWindowChanged" },
		{ "trigger": "EditorApplication.modifierKeysChanged", "contents": "EditorApplication.modifierKeysChanged" },
		{ "trigger": "EditorApplication.isPlayingOrWillChangePlaymode", "contents": "EditorApplication.isPlayingOrWillChangePlaymode" },
		{ "trigger": "EditorApplication.HierarchyWindowItemCallback(instanceID, selectionRect)", "contents": "EditorApplication.HierarchyWindowItemCallback(${1:int instanceID}, ${2:Rect selectionRect});" },
		{ "trigger": "EditorApplication.SaveAssets()", "contents": "EditorApplication.SaveAssets();" },
		{ "trigger": "EditorApplication.update", "contents": "EditorApplication.update" },
		{ "trigger": "EditorApplication.isUpdating", "contents": "EditorApplication.isUpdating" },
		{ "trigger": "EditorApplication.projectWindowChanged", "contents": "EditorApplication.projectWindowChanged" },
		{ "trigger": "EditorApplication.isCompiling", "contents": "EditorApplication.isCompiling" },
		{ "trigger": "EditorApplication.isPlaying", "contents": "EditorApplication.isPlaying" },
		{ "trigger": "EditorApplication.SaveCurrentSceneIfUserWantsTo()", "contents": "EditorApplication.SaveCurrentSceneIfUserWantsTo();" },
		{ "trigger": "EditorApplication.UnlockReloadAssemblies()", "contents": "EditorApplication.UnlockReloadAssemblies();" },
		{ "trigger": "EditorApplication.currentScene", "contents": "EditorApplication.currentScene" },
		{ "trigger": "EditorApplication.ProjectWindowItemCallback(guid, selectionRect)", "contents": "EditorApplication.ProjectWindowItemCallback(${1:String guid}, ${2:Rect selectionRect});" },
		{ "trigger": "EditorApplication.RepaintProjectWindow()", "contents": "EditorApplication.RepaintProjectWindow();" },
		{ "trigger": "EditorApplication.isPaused", "contents": "EditorApplication.isPaused" },
		{ "trigger": "EditorApplication.ExecuteMenuItem(menuItemPath)", "contents": "EditorApplication.ExecuteMenuItem(${1:String menuItemPath});" },
		{ "trigger": "EditorApplication.RepaintHierarchyWindow()", "contents": "EditorApplication.RepaintHierarchyWindow();" },
		{ "trigger": "EditorApplication.OpenSceneAdditive(path)", "contents": "EditorApplication.OpenSceneAdditive(${1:String path});" },
		{ "trigger": "EditorApplication.LockReloadAssemblies()", "contents": "EditorApplication.LockReloadAssemblies();" },
		{ "trigger": "MonoImporter", "contents": "MonoImporter" },
		{ "trigger": "MonoImporter.SetDefaultReferences(name, target)", "contents": "MonoImporter.SetDefaultReferences(${1:string[] name}, ${2:Object[] target});" },
		{ "trigger": "MonoImporter.GetExecutionOrder(script)", "contents": "MonoImporter.GetExecutionOrder(${1:MonoScript script});" },
		{ "trigger": "MonoImporter.GetDefaultReference(name)", "contents": "MonoImporter.GetDefaultReference(${1:String name});" },
		{ "trigger": "MonoImporter.GetScript()", "contents": "MonoImporter.GetScript();" },
		{ "trigger": "MonoImporter.GetAllRuntimeMonoScripts()", "contents": "MonoImporter.GetAllRuntimeMonoScripts();" },
		{ "trigger": "MonoImporter.SetExecutionOrder(script, order)", "contents": "MonoImporter.SetExecutionOrder(${1:MonoScript script}, ${2:int order});" },
		{ "trigger": "EditorBuildSettings", "contents": "EditorBuildSettings" },
		{ "trigger": "EditorBuildSettings.scenes", "contents": "EditorBuildSettings.scenes" },
		{ "trigger": "AnimationUtility", "contents": "AnimationUtility" },
		{ "trigger": "AnimationUtility.GetEditorCurve(clip, relativePath, type, propertyName)", "contents": "AnimationUtility.GetEditorCurve(${1:AnimationClip clip}, ${2:String relativePath}, ${3:Type type}, ${4:String propertyName});" },
		{ "trigger": "AnimationUtility.IsValidPolynomialCurve(curve)", "contents": "AnimationUtility.IsValidPolynomialCurve(${1:AnimationCurve curve});" },
		{ "trigger": "AnimationUtility.GetAnimatableObjects(go)", "contents": "AnimationUtility.GetAnimatableObjects(${1:GameObject go});" },
		{ "trigger": "AnimationUtility.GetAnimationEvents(clip)", "contents": "AnimationUtility.GetAnimationEvents(${1:AnimationClip clip});" },
		{ "trigger": "AnimationUtility.GetFloatValue(root, relativePath, type, propertyName, out data)", "contents": "AnimationUtility.GetFloatValue(${1:GameObject root}, ${2:String relativePath}, ${3:Type type}, ${4:String propertyName}, ${5:float out data});" },
		{ "trigger": "AnimationUtility.GetAllCurves(clip, includeCurveData)", "contents": "AnimationUtility.GetAllCurves(${1:AnimationClip clip}, ${2:boolean includeCurveData = true});" },
		{ "trigger": "AnimationUtility.StopAnimationMode()", "contents": "AnimationUtility.StopAnimationMode();" },
		{ "trigger": "AnimationUtility.InAnimationMode()", "contents": "AnimationUtility.InAnimationMode();" },
		{ "trigger": "AnimationUtility.ConstrainToPolynomialCurve(curve)", "contents": "AnimationUtility.ConstrainToPolynomialCurve(${1:AnimationCurve curve});" },
		{ "trigger": "AnimationUtility.GetAnimatableProperties(go)", "contents": "AnimationUtility.GetAnimatableProperties(${1:GameObject go});" },
		{ "trigger": "AnimationUtility.SetEditorCurve(clip, relativePath, type, propertyName, curve)", "contents": "AnimationUtility.SetEditorCurve(${1:AnimationClip clip}, ${2:String relativePath}, ${3:Type type}, ${4:String propertyName}, ${5:AnimationCurve curve});" },
		{ "trigger": "AnimationUtility.GetAnimatablePropertiesForObject(animatedObject, gameObject)", "contents": "AnimationUtility.GetAnimatablePropertiesForObject(${1:Object animatedObject}, ${2:GameObject gameObject});" },
		{ "trigger": "AnimationUtility.StartAnimationMode(objects)", "contents": "AnimationUtility.StartAnimationMode(${1:Object[] objects});" },
		{ "trigger": "AnimationUtility.SetAnimationClips(component, clips)", "contents": "AnimationUtility.SetAnimationClips(${1:Animation component}, ${2:AnimationClip[] clips});" },
		{ "trigger": "AnimationUtility.SetAnimationEvents(clip, events)", "contents": "AnimationUtility.SetAnimationEvents(${1:AnimationClip clip}, ${2:AnimationEvent[] events});" },
		{ "trigger": "AnimationUtility.CalculateTransformPath(targetTransform, root)", "contents": "AnimationUtility.CalculateTransformPath(${1:Transform targetTransform}, ${2:Transform root});" },
		{ "trigger": "AnimationUtility.GetAnimationClips(component)", "contents": "AnimationUtility.GetAnimationClips(${1:Animation component});" },
		{ "trigger": "ScriptableWizard", "contents": "ScriptableWizard" },
		{ "trigger": "ScriptableWizard.OnWizardCreate()", "contents": "ScriptableWizard.OnWizardCreate();" },
		{ "trigger": "ScriptableWizard.errorString", "contents": "ScriptableWizard.errorString" },
		{ "trigger": "ScriptableWizard.helpString", "contents": "ScriptableWizard.helpString" },
		{ "trigger": "ScriptableWizard.isValid", "contents": "ScriptableWizard.isValid" },
		{ "trigger": "ScriptableWizard.OnWizardOtherButton()", "contents": "ScriptableWizard.OnWizardOtherButton();" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title)", "contents": "ScriptableWizard.DisplayWizard(${1:String title});" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:String title}, ${2:String createButtonName});" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:String title}, ${2:String createButtonName}, ${3:String otherButtonName});" },
		{ "trigger": "ScriptableWizard.DisplayWizard(title, klass, createButtonName, otherButtonName)", "contents": "ScriptableWizard.DisplayWizard(${1:String title}, ${2:System.Type klass}, ${3:String createButtonName = \"Create\"}, ${4:String otherButtonName = \"\"});" },
		{ "trigger": "ScriptableWizard.OnDrawGizmos()", "contents": "ScriptableWizard.OnDrawGizmos();" },
		{ "trigger": "ScriptableWizard.OnWizardUpdate()", "contents": "ScriptableWizard.OnWizardUpdate();" },
		{ "trigger": "Handles", "contents": "Handles" },
		{ "trigger": "Handles.ConeCap(controlID, position, rotation, size)", "contents": "Handles.ConeCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.currentCamera", "contents": "Handles.currentCamera" },
		{ "trigger": "Handles.BeginGUI()", "contents": "Handles.BeginGUI();" },
		{ "trigger": "Handles.BeginGUI(position)", "contents": "Handles.BeginGUI(${1:Rect position});" },
		{ "trigger": "Handles.Slider2D(id, handlePos, offset, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 offset}, ${4:Vector3 handleDir}, ${5:Vector3 slideDir1}, ${6:Vector3 slideDir2}, ${7:float handleSize}, ${8:DrawCapFunction drawFunc}, ${9:Vector2 snap}, ${10:boolean drawHelper = false});" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:DrawCapFunction drawFunc}, ${7:Vector2 snap}, ${8:boolean drawHelper = false});" },
		{ "trigger": "Handles.Slider2D(id, handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:int id}, ${2:Vector3 handlePos}, ${3:Vector3 handleDir}, ${4:Vector3 slideDir1}, ${5:Vector3 slideDir2}, ${6:float handleSize}, ${7:DrawCapFunction drawFunc}, ${8:Vector2 snap}, ${9:boolean drawHelper = false});" },
		{ "trigger": "Handles.Slider2D(handlePos, handleDir, slideDir1, slideDir2, handleSize, drawFunc, snap, drawHelper)", "contents": "Handles.Slider2D(${1:Vector3 handlePos}, ${2:Vector3 handleDir}, ${3:Vector3 slideDir1}, ${4:Vector3 slideDir2}, ${5:float handleSize}, ${6:DrawCapFunction drawFunc}, ${7:float snap}, ${8:boolean drawHelper = false});" },
		{ "trigger": "Handles.SelectionFrame(controlID, position, rotation, size)", "contents": "Handles.SelectionFrame(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.ScaleSlider(scale, position, direction, rotation, size, snap)", "contents": "Handles.ScaleSlider(${1:float scale}, ${2:Vector3 position}, ${3:Vector3 direction}, ${4:Quaternion rotation}, ${5:float size}, ${6:float snap});" },
		{ "trigger": "Handles.Label(position, text)", "contents": "Handles.Label(${1:Vector3 position}, ${2:String text});" },
		{ "trigger": "Handles.Label(position, image)", "contents": "Handles.Label(${1:Vector3 position}, ${2:Texture image});" },
		{ "trigger": "Handles.Label(position, content)", "contents": "Handles.Label(${1:Vector3 position}, ${2:GUIContent content});" },
		{ "trigger": "Handles.Label(position, text, style)", "contents": "Handles.Label(${1:Vector3 position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "Handles.Label(position, content, style)", "contents": "Handles.Label(${1:Vector3 position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "Handles.DrawSolidRectangleWithOutline(verts, faceColor, outlineColor)", "contents": "Handles.DrawSolidRectangleWithOutline(${1:Vector3[] verts}, ${2:Color faceColor}, ${3:Color outlineColor});" },
		{ "trigger": "Handles.ArrowCap(controlID, position, rotation, size)", "contents": "Handles.ArrowCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.SnapValue(val, snap)", "contents": "Handles.SnapValue(${1:float val}, ${2:float snap});" },
		{ "trigger": "Handles.ClearCamera(position, camera)", "contents": "Handles.ClearCamera(${1:Rect position}, ${2:Camera camera});" },
		{ "trigger": "Handles.DotCap(controlID, position, rotation, size)", "contents": "Handles.DotCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.matrix", "contents": "Handles.matrix" },
		{ "trigger": "Handles.EndGUI()", "contents": "Handles.EndGUI();" },
		{ "trigger": "Handles.Slider(position, direction)", "contents": "Handles.Slider(${1:Vector3 position}, ${2:Vector3 direction});" },
		{ "trigger": "Handles.Slider(position, direction, size, drawFunc, snap)", "contents": "Handles.Slider(${1:Vector3 position}, ${2:Vector3 direction}, ${3:float size}, ${4:DrawCapFunction drawFunc}, ${5:float snap});" },
		{ "trigger": "Handles.DrawLine(p1, p2)", "contents": "Handles.DrawLine(${1:Vector3 p1}, ${2:Vector3 p2});" },
		{ "trigger": "Handles.color", "contents": "Handles.color" },
		{ "trigger": "Handles.SetCamera(camera)", "contents": "Handles.SetCamera(${1:Camera camera});" },
		{ "trigger": "Handles.SetCamera(position, camera)", "contents": "Handles.SetCamera(${1:Rect position}, ${2:Camera camera});" },
		{ "trigger": "Handles.DrawCapFunction(controlID, position, rotation, size)", "contents": "Handles.DrawCapFunction(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.CubeCap(controlID, position, rotation, size)", "contents": "Handles.CubeCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.DrawSolidArc(center, normal, from, angle, radius)", "contents": "Handles.DrawSolidArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius});" },
		{ "trigger": "Handles.SphereCap(controlID, position, rotation, size)", "contents": "Handles.SphereCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.DrawCamera(position, camera, drawMode)", "contents": "Handles.DrawCamera(${1:Rect position}, ${2:Camera camera}, ${3:DrawCameraMode drawMode = DrawCameraMode.Normal});" },
		{ "trigger": "Handles.FreeRotateHandle(rotation, position, size)", "contents": "Handles.FreeRotateHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float size});" },
		{ "trigger": "Handles.Button(position, direction, size, pickSize, capFunc)", "contents": "Handles.Button(${1:Vector3 position}, ${2:Quaternion direction}, ${3:float size}, ${4:float pickSize}, ${5:DrawCapFunction capFunc});" },
		{ "trigger": "Handles.DrawPolyLine(params points)", "contents": "Handles.DrawPolyLine(${1:Vector3[] params points});" },
		{ "trigger": "Handles.lighting", "contents": "Handles.lighting" },
		{ "trigger": "Handles.CircleCap(controlID, position, rotation, size)", "contents": "Handles.CircleCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.ScaleHandle(scale, position, rotation, size)", "contents": "Handles.ScaleHandle(${1:Vector3 scale}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.DrawBezier(startPosition, endPosition, startTangent, endTangent, color, texture, width)", "contents": "Handles.DrawBezier(${1:Vector3 startPosition}, ${2:Vector3 endPosition}, ${3:Vector3 startTangent}, ${4:Vector3 endTangent}, ${5:Color color}, ${6:Texture2D texture}, ${7:float width});" },
		{ "trigger": "Handles.RectangleCap(controlID, position, rotation, size)", "contents": "Handles.RectangleCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.DrawWireArc(center, normal, from, angle, radius)", "contents": "Handles.DrawWireArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius});" },
		{ "trigger": "Handles.PositionHandle(position, rotation)", "contents": "Handles.PositionHandle(${1:Vector3 position}, ${2:Quaternion rotation});" },
		{ "trigger": "Handles.DrawWireDisc(center, normal, radius)", "contents": "Handles.DrawWireDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius});" },
		{ "trigger": "Handles.ScaleValueHandle(value, position, rotation, size, capFunc, snap)", "contents": "Handles.ScaleValueHandle(${1:float value}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size}, ${5:DrawCapFunction capFunc}, ${6:float snap});" },
		{ "trigger": "Handles.FreeMoveHandle(position, rotation, size, snap, capFunc)", "contents": "Handles.FreeMoveHandle(${1:Vector3 position}, ${2:Quaternion rotation}, ${3:float size}, ${4:Vector3 snap}, ${5:DrawCapFunction capFunc});" },
		{ "trigger": "Handles.Disc(rotation, position, axis, size, cutoffPlane, snap)", "contents": "Handles.Disc(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:Vector3 axis}, ${4:float size}, ${5:boolean cutoffPlane}, ${6:float snap});" },
		{ "trigger": "Handles.RotationHandle(rotation, position)", "contents": "Handles.RotationHandle(${1:Quaternion rotation}, ${2:Vector3 position});" },
		{ "trigger": "Handles.DrawSolidDisc(center, normal, radius)", "contents": "Handles.DrawSolidDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius});" },
		{ "trigger": "Handles.CylinderCap(controlID, position, rotation, size)", "contents": "Handles.CylinderCap(${1:int controlID}, ${2:Vector3 position}, ${3:Quaternion rotation}, ${4:float size});" },
		{ "trigger": "Handles.DrawAAPolyLine(params points)", "contents": "Handles.DrawAAPolyLine(${1:Vector3[] params points});" },
		{ "trigger": "Handles.DrawAAPolyLine(width, params points)", "contents": "Handles.DrawAAPolyLine(${1:float width}, ${2:Vector3[] params points});" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, params points)", "contents": "Handles.DrawAAPolyLine(${1:Texture2D lineTex}, ${2:Vector3[] params points});" },
		{ "trigger": "Handles.DrawAAPolyLine(width, actualNumberOfPoints, params points)", "contents": "Handles.DrawAAPolyLine(${1:float width}, ${2:int actualNumberOfPoints}, ${3:Vector3[] params points});" },
		{ "trigger": "Handles.DrawAAPolyLine(lineTex, width, params points)", "contents": "Handles.DrawAAPolyLine(${1:Texture2D lineTex}, ${2:float width}, ${3:Vector3[] params points});" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius, handlesOnly)", "contents": "Handles.RadiusHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float radius}, ${4:boolean handlesOnly});" },
		{ "trigger": "Handles.RadiusHandle(rotation, position, radius)", "contents": "Handles.RadiusHandle(${1:Quaternion rotation}, ${2:Vector3 position}, ${3:float radius});" },
		{ "trigger": "EditorGUIUtility", "contents": "EditorGUIUtility" },
		{ "trigger": "EditorGUIUtility.GetBuiltinSkin(skin)", "contents": "EditorGUIUtility.GetBuiltinSkin(${1:EditorSkin skin});" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, property, property2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:Rect position}, ${2:SerializedProperty property}, ${3:SerializedProperty property2}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges});" },
		{ "trigger": "EditorGUIUtility.DrawRegionSwatch(position, curve, curve2, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawRegionSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:AnimationCurve curve2}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges});" },
		{ "trigger": "EditorGUIUtility.whiteTexture", "contents": "EditorGUIUtility.whiteTexture" },
		{ "trigger": "EditorGUIUtility.RGBToHSV(rgbColor, out H, out S, out V)", "contents": "EditorGUIUtility.RGBToHSV(${1:Color rgbColor}, ${2:float out H}, ${3:float out S}, ${4:float out V});" },
		{ "trigger": "EditorGUIUtility.LookLikeControls(labelWidth, fieldWidth)", "contents": "EditorGUIUtility.LookLikeControls(${1:float labelWidth = 0}, ${2:float fieldWidth = 50});" },
		{ "trigger": "EditorGUIUtility.CommandEvent(commandName)", "contents": "EditorGUIUtility.CommandEvent(${1:String commandName});" },
		{ "trigger": "EditorGUIUtility.HasObjectThumbnail(objType)", "contents": "EditorGUIUtility.HasObjectThumbnail(${1:Type objType});" },
		{ "trigger": "EditorGUIUtility.systemCopyBuffer", "contents": "EditorGUIUtility.systemCopyBuffer" },
		{ "trigger": "EditorGUIUtility.FindTexture(name)", "contents": "EditorGUIUtility.FindTexture(${1:String name});" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:SerializedProperty property}, ${4:Color color}, ${5:Color bgColor});" },
		{ "trigger": "EditorGUIUtility.DrawCurveSwatch(position, curve, property, color, bgColor, curveRanges)", "contents": "EditorGUIUtility.DrawCurveSwatch(${1:Rect position}, ${2:AnimationCurve curve}, ${3:SerializedProperty property}, ${4:Color color}, ${5:Color bgColor}, ${6:Rect curveRanges});" },
		{ "trigger": "EditorGUIUtility.SetIconSize(size)", "contents": "EditorGUIUtility.SetIconSize(${1:Vector2 size});" },
		{ "trigger": "EditorGUIUtility.DrawColorSwatch(position, color)", "contents": "EditorGUIUtility.DrawColorSwatch(${1:Rect position}, ${2:Color color});" },
		{ "trigger": "EditorGUIUtility.ObjectContent(obj, type)", "contents": "EditorGUIUtility.ObjectContent(${1:Object obj}, ${2:System.Type type});" },
		{ "trigger": "EditorGUIUtility.HSVToRGB(H, S, V)", "contents": "EditorGUIUtility.HSVToRGB(${1:float H}, ${2:float S}, ${3:float V});" },
		{ "trigger": "EditorGUIUtility.QueueGameViewInputEvent(evt)", "contents": "EditorGUIUtility.QueueGameViewInputEvent(${1:Event evt});" },
		{ "trigger": "EditorGUIUtility.PingObject(obj)", "contents": "EditorGUIUtility.PingObject(${1:Object obj});" },
		{ "trigger": "EditorGUIUtility.PingObject(targetInstanceID)", "contents": "EditorGUIUtility.PingObject(${1:int targetInstanceID});" },
		{ "trigger": "EditorGUIUtility.Load(path)", "contents": "EditorGUIUtility.Load(${1:String path});" },
		{ "trigger": "EditorGUIUtility.GetIconSize()", "contents": "EditorGUIUtility.GetIconSize();" },
		{ "trigger": "EditorGUIUtility.RenderGameViewCameras(cameraRect, gizmos, gui)", "contents": "EditorGUIUtility.RenderGameViewCameras(${1:Rect cameraRect}, ${2:boolean gizmos}, ${3:boolean gui});" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse)", "contents": "EditorGUIUtility.AddCursorRect(${1:Rect position}, ${2:MouseCursor mouse});" },
		{ "trigger": "EditorGUIUtility.AddCursorRect(position, mouse, controlID)", "contents": "EditorGUIUtility.AddCursorRect(${1:Rect position}, ${2:MouseCursor mouse}, ${3:int controlID});" },
		{ "trigger": "EditorGUIUtility.LookLikeInspector()", "contents": "EditorGUIUtility.LookLikeInspector();" },
		{ "trigger": "EditorGUIUtility.LoadRequired(path)", "contents": "EditorGUIUtility.LoadRequired(${1:String path});" },
		{ "trigger": "EditorGUIUtility.isProSkin", "contents": "EditorGUIUtility.isProSkin" },
		{ "trigger": "Editor", "contents": "Editor" },
		{ "trigger": "Editor.Repaint()", "contents": "Editor.Repaint();" },
		{ "trigger": "Editor.OnInteractivePreviewGUI(r, background)", "contents": "Editor.OnInteractivePreviewGUI(${1:Rect r}, ${2:GUIStyle background});" },
		{ "trigger": "Editor.target", "contents": "Editor.target" },
		{ "trigger": "Editor.HasPreviewGUI()", "contents": "Editor.HasPreviewGUI();" },
		{ "trigger": "Editor.OnPreviewSettings()", "contents": "Editor.OnPreviewSettings();" },
		{ "trigger": "Editor.OnSceneGUI()", "contents": "Editor.OnSceneGUI();" },
		{ "trigger": "Editor.RenderStaticPreview(assetPath, subAssets, width, height)", "contents": "Editor.RenderStaticPreview(${1:String assetPath}, ${2:Object[] subAssets}, ${3:int width}, ${4:int height});" },
		{ "trigger": "Editor.GetInfoString()", "contents": "Editor.GetInfoString();" },
		{ "trigger": "Editor.OnInspectorGUI()", "contents": "Editor.OnInspectorGUI();" },
		{ "trigger": "Editor.CreateEditor(obj, editorType)", "contents": "Editor.CreateEditor(${1:Object obj}, ${2:Type editorType = null});" },
		{ "trigger": "Editor.CreateEditor(objects, editorType)", "contents": "Editor.CreateEditor(${1:Object[] objects}, ${2:Type editorType = null});" },
		{ "trigger": "Editor.DrawDefaultInspector()", "contents": "Editor.DrawDefaultInspector();" },
		{ "trigger": "Editor.OnPreviewGUI(r, background)", "contents": "Editor.OnPreviewGUI(${1:Rect r}, ${2:GUIStyle background});" },
		{ "trigger": "Editor.serializedObject", "contents": "Editor.serializedObject" },
		{ "trigger": "Editor.targets", "contents": "Editor.targets" },
		{ "trigger": "Editor.GetPreviewTitle()", "contents": "Editor.GetPreviewTitle();" },
		{ "trigger": "AssetStoreToolUtils", "contents": "AssetStoreToolUtils" },
		{ "trigger": "AssetStoreToolUtils.BuildAssetStoreAssetBundle(targetObject, targetPath)", "contents": "AssetStoreToolUtils.BuildAssetStoreAssetBundle(${1:Object targetObject}, ${2:String targetPath});" },
		{ "trigger": "AssetStore", "contents": "AssetStore" },
		{ "trigger": "AssetStore.Open(assetStoreURL)", "contents": "AssetStore.Open(${1:String assetStoreURL});" },
		{ "trigger": "EditorWindow", "contents": "EditorWindow" },
		{ "trigger": "EditorWindow.autoRepaintOnSceneChange", "contents": "EditorWindow.autoRepaintOnSceneChange" },
		{ "trigger": "EditorWindow.mouseOverWindow", "contents": "EditorWindow.mouseOverWindow" },
		{ "trigger": "EditorWindow.focusedWindow", "contents": "EditorWindow.focusedWindow" },
		{ "trigger": "EditorWindow.RemoveNotification()", "contents": "EditorWindow.RemoveNotification();" },
		{ "trigger": "EditorWindow.maxSize", "contents": "EditorWindow.maxSize" },
		{ "trigger": "EditorWindow.OnSelectionChange()", "contents": "EditorWindow.OnSelectionChange();" },
		{ "trigger": "EditorWindow.ShowAuxWindow()", "contents": "EditorWindow.ShowAuxWindow();" },
		{ "trigger": "EditorWindow.ShowUtility()", "contents": "EditorWindow.ShowUtility();" },
		{ "trigger": "EditorWindow.SendEvent(e)", "contents": "EditorWindow.SendEvent(${1:Event e});" },
		{ "trigger": "EditorWindow.Update()", "contents": "EditorWindow.Update();" },
		{ "trigger": "EditorWindow.minSize", "contents": "EditorWindow.minSize" },
		{ "trigger": "EditorWindow.OnGUI()", "contents": "EditorWindow.OnGUI();" },
		{ "trigger": "EditorWindow.ShowTab()", "contents": "EditorWindow.ShowTab();" },
		{ "trigger": "EditorWindow.ShowNotification(notification)", "contents": "EditorWindow.ShowNotification(${1:GUIContent notification});" },
		{ "trigger": "EditorWindow.GetWindow(t, utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:System.Type t}, ${2:boolean utility = false}, ${3:String title = null}, ${4:boolean focus = true});" },
		{ "trigger": "EditorWindow.GetWindow()", "contents": "EditorWindow.GetWindow();" },
		{ "trigger": "EditorWindow.GetWindow(utility)", "contents": "EditorWindow.GetWindow(${1:boolean utility});" },
		{ "trigger": "EditorWindow.GetWindow(utility, title)", "contents": "EditorWindow.GetWindow(${1:boolean utility}, ${2:String title});" },
		{ "trigger": "EditorWindow.GetWindow(title)", "contents": "EditorWindow.GetWindow(${1:String title});" },
		{ "trigger": "EditorWindow.GetWindow(title, focus)", "contents": "EditorWindow.GetWindow(${1:String title}, ${2:boolean focus});" },
		{ "trigger": "EditorWindow.GetWindow(utility, title, focus)", "contents": "EditorWindow.GetWindow(${1:boolean utility}, ${2:String title}, ${3:boolean focus});" },
		{ "trigger": "EditorWindow.GetWindow(params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:System.Type[] params desiredDockNextTo});" },
		{ "trigger": "EditorWindow.GetWindow(title, params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:String title}, ${2:System.Type[] params desiredDockNextTo});" },
		{ "trigger": "EditorWindow.GetWindow(title, focus, params desiredDockNextTo)", "contents": "EditorWindow.GetWindow(${1:String title}, ${2:boolean focus}, ${3:System.Type[] params desiredDockNextTo});" },
		{ "trigger": "EditorWindow.ShowPopup()", "contents": "EditorWindow.ShowPopup();" },
		{ "trigger": "EditorWindow.OnDestroy()", "contents": "EditorWindow.OnDestroy();" },
		{ "trigger": "EditorWindow.ShowAsDropDown(buttonRect, windowSize)", "contents": "EditorWindow.ShowAsDropDown(${1:Rect buttonRect}, ${2:Vector2 windowSize});" },
		{ "trigger": "EditorWindow.Repaint()", "contents": "EditorWindow.Repaint();" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen(t)", "contents": "EditorWindow.FocusWindowIfItsOpen(${1:System.Type t});" },
		{ "trigger": "EditorWindow.FocusWindowIfItsOpen()", "contents": "EditorWindow.FocusWindowIfItsOpen();" },
		{ "trigger": "EditorWindow.BeginWindows()", "contents": "EditorWindow.BeginWindows();" },
		{ "trigger": "EditorWindow.OnHierarchyChange()", "contents": "EditorWindow.OnHierarchyChange();" },
		{ "trigger": "EditorWindow.position", "contents": "EditorWindow.position" },
		{ "trigger": "EditorWindow.OnLostFocus()", "contents": "EditorWindow.OnLostFocus();" },
		{ "trigger": "EditorWindow.wantsMouseMove", "contents": "EditorWindow.wantsMouseMove" },
		{ "trigger": "EditorWindow.Show(immediateDisplay)", "contents": "EditorWindow.Show(${1:boolean immediateDisplay = false});" },
		{ "trigger": "EditorWindow.title", "contents": "EditorWindow.title" },
		{ "trigger": "EditorWindow.Focus()", "contents": "EditorWindow.Focus();" },
		{ "trigger": "EditorWindow.OnInspectorUpdate()", "contents": "EditorWindow.OnInspectorUpdate();" },
		{ "trigger": "EditorWindow.GetWindowWithRect(t, rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:System.Type t}, ${2:Rect rect}, ${3:boolean utility = false}, ${4:String title = null});" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect});" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:boolean utility});" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:boolean utility}, ${3:String title});" },
		{ "trigger": "EditorWindow.GetWindowWithRect(rect, utility, title, focus)", "contents": "EditorWindow.GetWindowWithRect(${1:Rect rect}, ${2:boolean utility}, ${3:String title}, ${4:boolean focus});" },
		{ "trigger": "EditorWindow.EndWindows()", "contents": "EditorWindow.EndWindows();" },
		{ "trigger": "EditorWindow.Close()", "contents": "EditorWindow.Close();" },
		{ "trigger": "EditorWindow.OnFocus()", "contents": "EditorWindow.OnFocus();" },
		{ "trigger": "EditorWindow.OnProjectChange()", "contents": "EditorWindow.OnProjectChange();" },
		{ "trigger": "DragAndDrop", "contents": "DragAndDrop" },
		{ "trigger": "DragAndDrop.paths", "contents": "DragAndDrop.paths" },
		{ "trigger": "DragAndDrop.StartDrag(title)", "contents": "DragAndDrop.StartDrag(${1:String title});" },
		{ "trigger": "DragAndDrop.SetGenericData(type, data)", "contents": "DragAndDrop.SetGenericData(${1:String type}, ${2:object data});" },
		{ "trigger": "DragAndDrop.AcceptDrag()", "contents": "DragAndDrop.AcceptDrag();" },
		{ "trigger": "DragAndDrop.PrepareStartDrag()", "contents": "DragAndDrop.PrepareStartDrag();" },
		{ "trigger": "DragAndDrop.objectReferences", "contents": "DragAndDrop.objectReferences" },
		{ "trigger": "DragAndDrop.activeControlID", "contents": "DragAndDrop.activeControlID" },
		{ "trigger": "DragAndDrop.visualMode", "contents": "DragAndDrop.visualMode" },
		{ "trigger": "DragAndDrop.GetGenericData(type)", "contents": "DragAndDrop.GetGenericData(${1:String type});" },
		{ "trigger": "AssetImporter", "contents": "AssetImporter" },
		{ "trigger": "AssetImporter.userData", "contents": "AssetImporter.userData" },
		{ "trigger": "AssetImporter.assetPath", "contents": "AssetImporter.assetPath" },
		{ "trigger": "AssetImporter.GetAtPath(path)", "contents": "AssetImporter.GetAtPath(${1:String path});" },
		{ "trigger": "Lightmapping", "contents": "Lightmapping" },
		{ "trigger": "Lightmapping.BakeSelectedAsync()", "contents": "Lightmapping.BakeSelectedAsync();" },
		{ "trigger": "Lightmapping.isRunning", "contents": "Lightmapping.isRunning" },
		{ "trigger": "Lightmapping.BakeLightProbesOnly()", "contents": "Lightmapping.BakeLightProbesOnly();" },
		{ "trigger": "Lightmapping.Clear()", "contents": "Lightmapping.Clear();" },
		{ "trigger": "Lightmapping.Cancel()", "contents": "Lightmapping.Cancel();" },
		{ "trigger": "Lightmapping.BakeAsync()", "contents": "Lightmapping.BakeAsync();" },
		{ "trigger": "Lightmapping.BakeSelected()", "contents": "Lightmapping.BakeSelected();" },
		{ "trigger": "Lightmapping.BakeLightProbesOnlyAsync()", "contents": "Lightmapping.BakeLightProbesOnlyAsync();" },
		{ "trigger": "Lightmapping.Bake()", "contents": "Lightmapping.Bake();" },
		{ "trigger": "Lightmapping.Tetrahedralize(positions, out outIndices, out outPositions)", "contents": "Lightmapping.Tetrahedralize(${1:Vector3[] positions}, ${2:int[] out outIndices}, ${3:Vector3[] out outPositions});" },
		{ "trigger": "UnwrapParam", "contents": "UnwrapParam" },
		{ "trigger": "UnwrapParam.hardAngle", "contents": "UnwrapParam.hardAngle" },
		{ "trigger": "UnwrapParam.angleError", "contents": "UnwrapParam.angleError" },
		{ "trigger": "UnwrapParam.SetDefaults(out param)", "contents": "UnwrapParam.SetDefaults(${1:UnwrapParam out param});" },
		{ "trigger": "UnwrapParam.areaError", "contents": "UnwrapParam.areaError" },
		{ "trigger": "UnwrapParam.packMargin", "contents": "UnwrapParam.packMargin" },
		{ "trigger": "EditorPrefs", "contents": "EditorPrefs" },
		{ "trigger": "EditorPrefs.GetFloat(key, defaultValue)", "contents": "EditorPrefs.GetFloat(${1:String key}, ${2:float defaultValue = 0.0F});" },
		{ "trigger": "EditorPrefs.SetFloat(key, value)", "contents": "EditorPrefs.SetFloat(${1:String key}, ${2:float value});" },
		{ "trigger": "EditorPrefs.GetString(key, defaultValue)", "contents": "EditorPrefs.GetString(${1:String key}, ${2:String defaultValue = \"\"});" },
		{ "trigger": "EditorPrefs.SetString(key, value)", "contents": "EditorPrefs.SetString(${1:String key}, ${2:String value});" },
		{ "trigger": "EditorPrefs.GetBool(key, defaultValue)", "contents": "EditorPrefs.GetBool(${1:String key}, ${2:boolean defaultValue = false});" },
		{ "trigger": "EditorPrefs.SetInt(key, value)", "contents": "EditorPrefs.SetInt(${1:String key}, ${2:int value});" },
		{ "trigger": "EditorPrefs.GetInt(key, defaultValue)", "contents": "EditorPrefs.GetInt(${1:String key}, ${2:int defaultValue = 0});" },
		{ "trigger": "EditorPrefs.DeleteAll()", "contents": "EditorPrefs.DeleteAll();" },
		{ "trigger": "EditorPrefs.SetBool(key, value)", "contents": "EditorPrefs.SetBool(${1:String key}, ${2:boolean value});" },
		{ "trigger": "EditorPrefs.HasKey(key)", "contents": "EditorPrefs.HasKey(${1:String key});" },
		{ "trigger": "EditorPrefs.DeleteKey(key)", "contents": "EditorPrefs.DeleteKey(${1:String key});" },
		{ "trigger": "StaticOcclusionCulling", "contents": "StaticOcclusionCulling" },
		{ "trigger": "StaticOcclusionCulling.staticObjectDataSize", "contents": "StaticOcclusionCulling.staticObjectDataSize" },
		{ "trigger": "StaticOcclusionCulling.isRunning", "contents": "StaticOcclusionCulling.isRunning" },
		{ "trigger": "StaticOcclusionCulling.doesSceneHaveManualPortals", "contents": "StaticOcclusionCulling.doesSceneHaveManualPortals" },
		{ "trigger": "StaticOcclusionCulling.Clear()", "contents": "StaticOcclusionCulling.Clear();" },
		{ "trigger": "StaticOcclusionCulling.umbraDataSize", "contents": "StaticOcclusionCulling.umbraDataSize" },
		{ "trigger": "StaticOcclusionCulling.dynamicObjectDataSize", "contents": "StaticOcclusionCulling.dynamicObjectDataSize" },
		{ "trigger": "StaticOcclusionCulling.GenerateInBackground(viewCellSize, nearClipPlane, farClipPlane, memoryLimit, mode)", "contents": "StaticOcclusionCulling.GenerateInBackground(${1:float viewCellSize}, ${2:float nearClipPlane}, ${3:float farClipPlane}, ${4:int memoryLimit}, ${5:StaticOcclusionCullingMode mode});" },
		{ "trigger": "StaticOcclusionCulling.Cancel()", "contents": "StaticOcclusionCulling.Cancel();" },
		{ "trigger": "StaticOcclusionCulling.Compute(viewCellSize, nearClipPlane, farClipPlane, memoryLimit, mode)", "contents": "StaticOcclusionCulling.Compute(${1:float viewCellSize}, ${2:float nearClipPlane}, ${3:float farClipPlane}, ${4:int memoryLimit}, ${5:StaticOcclusionCullingMode mode});" },
		{ "trigger": "EditorUserBuildSettings", "contents": "EditorUserBuildSettings" },
		{ "trigger": "EditorUserBuildSettings.wiiBuildDebugLevel", "contents": "EditorUserBuildSettings.wiiBuildDebugLevel" },
		{ "trigger": "EditorUserBuildSettings.explicitNullChecks", "contents": "EditorUserBuildSettings.explicitNullChecks" },
		{ "trigger": "EditorUserBuildSettings.xboxRunMethod", "contents": "EditorUserBuildSettings.xboxRunMethod" },
		{ "trigger": "EditorUserBuildSettings.appendProject", "contents": "EditorUserBuildSettings.appendProject" },
		{ "trigger": "EditorUserBuildSettings.webPlayerStreamed", "contents": "EditorUserBuildSettings.webPlayerStreamed" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTarget", "contents": "EditorUserBuildSettings.activeBuildTarget" },
		{ "trigger": "EditorUserBuildSettings.xboxBuildSubtarget", "contents": "EditorUserBuildSettings.xboxBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.GetBuildLocation(target)", "contents": "EditorUserBuildSettings.GetBuildLocation(${1:BuildTarget target});" },
		{ "trigger": "EditorUserBuildSettings.ps3BuildSubtarget", "contents": "EditorUserBuildSettings.ps3BuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.connectProfiler", "contents": "EditorUserBuildSettings.connectProfiler" },
		{ "trigger": "EditorUserBuildSettings.selectedStandaloneTarget", "contents": "EditorUserBuildSettings.selectedStandaloneTarget" },
		{ "trigger": "EditorUserBuildSettings.SetBuildLocation(target, location)", "contents": "EditorUserBuildSettings.SetBuildLocation(${1:BuildTarget target}, ${2:String location});" },
		{ "trigger": "EditorUserBuildSettings.development", "contents": "EditorUserBuildSettings.development" },
		{ "trigger": "EditorUserBuildSettings.wiiBuildSubtarget", "contents": "EditorUserBuildSettings.wiiBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.allowDebugging", "contents": "EditorUserBuildSettings.allowDebugging" },
		{ "trigger": "EditorUserBuildSettings.androidBuildSubtarget", "contents": "EditorUserBuildSettings.androidBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.selectedBuildTargetGroup", "contents": "EditorUserBuildSettings.selectedBuildTargetGroup" },
		{ "trigger": "EditorUserBuildSettings.flashBuildSubtarget", "contents": "EditorUserBuildSettings.flashBuildSubtarget" },
		{ "trigger": "EditorUserBuildSettings.symlinkLibraries", "contents": "EditorUserBuildSettings.symlinkLibraries" },
		{ "trigger": "EditorUserBuildSettings.webPlayerOfflineDeployment", "contents": "EditorUserBuildSettings.webPlayerOfflineDeployment" },
		{ "trigger": "EditorUserBuildSettings.installInBuildFolder", "contents": "EditorUserBuildSettings.installInBuildFolder" },
		{ "trigger": "EditorUserBuildSettings.SwitchActiveBuildTarget(target)", "contents": "EditorUserBuildSettings.SwitchActiveBuildTarget(${1:BuildTarget target});" },
		{ "trigger": "EditorUserBuildSettings.activeBuildTargetChanged", "contents": "EditorUserBuildSettings.activeBuildTargetChanged" },
		{ "trigger": "EditorUserBuildSettings.activeScriptCompilationDefines", "contents": "EditorUserBuildSettings.activeScriptCompilationDefines" },
		{ "trigger": "ArrayUtility", "contents": "ArrayUtility" },
		{ "trigger": "ArrayUtility.Insert(ref array, index, item)", "contents": "ArrayUtility.Insert(${1:T[] ref array}, ${2:int index}, ${3:T item});" },
		{ "trigger": "ArrayUtility.FindIndex(array, match)", "contents": "ArrayUtility.FindIndex(${1:T[] array}, ${2:Predicate<T> match});" },
		{ "trigger": "ArrayUtility.LastIndexOf(array, value)", "contents": "ArrayUtility.LastIndexOf(${1:T[] array}, ${2:T value});" },
		{ "trigger": "ArrayUtility.IndexOf(array, value)", "contents": "ArrayUtility.IndexOf(${1:T[] array}, ${2:T value});" },
		{ "trigger": "ArrayUtility.Clear(ref array)", "contents": "ArrayUtility.Clear(${1:T[] ref array});" },
		{ "trigger": "ArrayUtility.Contains(array, item)", "contents": "ArrayUtility.Contains(${1:T[] array}, ${2:T item});" },
		{ "trigger": "ArrayUtility.Remove(ref array, item)", "contents": "ArrayUtility.Remove(${1:T[] ref array}, ${2:T item});" },
		{ "trigger": "ArrayUtility.ArrayEquals(lhs, rhs)", "contents": "ArrayUtility.ArrayEquals(${1:T[] lhs}, ${2:T[] rhs});" },
		{ "trigger": "ArrayUtility.AddRange(ref array, items)", "contents": "ArrayUtility.AddRange(${1:T[] ref array}, ${2:T[] items});" },
		{ "trigger": "ArrayUtility.Add(ref array, item)", "contents": "ArrayUtility.Add(${1:T[] ref array}, ${2:T item});" },
		{ "trigger": "ArrayUtility.RemoveAt(ref array, index)", "contents": "ArrayUtility.RemoveAt(${1:T[] ref array}, ${2:int index});" },
		{ "trigger": "ArrayUtility.FindAll(array, match)", "contents": "ArrayUtility.FindAll(${1:T[] array}, ${2:Predicate<T> match});" },
		{ "trigger": "ArrayUtility.Find(array, match)", "contents": "ArrayUtility.Find(${1:T[] array}, ${2:Predicate<T> match});" },
		{ "trigger": "EditorUtility", "contents": "EditorUtility" },
		{ "trigger": "EditorUtility.CollectDeepHierarchy(roots)", "contents": "EditorUtility.CollectDeepHierarchy(${1:Object[] roots});" },
		{ "trigger": "EditorUtility.SaveFilePanel(title, directory, defaultName, extension)", "contents": "EditorUtility.SaveFilePanel(${1:String title}, ${2:String directory}, ${3:String defaultName}, ${4:String extension});" },
		{ "trigger": "EditorUtility.ClearProgressBar()", "contents": "EditorUtility.ClearProgressBar();" },
		{ "trigger": "EditorUtility.SaveFilePanelInProject(title, defaultName, extension, message)", "contents": "EditorUtility.SaveFilePanelInProject(${1:String title}, ${2:String defaultName}, ${3:String extension}, ${4:String message});" },
		{ "trigger": "EditorUtility.FormatBytes(bytes)", "contents": "EditorUtility.FormatBytes(${1:int bytes});" },
		{ "trigger": "EditorUtility.InstanceIDToObject(instanceID)", "contents": "EditorUtility.InstanceIDToObject(${1:int instanceID});" },
		{ "trigger": "EditorUtility.DisplayProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayProgressBar(${1:String title}, ${2:String info}, ${3:float progress});" },
		{ "trigger": "EditorUtility.ExtractOggFile(obj, path)", "contents": "EditorUtility.ExtractOggFile(${1:Object obj}, ${2:String path});" },
		{ "trigger": "EditorUtility.DisplayDialogComplex(title, message, ok, cancel, alt)", "contents": "EditorUtility.DisplayDialogComplex(${1:String title}, ${2:String message}, ${3:String ok}, ${4:String cancel}, ${5:String alt});" },
		{ "trigger": "EditorUtility.UnloadUnusedAssetsIgnoreManagedReferences()", "contents": "EditorUtility.UnloadUnusedAssetsIgnoreManagedReferences();" },
		{ "trigger": "EditorUtility.CopySerialized(source, dest)", "contents": "EditorUtility.CopySerialized(${1:Object source}, ${2:Object dest});" },
		{ "trigger": "EditorUtility.FocusProjectWindow()", "contents": "EditorUtility.FocusProjectWindow();" },
		{ "trigger": "EditorUtility.DisplayDialog(title, message, ok, cancel)", "contents": "EditorUtility.DisplayDialog(${1:String title}, ${2:String message}, ${3:String ok}, ${4:String cancel = \"\"});" },
		{ "trigger": "EditorUtility.CreateGameObjectWithHideFlags(name, flags, params components)", "contents": "EditorUtility.CreateGameObjectWithHideFlags(${1:String name}, ${2:HideFlags flags}, ${3:Type[] params components});" },
		{ "trigger": "EditorUtility.UnloadUnusedAssets()", "contents": "EditorUtility.UnloadUnusedAssets();" },
		{ "trigger": "EditorUtility.GetObjectEnabled(target)", "contents": "EditorUtility.GetObjectEnabled(${1:Object target});" },
		{ "trigger": "EditorUtility.OpenFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.OpenFolderPanel(${1:String title}, ${2:String folder}, ${3:String defaultName});" },
		{ "trigger": "EditorUtility.DisplayCancelableProgressBar(title, info, progress)", "contents": "EditorUtility.DisplayCancelableProgressBar(${1:String title}, ${2:String info}, ${3:float progress});" },
		{ "trigger": "EditorUtility.DisplayPopupMenu(position, menuItemPath, command)", "contents": "EditorUtility.DisplayPopupMenu(${1:Rect position}, ${2:String menuItemPath}, ${3:MenuCommand command});" },
		{ "trigger": "EditorUtility.CollectDependencies(roots)", "contents": "EditorUtility.CollectDependencies(${1:Object[] roots});" },
		{ "trigger": "EditorUtility.OpenFilePanel(title, directory, extension)", "contents": "EditorUtility.OpenFilePanel(${1:String title}, ${2:String directory}, ${3:String extension});" },
		{ "trigger": "EditorUtility.IsPersistent(target)", "contents": "EditorUtility.IsPersistent(${1:Object target});" },
		{ "trigger": "EditorUtility.SetSelectedWireframeHidden(renderer, enabled)", "contents": "EditorUtility.SetSelectedWireframeHidden(${1:Renderer renderer}, ${2:boolean enabled});" },
		{ "trigger": "EditorUtility.SaveFolderPanel(title, folder, defaultName)", "contents": "EditorUtility.SaveFolderPanel(${1:String title}, ${2:String folder}, ${3:String defaultName});" },
		{ "trigger": "EditorUtility.SetObjectEnabled(target, enabled)", "contents": "EditorUtility.SetObjectEnabled(${1:Object target}, ${2:boolean enabled});" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:Texture2D texture}, ${2:TextureFormat format}, ${3:int quality});" },
		{ "trigger": "EditorUtility.CompressTexture(texture, format, quality)", "contents": "EditorUtility.CompressTexture(${1:Texture2D texture}, ${2:TextureFormat format}, ${3:TextureCompressionQuality quality});" },
		{ "trigger": "EditorUtility.SetDirty(target)", "contents": "EditorUtility.SetDirty(${1:Object target});" },
		{ "trigger": "EditorStyles", "contents": "EditorStyles" },
		{ "trigger": "EditorStyles.whiteMiniLabel", "contents": "EditorStyles.whiteMiniLabel" },
		{ "trigger": "EditorStyles.miniButtonRight", "contents": "EditorStyles.miniButtonRight" },
		{ "trigger": "EditorStyles.wordWrappedMiniLabel", "contents": "EditorStyles.wordWrappedMiniLabel" },
		{ "trigger": "EditorStyles.whiteLabel", "contents": "EditorStyles.whiteLabel" },
		{ "trigger": "EditorStyles.miniTextField", "contents": "EditorStyles.miniTextField" },
		{ "trigger": "EditorStyles.toggle", "contents": "EditorStyles.toggle" },
		{ "trigger": "EditorStyles.boldFont", "contents": "EditorStyles.boldFont" },
		{ "trigger": "EditorStyles.wordWrappedLabel", "contents": "EditorStyles.wordWrappedLabel" },
		{ "trigger": "EditorStyles.miniButtonLeft", "contents": "EditorStyles.miniButtonLeft" },
		{ "trigger": "EditorStyles.miniLabel", "contents": "EditorStyles.miniLabel" },
		{ "trigger": "EditorStyles.miniFont", "contents": "EditorStyles.miniFont" },
		{ "trigger": "EditorStyles.label", "contents": "EditorStyles.label" },
		{ "trigger": "EditorStyles.radioButton", "contents": "EditorStyles.radioButton" },
		{ "trigger": "EditorStyles.largeLabel", "contents": "EditorStyles.largeLabel" },
		{ "trigger": "EditorStyles.objectField", "contents": "EditorStyles.objectField" },
		{ "trigger": "EditorStyles.standardFont", "contents": "EditorStyles.standardFont" },
		{ "trigger": "EditorStyles.layerMaskField", "contents": "EditorStyles.layerMaskField" },
		{ "trigger": "EditorStyles.boldLabel", "contents": "EditorStyles.boldLabel" },
		{ "trigger": "EditorStyles.popup", "contents": "EditorStyles.popup" },
		{ "trigger": "EditorStyles.miniButton", "contents": "EditorStyles.miniButton" },
		{ "trigger": "EditorStyles.numberField", "contents": "EditorStyles.numberField" },
		{ "trigger": "EditorStyles.foldoutPreDrop", "contents": "EditorStyles.foldoutPreDrop" },
		{ "trigger": "EditorStyles.miniButtonMid", "contents": "EditorStyles.miniButtonMid" },
		{ "trigger": "EditorStyles.objectFieldThumb", "contents": "EditorStyles.objectFieldThumb" },
		{ "trigger": "EditorStyles.toolbar", "contents": "EditorStyles.toolbar" },
		{ "trigger": "EditorStyles.miniBoldLabel", "contents": "EditorStyles.miniBoldLabel" },
		{ "trigger": "EditorStyles.toolbarDropDown", "contents": "EditorStyles.toolbarDropDown" },
		{ "trigger": "EditorStyles.toolbarButton", "contents": "EditorStyles.toolbarButton" },
		{ "trigger": "EditorStyles.toggleGroup", "contents": "EditorStyles.toggleGroup" },
		{ "trigger": "EditorStyles.toolbarTextField", "contents": "EditorStyles.toolbarTextField" },
		{ "trigger": "EditorStyles.whiteBoldLabel", "contents": "EditorStyles.whiteBoldLabel" },
		{ "trigger": "EditorStyles.whiteLargeLabel", "contents": "EditorStyles.whiteLargeLabel" },
		{ "trigger": "EditorStyles.colorField", "contents": "EditorStyles.colorField" },
		{ "trigger": "EditorStyles.textField", "contents": "EditorStyles.textField" },
		{ "trigger": "EditorStyles.miniBoldFont", "contents": "EditorStyles.miniBoldFont" },
		{ "trigger": "EditorStyles.foldout", "contents": "EditorStyles.foldout" },
		{ "trigger": "EditorStyles.toolbarPopup", "contents": "EditorStyles.toolbarPopup" },
		{ "trigger": "PlayerSettings", "contents": "PlayerSettings" },
		{ "trigger": "PlayerSettings.advancedLicense", "contents": "PlayerSettings.advancedLicense" },
		{ "trigger": "PlayerSettings.use32BitDisplayBuffer", "contents": "PlayerSettings.use32BitDisplayBuffer" },
		{ "trigger": "PlayerSettings.stripPhysics", "contents": "PlayerSettings.stripPhysics" },
		{ "trigger": "PlayerSettings.usePlayerLog", "contents": "PlayerSettings.usePlayerLog" },
		{ "trigger": "PlayerSettings.ps3SoundPath", "contents": "PlayerSettings.ps3SoundPath" },
		{ "trigger": "PlayerSettings.ps3TrophyCommId", "contents": "PlayerSettings.ps3TrophyCommId" },
		{ "trigger": "PlayerSettings.colorSpace", "contents": "PlayerSettings.colorSpace" },
		{ "trigger": "PlayerSettings.xboxDeployKinectResources", "contents": "PlayerSettings.xboxDeployKinectResources" },
		{ "trigger": "PlayerSettings.targetGlesGraphics", "contents": "PlayerSettings.targetGlesGraphics" },
		{ "trigger": "PlayerSettings.SetScriptingDefineSymbolsForGroup(targetGroup, defines)", "contents": "PlayerSettings.SetScriptingDefineSymbolsForGroup(${1:BuildTargetGroup targetGroup}, ${2:String defines});" },
		{ "trigger": "PlayerSettings.defaultIsFullScreen", "contents": "PlayerSettings.defaultIsFullScreen" },
		{ "trigger": "PlayerSettings.ps3BootCheckMaxSaveGameSizeKB", "contents": "PlayerSettings.ps3BootCheckMaxSaveGameSizeKB" },
		{ "trigger": "PlayerSettings.keystorePass", "contents": "PlayerSettings.keystorePass" },
		{ "trigger": "PlayerSettings.defaultScreenHeight", "contents": "PlayerSettings.defaultScreenHeight" },
		{ "trigger": "PlayerSettings.ps3BackgroundPath", "contents": "PlayerSettings.ps3BackgroundPath" },
		{ "trigger": "PlayerSettings.aotOptions", "contents": "PlayerSettings.aotOptions" },
		{ "trigger": "PlayerSettings.xboxEnableSpeech", "contents": "PlayerSettings.xboxEnableSpeech" },
		{ "trigger": "PlayerSettings.GetScriptingDefineSymbolsForGroup(targetGroup)", "contents": "PlayerSettings.GetScriptingDefineSymbolsForGroup(${1:BuildTargetGroup targetGroup});" },
		{ "trigger": "PlayerSettings.ps3TrialMode", "contents": "PlayerSettings.ps3TrialMode" },
		{ "trigger": "PlayerSettings.bundleVersion", "contents": "PlayerSettings.bundleVersion" },
		{ "trigger": "PlayerSettings.defaultWebScreenWidth", "contents": "PlayerSettings.defaultWebScreenWidth" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeRight", "contents": "PlayerSettings.allowedAutorotateToLandscapeRight" },
		{ "trigger": "PlayerSettings.strippingLevel", "contents": "PlayerSettings.strippingLevel" },
		{ "trigger": "PlayerSettings.xboxGenerateSpa", "contents": "PlayerSettings.xboxGenerateSpa" },
		{ "trigger": "PlayerSettings.useDirect3D11", "contents": "PlayerSettings.useDirect3D11" },
		{ "trigger": "PlayerSettings.resizableWindow", "contents": "PlayerSettings.resizableWindow" },
		{ "trigger": "PlayerSettings.displayResolutionDialog", "contents": "PlayerSettings.displayResolutionDialog" },
		{ "trigger": "PlayerSettings.statusBarHidden", "contents": "PlayerSettings.statusBarHidden" },
		{ "trigger": "PlayerSettings.xboxSkinOnGPU", "contents": "PlayerSettings.xboxSkinOnGPU" },
		{ "trigger": "PlayerSettings.iPhoneBundleIdentifier", "contents": "PlayerSettings.iPhoneBundleIdentifier" },
		{ "trigger": "PlayerSettings.xboxImageXexFilePath", "contents": "PlayerSettings.xboxImageXexFilePath" },
		{ "trigger": "PlayerSettings.resolutionDialogBanner", "contents": "PlayerSettings.resolutionDialogBanner" },
		{ "trigger": "PlayerSettings.useMacAppStoreValidation", "contents": "PlayerSettings.useMacAppStoreValidation" },
		{ "trigger": "PlayerSettings.xboxEnableKinect", "contents": "PlayerSettings.xboxEnableKinect" },
		{ "trigger": "PlayerSettings.xboxEnableKinectAutoTracking", "contents": "PlayerSettings.xboxEnableKinectAutoTracking" },
		{ "trigger": "PlayerSettings.xboxTitleId", "contents": "PlayerSettings.xboxTitleId" },
		{ "trigger": "PlayerSettings.defaultWebScreenHeight", "contents": "PlayerSettings.defaultWebScreenHeight" },
		{ "trigger": "PlayerSettings.companyName", "contents": "PlayerSettings.companyName" },
		{ "trigger": "PlayerSettings.renderingPath", "contents": "PlayerSettings.renderingPath" },
		{ "trigger": "PlayerSettings.GetIconSizesForTargetGroup(platform)", "contents": "PlayerSettings.GetIconSizesForTargetGroup(${1:BuildTargetGroup platform});" },
		{ "trigger": "PlayerSettings.HasAspectRatio(aspectRatio)", "contents": "PlayerSettings.HasAspectRatio(${1:AspectRatio aspectRatio});" },
		{ "trigger": "PlayerSettings.allowedAutorotateToLandscapeLeft", "contents": "PlayerSettings.allowedAutorotateToLandscapeLeft" },
		{ "trigger": "PlayerSettings.productName", "contents": "PlayerSettings.productName" },
		{ "trigger": "PlayerSettings.ps3TrophyPackagePath", "contents": "PlayerSettings.ps3TrophyPackagePath" },
		{ "trigger": "PlayerSettings.defaultScreenWidth", "contents": "PlayerSettings.defaultScreenWidth" },
		{ "trigger": "PlayerSettings.xboxAdditionalTitleMemorySize", "contents": "PlayerSettings.xboxAdditionalTitleMemorySize" },
		{ "trigger": "PlayerSettings.useAnimatedAutorotation", "contents": "PlayerSettings.useAnimatedAutorotation" },
		{ "trigger": "PlayerSettings.SetIconsForTargetGroup(platform, icons)", "contents": "PlayerSettings.SetIconsForTargetGroup(${1:BuildTargetGroup platform}, ${2:Texture2D[] icons});" },
		{ "trigger": "PlayerSettings.bundleIdentifier", "contents": "PlayerSettings.bundleIdentifier" },
		{ "trigger": "PlayerSettings.xboxSpeechDB", "contents": "PlayerSettings.xboxSpeechDB" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortrait", "contents": "PlayerSettings.allowedAutorotateToPortrait" },
		{ "trigger": "PlayerSettings.xboxSplashScreen", "contents": "PlayerSettings.xboxSplashScreen" },
		{ "trigger": "PlayerSettings.keyaliasPass", "contents": "PlayerSettings.keyaliasPass" },
		{ "trigger": "PlayerSettings.xboxEnableAvatar", "contents": "PlayerSettings.xboxEnableAvatar" },
		{ "trigger": "PlayerSettings.stripUnusedMeshComponents", "contents": "PlayerSettings.stripUnusedMeshComponents" },
		{ "trigger": "PlayerSettings.forceSingleInstance", "contents": "PlayerSettings.forceSingleInstance" },
		{ "trigger": "PlayerSettings.ps3TitleConfigPath", "contents": "PlayerSettings.ps3TitleConfigPath" },
		{ "trigger": "PlayerSettings.defaultInterfaceOrientation", "contents": "PlayerSettings.defaultInterfaceOrientation" },
		{ "trigger": "PlayerSettings.ps3SaveGameSlots", "contents": "PlayerSettings.ps3SaveGameSlots" },
		{ "trigger": "PlayerSettings.ps3ThumbnailPath", "contents": "PlayerSettings.ps3ThumbnailPath" },
		{ "trigger": "PlayerSettings.accelerometerFrequency", "contents": "PlayerSettings.accelerometerFrequency" },
		{ "trigger": "PlayerSettings.captureSingleScreen", "contents": "PlayerSettings.captureSingleScreen" },
		{ "trigger": "PlayerSettings.macFullscreenMode", "contents": "PlayerSettings.macFullscreenMode" },
		{ "trigger": "PlayerSettings.GetIconsForTargetGroup(platform)", "contents": "PlayerSettings.GetIconsForTargetGroup(${1:BuildTargetGroup platform});" },
		{ "trigger": "PlayerSettings.xboxSpaFilePath", "contents": "PlayerSettings.xboxSpaFilePath" },
		{ "trigger": "PlayerSettings.allowedAutorotateToPortraitUpsideDown", "contents": "PlayerSettings.allowedAutorotateToPortraitUpsideDown" },
		{ "trigger": "PlayerSettings.apiCompatibilityLevel", "contents": "PlayerSettings.apiCompatibilityLevel" },
		{ "trigger": "PlayerSettings.ps3DLCConfigPath", "contents": "PlayerSettings.ps3DLCConfigPath" },
		{ "trigger": "PlayerSettings.ps3TrophyCommSig", "contents": "PlayerSettings.ps3TrophyCommSig" },
		{ "trigger": "PlayerSettings.runInBackground", "contents": "PlayerSettings.runInBackground" },
		{ "trigger": "PlayerSettings.MTRendering", "contents": "PlayerSettings.MTRendering" },
		{ "trigger": "PlayerSettings.SetAspectRatio(aspectRatio, enable)", "contents": "PlayerSettings.SetAspectRatio(${1:AspectRatio aspectRatio}, ${2:boolean enable});" },
		{ "trigger": "NavMeshBuilder", "contents": "NavMeshBuilder" },
		{ "trigger": "NavMeshBuilder.BuildNavMesh()", "contents": "NavMeshBuilder.BuildNavMesh();" },
		{ "trigger": "NavMeshBuilder.BuildNavMeshAsync()", "contents": "NavMeshBuilder.BuildNavMeshAsync();" },
		{ "trigger": "NavMeshBuilder.Cancel()", "contents": "NavMeshBuilder.Cancel();" },
		{ "trigger": "NavMeshBuilder.isRunning", "contents": "NavMeshBuilder.isRunning" },
		{ "trigger": "NavMeshBuilder.ClearAllNavMeshes()", "contents": "NavMeshBuilder.ClearAllNavMeshes();" },
		{ "trigger": "GameObjectUtility", "contents": "GameObjectUtility" },
		{ "trigger": "GameObjectUtility.GetNavMeshLayerNames()", "contents": "GameObjectUtility.GetNavMeshLayerNames();" },
		{ "trigger": "GameObjectUtility.AreStaticEditorFlagsSet(go, flags)", "contents": "GameObjectUtility.AreStaticEditorFlagsSet(${1:GameObject go}, ${2:StaticEditorFlags flags});" },
		{ "trigger": "GameObjectUtility.GetStaticEditorFlags(go)", "contents": "GameObjectUtility.GetStaticEditorFlags(${1:GameObject go});" },
		{ "trigger": "GameObjectUtility.GetNavMeshLayerFromName(name)", "contents": "GameObjectUtility.GetNavMeshLayerFromName(${1:String name});" },
		{ "trigger": "GameObjectUtility.GetNavMeshLayer(go)", "contents": "GameObjectUtility.GetNavMeshLayer(${1:GameObject go});" },
		{ "trigger": "GameObjectUtility.SetNavMeshLayer(go, layer)", "contents": "GameObjectUtility.SetNavMeshLayer(${1:GameObject go}, ${2:int layer});" },
		{ "trigger": "GameObjectUtility.SetStaticEditorFlags(go, flags)", "contents": "GameObjectUtility.SetStaticEditorFlags(${1:GameObject go}, ${2:StaticEditorFlags flags});" },
		{ "trigger": "AudioImporter", "contents": "AudioImporter" },
		{ "trigger": "AudioImporter.forceToMono", "contents": "AudioImporter.forceToMono" },
		{ "trigger": "AudioImporter.loadType", "contents": "AudioImporter.loadType" },
		{ "trigger": "AudioImporter.format", "contents": "AudioImporter.format" },
		{ "trigger": "AudioImporter.loopable", "contents": "AudioImporter.loopable" },
		{ "trigger": "AudioImporter.compressionBitrate", "contents": "AudioImporter.compressionBitrate" },
		{ "trigger": "AudioImporter.hardware", "contents": "AudioImporter.hardware" },
		{ "trigger": "AudioImporter.threeD", "contents": "AudioImporter.threeD" },
		{ "trigger": "PlayerSettings.iOS", "contents": "PlayerSettings.iOS" },
		{ "trigger": "PlayerSettings.iOS.scriptCallOptimization", "contents": "PlayerSettings.iOS.scriptCallOptimization" },
		{ "trigger": "PlayerSettings.iOS.sdkVersion", "contents": "PlayerSettings.iOS.sdkVersion" },
		{ "trigger": "PlayerSettings.iOS.exitOnSuspend", "contents": "PlayerSettings.iOS.exitOnSuspend" },
		{ "trigger": "PlayerSettings.iOS.applicationDisplayName", "contents": "PlayerSettings.iOS.applicationDisplayName" },
		{ "trigger": "PlayerSettings.iOS.statusBarStyle", "contents": "PlayerSettings.iOS.statusBarStyle" },
		{ "trigger": "PlayerSettings.iOS.targetOSVersion", "contents": "PlayerSettings.iOS.targetOSVersion" },
		{ "trigger": "PlayerSettings.iOS.targetDevice", "contents": "PlayerSettings.iOS.targetDevice" },
		{ "trigger": "PlayerSettings.iOS.requiresPersistentWiFi", "contents": "PlayerSettings.iOS.requiresPersistentWiFi" },
		{ "trigger": "PlayerSettings.iOS.targetResolution", "contents": "PlayerSettings.iOS.targetResolution" },
		{ "trigger": "PlayerSettings.iOS.prerenderedIcon", "contents": "PlayerSettings.iOS.prerenderedIcon" },
		{ "trigger": "PlayerSettings.iOS.showActivityIndicatorOnLoading", "contents": "PlayerSettings.iOS.showActivityIndicatorOnLoading" },
		{ "trigger": "ObjectNames", "contents": "ObjectNames" },
		{ "trigger": "ObjectNames.SetNameSmart(obj, name)", "contents": "ObjectNames.SetNameSmart(${1:Object obj}, ${2:String name});" },
		{ "trigger": "ObjectNames.GetClassName(obj)", "contents": "ObjectNames.GetClassName(${1:Object obj});" },
		{ "trigger": "ObjectNames.GetInspectorTitle(obj)", "contents": "ObjectNames.GetInspectorTitle(${1:Object obj});" },
		{ "trigger": "ObjectNames.NicifyVariableName(name)", "contents": "ObjectNames.NicifyVariableName(${1:String name});" },
		{ "trigger": "ObjectNames.GetDragAndDropTitle(obj)", "contents": "ObjectNames.GetDragAndDropTitle(${1:Object obj});" },
		{ "trigger": "MonoScript", "contents": "MonoScript" },
		{ "trigger": "MonoScript.FromScriptableObject(scriptableObject)", "contents": "MonoScript.FromScriptableObject(${1:ScriptableObject scriptableObject});" },
		{ "trigger": "MonoScript.GetClass()", "contents": "MonoScript.GetClass();" },
		{ "trigger": "MonoScript.FromMonoBehaviour(behaviour)", "contents": "MonoScript.FromMonoBehaviour(${1:MonoBehaviour behaviour});" },
		{ "trigger": "FileUtil", "contents": "FileUtil" },
		{ "trigger": "FileUtil.DeleteFileOrDirectory(path)", "contents": "FileUtil.DeleteFileOrDirectory(${1:String path});" },
		{ "trigger": "FileUtil.CopyFileOrDirectory(from, to)", "contents": "FileUtil.CopyFileOrDirectory(${1:String from}, ${2:String to});" },
		{ "trigger": "FileUtil.ReplaceDirectory(src, dst)", "contents": "FileUtil.ReplaceDirectory(${1:String src}, ${2:String dst});" },
		{ "trigger": "FileUtil.GetUniqueTempPathInProject()", "contents": "FileUtil.GetUniqueTempPathInProject();" },
		{ "trigger": "FileUtil.MoveFileOrDirectory(from, to)", "contents": "FileUtil.MoveFileOrDirectory(${1:String from}, ${2:String to});" },
		{ "trigger": "FileUtil.ReplaceFile(src, dst)", "contents": "FileUtil.ReplaceFile(${1:String src}, ${2:String dst});" },
		{ "trigger": "FileUtil.CopyFileOrDirectoryFollowSymlinks(from, to)", "contents": "FileUtil.CopyFileOrDirectoryFollowSymlinks(${1:String from}, ${2:String to});" },
		{ "trigger": "Undo", "contents": "Undo" },
		{ "trigger": "Undo.PerformRedo()", "contents": "Undo.PerformRedo();" },
		{ "trigger": "Undo.RegisterSnapshot()", "contents": "Undo.RegisterSnapshot();" },
		{ "trigger": "Undo.RestoreSnapshot()", "contents": "Undo.RestoreSnapshot();" },
		{ "trigger": "Undo.PerformUndo()", "contents": "Undo.PerformUndo();" },
		{ "trigger": "Undo.RegisterSceneUndo(name)", "contents": "Undo.RegisterSceneUndo(${1:String name});" },
		{ "trigger": "Undo.ClearSnapshotTarget()", "contents": "Undo.ClearSnapshotTarget();" },
		{ "trigger": "Undo.SetSnapshotTarget(objectToUndo, name)", "contents": "Undo.SetSnapshotTarget(${1:Object objectToUndo}, ${2:String name});" },
		{ "trigger": "Undo.SetSnapshotTarget(objectsToUndo, name)", "contents": "Undo.SetSnapshotTarget(${1:Object[] objectsToUndo}, ${2:String name});" },
		{ "trigger": "Undo.RegisterCreatedObjectUndo(objectToUndo, name)", "contents": "Undo.RegisterCreatedObjectUndo(${1:Object objectToUndo}, ${2:String name});" },
		{ "trigger": "Undo.RegisterSetTransformParentUndo(transform, newParent, name)", "contents": "Undo.RegisterSetTransformParentUndo(${1:Transform transform}, ${2:Transform newParent}, ${3:String name});" },
		{ "trigger": "Undo.RegisterUndo(objectToUndo, name)", "contents": "Undo.RegisterUndo(${1:Object objectToUndo}, ${2:String name});" },
		{ "trigger": "Undo.RegisterUndo(objectsToUndo, name)", "contents": "Undo.RegisterUndo(${1:Object[] objectsToUndo}, ${2:String name});" },
		{ "trigger": "Undo.CreateSnapshot()", "contents": "Undo.CreateSnapshot();" },
		{ "trigger": "PlayerSettings.Android", "contents": "PlayerSettings.Android" },
		{ "trigger": "PlayerSettings.Android.splashScreenScale", "contents": "PlayerSettings.Android.splashScreenScale" },
		{ "trigger": "PlayerSettings.Android.keystoreName", "contents": "PlayerSettings.Android.keystoreName" },
		{ "trigger": "PlayerSettings.Android.licenseVerification", "contents": "PlayerSettings.Android.licenseVerification" },
		{ "trigger": "PlayerSettings.Android.keyaliasPass", "contents": "PlayerSettings.Android.keyaliasPass" },
		{ "trigger": "PlayerSettings.Android.keyaliasName", "contents": "PlayerSettings.Android.keyaliasName" },
		{ "trigger": "PlayerSettings.Android.useAPKExpansionFiles", "contents": "PlayerSettings.Android.useAPKExpansionFiles" },
		{ "trigger": "PlayerSettings.Android.targetDevice", "contents": "PlayerSettings.Android.targetDevice" },
		{ "trigger": "PlayerSettings.Android.forceSDCardPermission", "contents": "PlayerSettings.Android.forceSDCardPermission" },
		{ "trigger": "PlayerSettings.Android.preferredInstallLocation", "contents": "PlayerSettings.Android.preferredInstallLocation" },
		{ "trigger": "PlayerSettings.Android.keystorePass", "contents": "PlayerSettings.Android.keystorePass" },
		{ "trigger": "PlayerSettings.Android.minSdkVersion", "contents": "PlayerSettings.Android.minSdkVersion" },
		{ "trigger": "PlayerSettings.Android.use24BitDepthBuffer", "contents": "PlayerSettings.Android.use24BitDepthBuffer" },
		{ "trigger": "PlayerSettings.Android.forceInternetPermission", "contents": "PlayerSettings.Android.forceInternetPermission" },
		{ "trigger": "PlayerSettings.Android.bundleVersionCode", "contents": "PlayerSettings.Android.bundleVersionCode" },
		{ "trigger": "PlayerSettings.Android.showActivityIndicatorOnLoading", "contents": "PlayerSettings.Android.showActivityIndicatorOnLoading" },
		{ "trigger": "PlayerSettings.Wii", "contents": "PlayerSettings.Wii" },
		{ "trigger": "PlayerSettings.Wii.gameVersion", "contents": "PlayerSettings.Wii.gameVersion" },
		{ "trigger": "PlayerSettings.Wii.controllerCount", "contents": "PlayerSettings.Wii.controllerCount" },
		{ "trigger": "PlayerSettings.Wii.supportsNunchuk", "contents": "PlayerSettings.Wii.supportsNunchuk" },
		{ "trigger": "PlayerSettings.Wii.companyCode", "contents": "PlayerSettings.Wii.companyCode" },
		{ "trigger": "PlayerSettings.Wii.screenCrashDumps", "contents": "PlayerSettings.Wii.screenCrashDumps" },
		{ "trigger": "PlayerSettings.Wii.supportsMotionPlus", "contents": "PlayerSettings.Wii.supportsMotionPlus" },
		{ "trigger": "PlayerSettings.Wii.gameCode", "contents": "PlayerSettings.Wii.gameCode" },
		{ "trigger": "PlayerSettings.Wii.floatingPointExceptions", "contents": "PlayerSettings.Wii.floatingPointExceptions" },
		{ "trigger": "PlayerSettings.Wii.ResetMemoryAreas()", "contents": "PlayerSettings.Wii.ResetMemoryAreas();" },
		{ "trigger": "PlayerSettings.Wii.supportsBalanceBoard", "contents": "PlayerSettings.Wii.supportsBalanceBoard" },
		{ "trigger": "PlayerSettings.Wii.hio2Usage", "contents": "PlayerSettings.Wii.hio2Usage" },
		{ "trigger": "PlayerSettings.Wii.SetMemoryArea(memoryLabel, memoryArea)", "contents": "PlayerSettings.Wii.SetMemoryArea(${1:WiiMemoryLabel memoryLabel}, ${2:WiiMemoryArea memoryArea});" },
		{ "trigger": "PlayerSettings.Wii.region", "contents": "PlayerSettings.Wii.region" },
		{ "trigger": "PlayerSettings.Wii.GetMemoryArea(memoryLabel)", "contents": "PlayerSettings.Wii.GetMemoryArea(${1:WiiMemoryLabel memoryLabel});" },
		{ "trigger": "PlayerSettings.Wii.supportsClassicController", "contents": "PlayerSettings.Wii.supportsClassicController" },
		{ "trigger": "PropertyDrawer", "contents": "PropertyDrawer" },
		{ "trigger": "PropertyDrawer.attribute", "contents": "PropertyDrawer.attribute" },
		{ "trigger": "PropertyDrawer.OnGUI(position, property, label)", "contents": "PropertyDrawer.OnGUI(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label});" },
		{ "trigger": "PropertyDrawer.GetPropertyHeight(property, label)", "contents": "PropertyDrawer.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label});" },
		{ "trigger": "Unwrapping", "contents": "Unwrapping" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:Mesh src});" },
		{ "trigger": "Unwrapping.GeneratePerTriangleUV(src, settings)", "contents": "Unwrapping.GeneratePerTriangleUV(${1:Mesh src}, ${2:UnwrapParam settings});" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:Mesh src});" },
		{ "trigger": "Unwrapping.GenerateSecondaryUVSet(src, settings)", "contents": "Unwrapping.GenerateSecondaryUVSet(${1:Mesh src}, ${2:UnwrapParam settings});" },
		{ "trigger": "EditorGUI", "contents": "EditorGUI" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:String label}, ${3:GUIStyle style = EditorStyles.label});" },
		{ "trigger": "EditorGUI.LabelField(position, label, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIStyle style = EditorStyles.label});" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:String label}, ${3:String label2}, ${4:GUIStyle style = EditorStyles.label});" },
		{ "trigger": "EditorGUI.LabelField(position, label, label2, style)", "contents": "EditorGUI.LabelField(${1:Rect position}, ${2:GUIContent label}, ${3:GUIContent label2}, ${4:GUIStyle style = EditorStyles.label});" },
		{ "trigger": "EditorGUI.EnumPopup(position, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:System.Enum selected}, ${3:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:String label}, ${3:System.Enum selected}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.EnumPopup(position, label, selected, style)", "contents": "EditorGUI.EnumPopup(${1:Rect position}, ${2:GUIContent label}, ${3:System.Enum selected}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.FloatField(position, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:float value}, ${3:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:String label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.FloatField(position, label, value, style)", "contents": "EditorGUI.FloatField(${1:Rect position}, ${2:GUIContent label}, ${3:float value}, ${4:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.MinMaxSlider(label, position, ref minValue, ref maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:GUIContent label}, ${2:Rect position}, ${3:float ref minValue}, ${4:float ref maxValue}, ${5:float minLimit}, ${6:float maxLimit});" },
		{ "trigger": "EditorGUI.MinMaxSlider(position, ref minValue, ref maxValue, minLimit, maxLimit)", "contents": "EditorGUI.MinMaxSlider(${1:Rect position}, ${2:float ref minValue}, ${3:float ref maxValue}, ${4:float minLimit}, ${5:float maxLimit});" },
		{ "trigger": "EditorGUI.BoundsField(position, value)", "contents": "EditorGUI.BoundsField(${1:Rect position}, ${2:Bounds value});" },
		{ "trigger": "EditorGUI.BoundsField(position, label, value)", "contents": "EditorGUI.BoundsField(${1:Rect position}, ${2:GUIContent label}, ${3:Bounds value});" },
		{ "trigger": "EditorGUI.EndDisabledGroup()", "contents": "EditorGUI.EndDisabledGroup();" },
		{ "trigger": "EditorGUI.SelectableLabel(position, text, style)", "contents": "EditorGUI.SelectableLabel(${1:Rect position}, ${2:String text}, ${3:GUIStyle style = EditorStyles.label});" },
		{ "trigger": "EditorGUI.indentLevel", "contents": "EditorGUI.indentLevel" },
		{ "trigger": "EditorGUI.DrawTextureAlpha(position, image, scaleMode, imageAspect)", "contents": "EditorGUI.DrawTextureAlpha(${1:Rect position}, ${2:Texture image}, ${3:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${4:float imageAspect = 0});" },
		{ "trigger": "EditorGUI.TextField(position, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:String text}, ${3:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:String label}, ${3:String text}, ${4:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.TextField(position, label, text, style)", "contents": "EditorGUI.TextField(${1:Rect position}, ${2:GUIContent label}, ${3:String text}, ${4:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.HelpBox(position, message, type)", "contents": "EditorGUI.HelpBox(${1:Rect position}, ${2:String message}, ${3:MessageType type});" },
		{ "trigger": "EditorGUI.PropertyField(position, property, includeChildren)", "contents": "EditorGUI.PropertyField(${1:Rect position}, ${2:SerializedProperty property}, ${3:boolean includeChildren = false});" },
		{ "trigger": "EditorGUI.PropertyField(position, property, label, includeChildren)", "contents": "EditorGUI.PropertyField(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent label}, ${4:boolean includeChildren = false});" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.Popup(position, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:String label}, ${3:int selectedIndex}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.Popup(position, label, selectedIndex, displayedOptions, style)", "contents": "EditorGUI.Popup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedIndex}, ${4:GUIContent[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.TextArea(position, text, style)", "contents": "EditorGUI.TextArea(${1:Rect position}, ${2:String text}, ${3:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.RectField(position, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:Rect value});" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:String label}, ${3:Rect value});" },
		{ "trigger": "EditorGUI.RectField(position, label, value)", "contents": "EditorGUI.RectField(${1:Rect position}, ${2:GUIContent label}, ${3:Rect value});" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObj)", "contents": "EditorGUI.InspectorTitlebar(${1:Rect position}, ${2:boolean foldout}, ${3:Object targetObj});" },
		{ "trigger": "EditorGUI.InspectorTitlebar(position, foldout, targetObjs)", "contents": "EditorGUI.InspectorTitlebar(${1:Rect position}, ${2:boolean foldout}, ${3:Object[] targetObjs});" },
		{ "trigger": "EditorGUI.Slider(position, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue});" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:String label}, ${3:float value}, ${4:float leftValue}, ${5:float rightValue});" },
		{ "trigger": "EditorGUI.Slider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:GUIContent label}, ${3:float value}, ${4:float leftValue}, ${5:float rightValue});" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue});" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue}, ${5:String label});" },
		{ "trigger": "EditorGUI.Slider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.Slider(${1:Rect position}, ${2:SerializedProperty property}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUIContent label});" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.IntPopup(position, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.IntPopup(position, property, displayedOptions, optionValues, label)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:SerializedProperty property}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIContent label = null});" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:String label}, ${3:int selectedValue}, ${4:string[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.IntPopup(position, label, selectedValue, displayedOptions, optionValues, style)", "contents": "EditorGUI.IntPopup(${1:Rect position}, ${2:GUIContent label}, ${3:int selectedValue}, ${4:GUIContent[] displayedOptions}, ${5:int[] optionValues}, ${6:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.BeginProperty(totalPosition, label, property)", "contents": "EditorGUI.BeginProperty(${1:Rect totalPosition}, ${2:GUIContent label}, ${3:SerializedProperty property});" },
		{ "trigger": "EditorGUI.BeginDisabledGroup(disabled)", "contents": "EditorGUI.BeginDisabledGroup(${1:boolean disabled});" },
		{ "trigger": "EditorGUI.PasswordField(position, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:String password}, ${3:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:String label}, ${3:String password}, ${4:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.PasswordField(position, label, password, style)", "contents": "EditorGUI.PasswordField(${1:Rect position}, ${2:GUIContent label}, ${3:String password}, ${4:GUIStyle style = EditorStyles.textField});" },
		{ "trigger": "EditorGUI.CurveField(position, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:AnimationCurve value});" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:String label}, ${3:AnimationCurve value});" },
		{ "trigger": "EditorGUI.CurveField(position, label, value)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:GUIContent label}, ${3:AnimationCurve value});" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges});" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:String label}, ${3:AnimationCurve value}, ${4:Color color}, ${5:Rect ranges});" },
		{ "trigger": "EditorGUI.CurveField(position, label, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:GUIContent label}, ${3:AnimationCurve value}, ${4:Color color}, ${5:Rect ranges});" },
		{ "trigger": "EditorGUI.CurveField(position, value, color, ranges)", "contents": "EditorGUI.CurveField(${1:Rect position}, ${2:SerializedProperty value}, ${3:Color color}, ${4:Rect ranges});" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:GUIContent label}, ${3:System.Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.EnumMaskField(position, label, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:String label}, ${3:System.Enum enumValue}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.EnumMaskField(position, enumValue, style)", "contents": "EditorGUI.EnumMaskField(${1:Rect position}, ${2:System.Enum enumValue}, ${3:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.EndChangeCheck()", "contents": "EditorGUI.EndChangeCheck();" },
		{ "trigger": "EditorGUI.ColorField(position, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:Color value});" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:String label}, ${3:Color value});" },
		{ "trigger": "EditorGUI.ColorField(position, label, value)", "contents": "EditorGUI.ColorField(${1:Rect position}, ${2:GUIContent label}, ${3:Color value});" },
		{ "trigger": "EditorGUI.actionKey", "contents": "EditorGUI.actionKey" },
		{ "trigger": "EditorGUI.EndProperty()", "contents": "EditorGUI.EndProperty();" },
		{ "trigger": "EditorGUI.Vector4Field(position, label, value)", "contents": "EditorGUI.Vector4Field(${1:Rect position}, ${2:String label}, ${3:Vector4 value});" },
		{ "trigger": "EditorGUI.DrawPreviewTexture(position, image, mat, scaleMode, imageAspect)", "contents": "EditorGUI.DrawPreviewTexture(${1:Rect position}, ${2:Texture image}, ${3:Material mat = null}, ${4:ScaleMode scaleMode = ScaleMode.StretchToFill}, ${5:float imageAspect = 0});" },
		{ "trigger": "EditorGUI.ObjectField(position, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:Object obj}, ${3:System.Type objType}, ${4:boolean allowSceneObjects});" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:String label}, ${3:Object obj}, ${4:System.Type objType}, ${5:boolean allowSceneObjects});" },
		{ "trigger": "EditorGUI.ObjectField(position, label, obj, objType, allowSceneObjects)", "contents": "EditorGUI.ObjectField(${1:Rect position}, ${2:GUIContent label}, ${3:Object obj}, ${4:System.Type objType}, ${5:boolean allowSceneObjects});" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:boolean foldout}, ${3:String content}, ${4:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:boolean foldout}, ${3:String content}, ${4:boolean toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:boolean foldout}, ${3:GUIContent content}, ${4:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUI.Foldout(position, foldout, content, toggleOnLabelClick, style)", "contents": "EditorGUI.Foldout(${1:Rect position}, ${2:boolean foldout}, ${3:GUIContent content}, ${4:boolean toggleOnLabelClick}, ${5:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUI.PrefixLabel(totalPosition, id, label)", "contents": "EditorGUI.PrefixLabel(${1:Rect totalPosition}, ${2:int id}, ${3:GUIContent label});" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:String text});" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:GUIContent content});" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, text, style)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:String text}, ${3:GUIStyle style});" },
		{ "trigger": "EditorGUI.DropShadowLabel(position, content, style)", "contents": "EditorGUI.DropShadowLabel(${1:Rect position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:GUIContent label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.MaskField(position, label, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:String label}, ${3:int mask}, ${4:string[] displayedOptions}, ${5:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.MaskField(position, mask, displayedOptions, style)", "contents": "EditorGUI.MaskField(${1:Rect position}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.showMixedValue", "contents": "EditorGUI.showMixedValue" },
		{ "trigger": "EditorGUI.TagField(position, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:String tag}, ${3:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:String label}, ${3:String tag}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.TagField(position, label, tag, style)", "contents": "EditorGUI.TagField(${1:Rect position}, ${2:GUIContent label}, ${3:String tag}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.ProgressBar(position, value, text)", "contents": "EditorGUI.ProgressBar(${1:Rect position}, ${2:float value}, ${3:String text});" },
		{ "trigger": "EditorGUI.IntField(position, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:int value}, ${3:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:String label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.IntField(position, label, value, style)", "contents": "EditorGUI.IntField(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:GUIStyle style = EditorStyles.numberField});" },
		{ "trigger": "EditorGUI.Toggle(position, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:boolean value});" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:String label}, ${3:boolean value});" },
		{ "trigger": "EditorGUI.Toggle(position, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:boolean value}, ${3:GUIStyle style});" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:String label}, ${3:boolean value}, ${4:GUIStyle style});" },
		{ "trigger": "EditorGUI.Toggle(position, label, value)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:GUIContent label}, ${3:boolean value});" },
		{ "trigger": "EditorGUI.Toggle(position, label, value, style)", "contents": "EditorGUI.Toggle(${1:Rect position}, ${2:GUIContent label}, ${3:boolean value}, ${4:GUIStyle style});" },
		{ "trigger": "EditorGUI.Vector3Field(position, label, value)", "contents": "EditorGUI.Vector3Field(${1:Rect position}, ${2:String label}, ${3:Vector3 value});" },
		{ "trigger": "EditorGUI.BeginChangeCheck()", "contents": "EditorGUI.BeginChangeCheck();" },
		{ "trigger": "EditorGUI.LayerField(position, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:int layer}, ${3:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:String label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.LayerField(position, label, layer, style)", "contents": "EditorGUI.LayerField(${1:Rect position}, ${2:GUIContent label}, ${3:int layer}, ${4:GUIStyle style = EditorStyles.popup});" },
		{ "trigger": "EditorGUI.IntSlider(position, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue});" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:String label}, ${3:int value}, ${4:int leftValue}, ${5:int rightValue});" },
		{ "trigger": "EditorGUI.IntSlider(position, label, value, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:GUIContent label}, ${3:int value}, ${4:int leftValue}, ${5:int rightValue});" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue});" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue}, ${5:String label});" },
		{ "trigger": "EditorGUI.IntSlider(position, property, leftValue, rightValue, label)", "contents": "EditorGUI.IntSlider(${1:Rect position}, ${2:SerializedProperty property}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUIContent label});" },
		{ "trigger": "EditorGUI.GetPropertyHeight(property, label, includeChildren)", "contents": "EditorGUI.GetPropertyHeight(${1:SerializedProperty property}, ${2:GUIContent label = null}, ${3:boolean includeChildren = true});" },
		{ "trigger": "EditorGUI.Vector2Field(position, label, value)", "contents": "EditorGUI.Vector2Field(${1:Rect position}, ${2:String label}, ${3:Vector2 value});" },
		{ "trigger": "MovieImporter", "contents": "MovieImporter" },
		{ "trigger": "MovieImporter.duration", "contents": "MovieImporter.duration" },
		{ "trigger": "MovieImporter.quality", "contents": "MovieImporter.quality" },
		{ "trigger": "MovieImporter.linearTexture", "contents": "MovieImporter.linearTexture" },
		{ "trigger": "TrueTypeFontImporter", "contents": "TrueTypeFontImporter" },
		{ "trigger": "TrueTypeFontImporter.characterPadding", "contents": "TrueTypeFontImporter.characterPadding" },
		{ "trigger": "TrueTypeFontImporter.GenerateEditableFont(path)", "contents": "TrueTypeFontImporter.GenerateEditableFont(${1:String path});" },
		{ "trigger": "TrueTypeFontImporter.fontRenderingMode", "contents": "TrueTypeFontImporter.fontRenderingMode" },
		{ "trigger": "TrueTypeFontImporter.fontNames", "contents": "TrueTypeFontImporter.fontNames" },
		{ "trigger": "TrueTypeFontImporter.fontSize", "contents": "TrueTypeFontImporter.fontSize" },
		{ "trigger": "TrueTypeFontImporter.fontTTFName", "contents": "TrueTypeFontImporter.fontTTFName" },
		{ "trigger": "TrueTypeFontImporter.characterSpacing", "contents": "TrueTypeFontImporter.characterSpacing" },
		{ "trigger": "TrueTypeFontImporter.customCharacters", "contents": "TrueTypeFontImporter.customCharacters" },
		{ "trigger": "TrueTypeFontImporter.includeFontData", "contents": "TrueTypeFontImporter.includeFontData" },
		{ "trigger": "TrueTypeFontImporter.fontTextureCase", "contents": "TrueTypeFontImporter.fontTextureCase" },
		{ "trigger": "AssetDatabase", "contents": "AssetDatabase" },
		{ "trigger": "AssetDatabase.SetLabels(obj, labels)", "contents": "AssetDatabase.SetLabels(${1:Object obj}, ${2:string[] labels});" },
		{ "trigger": "AssetDatabase.GetDependencies(pathNames)", "contents": "AssetDatabase.GetDependencies(${1:string[] pathNames});" },
		{ "trigger": "AssetDatabase.Contains(obj)", "contents": "AssetDatabase.Contains(${1:Object obj});" },
		{ "trigger": "AssetDatabase.Contains(instanceID)", "contents": "AssetDatabase.Contains(${1:int instanceID});" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject)", "contents": "AssetDatabase.IsOpenForEdit(${1:UnityEngine.Object assetObject});" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetPath)", "contents": "AssetDatabase.IsOpenForEdit(${1:String assetPath});" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetObject, out message)", "contents": "AssetDatabase.IsOpenForEdit(${1:UnityEngine.Object assetObject}, ${2:String out message});" },
		{ "trigger": "AssetDatabase.IsOpenForEdit(assetPath, out message)", "contents": "AssetDatabase.IsOpenForEdit(${1:String assetPath}, ${2:String out message});" },
		{ "trigger": "AssetDatabase.CreateAsset(asset, path)", "contents": "AssetDatabase.CreateAsset(${1:Object asset}, ${2:String path});" },
		{ "trigger": "AssetDatabase.LoadAssetAtPath(assetPath, type)", "contents": "AssetDatabase.LoadAssetAtPath(${1:String assetPath}, ${2:Type type});" },
		{ "trigger": "AssetDatabase.DeleteAsset(path)", "contents": "AssetDatabase.DeleteAsset(${1:String path});" },
		{ "trigger": "AssetDatabase.ImportPackage(packagePath, interactive)", "contents": "AssetDatabase.ImportPackage(${1:String packagePath}, ${2:boolean interactive});" },
		{ "trigger": "AssetDatabase.WriteImportSettingsIfDirty(path)", "contents": "AssetDatabase.WriteImportSettingsIfDirty(${1:String path});" },
		{ "trigger": "AssetDatabase.ValidateMoveAsset(oldPath, newPath)", "contents": "AssetDatabase.ValidateMoveAsset(${1:String oldPath}, ${2:String newPath});" },
		{ "trigger": "AssetDatabase.MoveAsset(oldPath, newPath)", "contents": "AssetDatabase.MoveAsset(${1:String oldPath}, ${2:String newPath});" },
		{ "trigger": "AssetDatabase.GetTextMetaDataPathFromAssetPath(path)", "contents": "AssetDatabase.GetTextMetaDataPathFromAssetPath(${1:String path});" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, assetPath)", "contents": "AssetDatabase.AddObjectToAsset(${1:Object objectToAdd}, ${2:String assetPath});" },
		{ "trigger": "AssetDatabase.AddObjectToAsset(objectToAdd, assetObject)", "contents": "AssetDatabase.AddObjectToAsset(${1:Object objectToAdd}, ${2:Object assetObject});" },
		{ "trigger": "AssetDatabase.LoadMainAssetAtPath(assetPath)", "contents": "AssetDatabase.LoadMainAssetAtPath(${1:String assetPath});" },
		{ "trigger": "AssetDatabase.RenameAsset(pathName, newName)", "contents": "AssetDatabase.RenameAsset(${1:String pathName}, ${2:String newName});" },
		{ "trigger": "AssetDatabase.LoadAllAssetRepresentationsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetRepresentationsAtPath(${1:String assetPath});" },
		{ "trigger": "AssetDatabase.GUIDToAssetPath(guid)", "contents": "AssetDatabase.GUIDToAssetPath(${1:String guid});" },
		{ "trigger": "AssetDatabase.LoadAllAssetsAtPath(assetPath)", "contents": "AssetDatabase.LoadAllAssetsAtPath(${1:String assetPath});" },
		{ "trigger": "AssetDatabase.GetLabels(obj)", "contents": "AssetDatabase.GetLabels(${1:Object obj});" },
		{ "trigger": "AssetDatabase.GenerateUniqueAssetPath(path)", "contents": "AssetDatabase.GenerateUniqueAssetPath(${1:String path});" },
		{ "trigger": "AssetDatabase.SaveAssets()", "contents": "AssetDatabase.SaveAssets();" },
		{ "trigger": "AssetDatabase.CreateFolder(parentFolder, newFolderName)", "contents": "AssetDatabase.CreateFolder(${1:String parentFolder}, ${2:String newFolderName});" },
		{ "trigger": "AssetDatabase.Refresh(options)", "contents": "AssetDatabase.Refresh(${1:ImportAssetOptions options = ImportAssetOptions.Default});" },
		{ "trigger": "AssetDatabase.IsSubAsset(obj)", "contents": "AssetDatabase.IsSubAsset(${1:Object obj});" },
		{ "trigger": "AssetDatabase.IsSubAsset(instanceID)", "contents": "AssetDatabase.IsSubAsset(${1:int instanceID});" },
		{ "trigger": "AssetDatabase.CopyAsset(path, newPath)", "contents": "AssetDatabase.CopyAsset(${1:String path}, ${2:String newPath});" },
		{ "trigger": "AssetDatabase.IsMainAsset(obj)", "contents": "AssetDatabase.IsMainAsset(${1:Object obj});" },
		{ "trigger": "AssetDatabase.IsMainAsset(instanceID)", "contents": "AssetDatabase.IsMainAsset(${1:int instanceID});" },
		{ "trigger": "AssetDatabase.StopAssetEditing()", "contents": "AssetDatabase.StopAssetEditing();" },
		{ "trigger": "AssetDatabase.StartAssetEditing()", "contents": "AssetDatabase.StartAssetEditing();" },
		{ "trigger": "AssetDatabase.ImportAsset(path, options)", "contents": "AssetDatabase.ImportAsset(${1:String path}, ${2:ImportAssetOptions options = ImportAssetOptions.Default});" },
		{ "trigger": "AssetDatabase.GetCachedIcon(path)", "contents": "AssetDatabase.GetCachedIcon(${1:String path});" },
		{ "trigger": "AssetDatabase.ClearLabels(obj)", "contents": "AssetDatabase.ClearLabels(${1:Object obj});" },
		{ "trigger": "AssetDatabase.OpenAsset(instanceID, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:int instanceID}, ${2:int lineNumber = -1});" },
		{ "trigger": "AssetDatabase.OpenAsset(target, lineNumber)", "contents": "AssetDatabase.OpenAsset(${1:Object target}, ${2:int lineNumber = -1});" },
		{ "trigger": "AssetDatabase.OpenAsset(objects)", "contents": "AssetDatabase.OpenAsset(${1:Object[] objects});" },
		{ "trigger": "AssetDatabase.MoveAssetToTrash(path)", "contents": "AssetDatabase.MoveAssetToTrash(${1:String path});" },
		{ "trigger": "AssetDatabase.GetAssetPath(assetObject)", "contents": "AssetDatabase.GetAssetPath(${1:Object assetObject});" },
		{ "trigger": "AssetDatabase.GetAssetPath(instanceID)", "contents": "AssetDatabase.GetAssetPath(${1:int instanceID});" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName)", "contents": "AssetDatabase.ExportPackage(${1:String assetPathName}, ${2:String fileName});" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathName, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:String assetPathName}, ${2:String fileName}, ${3:ExportPackageOptions flags});" },
		{ "trigger": "AssetDatabase.ExportPackage(assetPathNames, fileName, flags)", "contents": "AssetDatabase.ExportPackage(${1:string[] assetPathNames}, ${2:String fileName}, ${3:ExportPackageOptions flags = ExportPackageOptions.Default});" },
		{ "trigger": "AssetDatabase.GetAssetOrScenePath(assetObject)", "contents": "AssetDatabase.GetAssetOrScenePath(${1:Object assetObject});" },
		{ "trigger": "AssetDatabase.AssetPathToGUID(path)", "contents": "AssetDatabase.AssetPathToGUID(${1:String path});" },
		{ "trigger": "SerializedProperty", "contents": "SerializedProperty" },
		{ "trigger": "SerializedProperty.ClearArray()", "contents": "SerializedProperty.ClearArray();" },
		{ "trigger": "SerializedProperty.isArray", "contents": "SerializedProperty.isArray" },
		{ "trigger": "SerializedProperty.InsertArrayElementAtIndex(index)", "contents": "SerializedProperty.InsertArrayElementAtIndex(${1:int index});" },
		{ "trigger": "SerializedProperty.GetEnumerator()", "contents": "SerializedProperty.GetEnumerator();" },
		{ "trigger": "SerializedProperty.CountInProperty()", "contents": "SerializedProperty.CountInProperty();" },
		{ "trigger": "SerializedProperty.objectReferenceValue", "contents": "SerializedProperty.objectReferenceValue" },
		{ "trigger": "SerializedProperty.quaternionValue", "contents": "SerializedProperty.quaternionValue" },
		{ "trigger": "SerializedProperty.Next(enterChildren)", "contents": "SerializedProperty.Next(${1:boolean enterChildren});" },
		{ "trigger": "SerializedProperty.boolValue", "contents": "SerializedProperty.boolValue" },
		{ "trigger": "SerializedProperty.vector3Value", "contents": "SerializedProperty.vector3Value" },
		{ "trigger": "SerializedProperty.enumNames", "contents": "SerializedProperty.enumNames" },
		{ "trigger": "SerializedProperty.DeleteCommand()", "contents": "SerializedProperty.DeleteCommand();" },
		{ "trigger": "SerializedProperty.hasMultipleDifferentValues", "contents": "SerializedProperty.hasMultipleDifferentValues" },
		{ "trigger": "SerializedProperty.CountRemaining()", "contents": "SerializedProperty.CountRemaining();" },
		{ "trigger": "SerializedProperty.prefabOverride", "contents": "SerializedProperty.prefabOverride" },
		{ "trigger": "SerializedProperty.hasChildren", "contents": "SerializedProperty.hasChildren" },
		{ "trigger": "SerializedProperty.animationCurveValue", "contents": "SerializedProperty.animationCurveValue" },
		{ "trigger": "SerializedProperty.propertyPath", "contents": "SerializedProperty.propertyPath" },
		{ "trigger": "SerializedProperty.tooltip", "contents": "SerializedProperty.tooltip" },
		{ "trigger": "SerializedProperty.arraySize", "contents": "SerializedProperty.arraySize" },
		{ "trigger": "SerializedProperty.GetArrayElementAtIndex(index)", "contents": "SerializedProperty.GetArrayElementAtIndex(${1:int index});" },
		{ "trigger": "SerializedProperty.Copy()", "contents": "SerializedProperty.Copy();" },
		{ "trigger": "SerializedProperty.type", "contents": "SerializedProperty.type" },
		{ "trigger": "SerializedProperty.Reset()", "contents": "SerializedProperty.Reset();" },
		{ "trigger": "SerializedProperty.EqualContents(x, y)", "contents": "SerializedProperty.EqualContents(${1:SerializedProperty x}, ${2:SerializedProperty y});" },
		{ "trigger": "SerializedProperty.objectReferenceInstanceIDValue", "contents": "SerializedProperty.objectReferenceInstanceIDValue" },
		{ "trigger": "SerializedProperty.Dispose()", "contents": "SerializedProperty.Dispose();" },
		{ "trigger": "SerializedProperty.floatValue", "contents": "SerializedProperty.floatValue" },
		{ "trigger": "SerializedProperty.editable", "contents": "SerializedProperty.editable" },
		{ "trigger": "SerializedProperty.MoveArrayElement(srcIndex, dstIndex)", "contents": "SerializedProperty.MoveArrayElement(${1:int srcIndex}, ${2:int dstIndex});" },
		{ "trigger": "SerializedProperty.isInstantiatedPrefab", "contents": "SerializedProperty.isInstantiatedPrefab" },
		{ "trigger": "SerializedProperty.propertyType", "contents": "SerializedProperty.propertyType" },
		{ "trigger": "SerializedProperty.vector2Value", "contents": "SerializedProperty.vector2Value" },
		{ "trigger": "SerializedProperty.stringValue", "contents": "SerializedProperty.stringValue" },
		{ "trigger": "SerializedProperty.intValue", "contents": "SerializedProperty.intValue" },
		{ "trigger": "SerializedProperty.GetEndProperty(includeInvisible)", "contents": "SerializedProperty.GetEndProperty(${1:boolean includeInvisible = false});" },
		{ "trigger": "SerializedProperty.isExpanded", "contents": "SerializedProperty.isExpanded" },
		{ "trigger": "SerializedProperty.name", "contents": "SerializedProperty.name" },
		{ "trigger": "SerializedProperty.DeleteArrayElementAtIndex(index)", "contents": "SerializedProperty.DeleteArrayElementAtIndex(${1:int index});" },
		{ "trigger": "SerializedProperty.rectValue", "contents": "SerializedProperty.rectValue" },
		{ "trigger": "SerializedProperty.FindPropertyRelative(relativePropertyPath)", "contents": "SerializedProperty.FindPropertyRelative(${1:String relativePropertyPath});" },
		{ "trigger": "SerializedProperty.boundsValue", "contents": "SerializedProperty.boundsValue" },
		{ "trigger": "SerializedProperty.depth", "contents": "SerializedProperty.depth" },
		{ "trigger": "SerializedProperty.NextVisible(enterChildren)", "contents": "SerializedProperty.NextVisible(${1:boolean enterChildren});" },
		{ "trigger": "SerializedProperty.hasVisibleChildren", "contents": "SerializedProperty.hasVisibleChildren" },
		{ "trigger": "SerializedProperty.serializedObject", "contents": "SerializedProperty.serializedObject" },
		{ "trigger": "SerializedProperty.DuplicateCommand()", "contents": "SerializedProperty.DuplicateCommand();" },
		{ "trigger": "SerializedProperty.enumValueIndex", "contents": "SerializedProperty.enumValueIndex" },
		{ "trigger": "SerializedProperty.colorValue", "contents": "SerializedProperty.colorValue" },
		{ "trigger": "ModelImporter", "contents": "ModelImporter" },
		{ "trigger": "ModelImporter.referencedClips", "contents": "ModelImporter.referencedClips" },
		{ "trigger": "ModelImporter.globalScale", "contents": "ModelImporter.globalScale" },
		{ "trigger": "ModelImporter.animationWrapMode", "contents": "ModelImporter.animationWrapMode" },
		{ "trigger": "ModelImporter.animationScaleError", "contents": "ModelImporter.animationScaleError" },
		{ "trigger": "ModelImporter.materialSearch", "contents": "ModelImporter.materialSearch" },
		{ "trigger": "ModelImporter.optimizeMesh", "contents": "ModelImporter.optimizeMesh" },
		{ "trigger": "ModelImporter.secondaryUVAreaDistortion", "contents": "ModelImporter.secondaryUVAreaDistortion" },
		{ "trigger": "ModelImporter.generateAnimations", "contents": "ModelImporter.generateAnimations" },
		{ "trigger": "ModelImporter.animationPositionError", "contents": "ModelImporter.animationPositionError" },
		{ "trigger": "ModelImporter.secondaryUVPackMargin", "contents": "ModelImporter.secondaryUVPackMargin" },
		{ "trigger": "ModelImporter.secondaryUVHardAngle", "contents": "ModelImporter.secondaryUVHardAngle" },
		{ "trigger": "ModelImporter.bakeIK", "contents": "ModelImporter.bakeIK" },
		{ "trigger": "ModelImporter.materialName", "contents": "ModelImporter.materialName" },
		{ "trigger": "ModelImporter.normalImportMode", "contents": "ModelImporter.normalImportMode" },
		{ "trigger": "ModelImporter.useFileUnits", "contents": "ModelImporter.useFileUnits" },
		{ "trigger": "ModelImporter.isUseFileUnitsSupported", "contents": "ModelImporter.isUseFileUnitsSupported" },
		{ "trigger": "ModelImporter.importMaterials", "contents": "ModelImporter.importMaterials" },
		{ "trigger": "ModelImporter.normalSmoothingAngle", "contents": "ModelImporter.normalSmoothingAngle" },
		{ "trigger": "ModelImporter.secondaryUVAngleDistortion", "contents": "ModelImporter.secondaryUVAngleDistortion" },
		{ "trigger": "ModelImporter.splitTangentsAcrossSeams", "contents": "ModelImporter.splitTangentsAcrossSeams" },
		{ "trigger": "ModelImporter.isTangentImportSupported", "contents": "ModelImporter.isTangentImportSupported" },
		{ "trigger": "ModelImporter.meshCompression", "contents": "ModelImporter.meshCompression" },
		{ "trigger": "ModelImporter.isBakeIKSupported", "contents": "ModelImporter.isBakeIKSupported" },
		{ "trigger": "ModelImporter.generateSecondaryUV", "contents": "ModelImporter.generateSecondaryUV" },
		{ "trigger": "ModelImporter.tangentImportMode", "contents": "ModelImporter.tangentImportMode" },
		{ "trigger": "ModelImporter.transformPaths", "contents": "ModelImporter.transformPaths" },
		{ "trigger": "ModelImporter.swapUVChannels", "contents": "ModelImporter.swapUVChannels" },
		{ "trigger": "ModelImporter.isReadable", "contents": "ModelImporter.isReadable" },
		{ "trigger": "ModelImporter.animationType", "contents": "ModelImporter.animationType" },
		{ "trigger": "ModelImporter.animationCompression", "contents": "ModelImporter.animationCompression" },
		{ "trigger": "ModelImporter.animationRotationError", "contents": "ModelImporter.animationRotationError" },
		{ "trigger": "ModelImporter.addCollider", "contents": "ModelImporter.addCollider" },
		{ "trigger": "StaticOcclusionCullingVisualization", "contents": "StaticOcclusionCullingVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.previewOcclusionCamera", "contents": "StaticOcclusionCullingVisualization.previewOcclusionCamera" },
		{ "trigger": "StaticOcclusionCullingVisualization.showViewVolumes", "contents": "StaticOcclusionCullingVisualization.showViewVolumes" },
		{ "trigger": "StaticOcclusionCullingVisualization.occlusionCullingMode", "contents": "StaticOcclusionCullingVisualization.occlusionCullingMode" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPreVisualization", "contents": "StaticOcclusionCullingVisualization.showPreVisualization" },
		{ "trigger": "StaticOcclusionCullingVisualization.nearClipPlane", "contents": "StaticOcclusionCullingVisualization.nearClipPlane" },
		{ "trigger": "StaticOcclusionCullingVisualization.farClipPlane", "contents": "StaticOcclusionCullingVisualization.farClipPlane" },
		{ "trigger": "StaticOcclusionCullingVisualization.showOcclusionCulling", "contents": "StaticOcclusionCullingVisualization.showOcclusionCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.viewCellSize", "contents": "StaticOcclusionCullingVisualization.viewCellSize" },
		{ "trigger": "StaticOcclusionCullingVisualization.showGeometryCulling", "contents": "StaticOcclusionCullingVisualization.showGeometryCulling" },
		{ "trigger": "StaticOcclusionCullingVisualization.showVisibilityLines", "contents": "StaticOcclusionCullingVisualization.showVisibilityLines" },
		{ "trigger": "StaticOcclusionCullingVisualization.isPreviewOcclusionCullingCameraInPVS", "contents": "StaticOcclusionCullingVisualization.isPreviewOcclusionCullingCameraInPVS" },
		{ "trigger": "StaticOcclusionCullingVisualization.showPortals", "contents": "StaticOcclusionCullingVisualization.showPortals" },
		{ "trigger": "BuildPipeline", "contents": "BuildPipeline" },
		{ "trigger": "BuildPipeline.PopAssetDependencies()", "contents": "BuildPipeline.PopAssetDependencies();" },
		{ "trigger": "BuildPipeline.BuildStreamedSceneAssetBundle(levels, locationPath, target)", "contents": "BuildPipeline.BuildStreamedSceneAssetBundle(${1:string[] levels}, ${2:String locationPath}, ${3:BuildTarget target});" },
		{ "trigger": "BuildPipeline.PushAssetDependencies()", "contents": "BuildPipeline.PushAssetDependencies();" },
		{ "trigger": "BuildPipeline.BuildPlayer(levels, locationPathName, target, options)", "contents": "BuildPipeline.BuildPlayer(${1:string[] levels}, ${2:String locationPathName}, ${3:BuildTarget target}, ${4:BuildOptions options});" },
		{ "trigger": "BuildPipeline.BuildAssetBundleExplicitAssetNames(assets, assetNames, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundleExplicitAssetNames(${1:Object[] assets}, ${2:string[] assetNames}, ${3:String pathName}, ${4:BuildAssetBundleOptions assetBundleOptions = BuildAssetBundleOptions.CollectDependencies | BuildAssetBundleOptions.CompleteAssets}, ${5:BuildTarget targetPlatform = BuildTarget.WebPlayer});" },
		{ "trigger": "BuildPipeline.BuildAssetBundle(mainAsset, assets, pathName, assetBundleOptions, targetPlatform)", "contents": "BuildPipeline.BuildAssetBundle(${1:Object mainAsset}, ${2:Object[] assets}, ${3:String pathName}, ${4:BuildAssetBundleOptions assetBundleOptions = BuildAssetBundleOptions.CollectDependencies | BuildAssetBundleOptions.CompleteAssets}, ${5:BuildTarget targetPlatform = BuildTarget.WebPlayer});" },
		{ "trigger": "AssetPostprocessor", "contents": "AssetPostprocessor" },
		{ "trigger": "AssetPostprocessor.OnPreprocessTexture()", "contents": "AssetPostprocessor.OnPreprocessTexture();" },
		{ "trigger": "AssetPostprocessor.OnPreprocessModel()", "contents": "AssetPostprocessor.OnPreprocessModel();" },
		{ "trigger": "AssetPostprocessor.assetPath", "contents": "AssetPostprocessor.assetPath" },
		{ "trigger": "AssetPostprocessor.assetImporter", "contents": "AssetPostprocessor.assetImporter" },
		{ "trigger": "AssetPostprocessor.LogError(warning, context)", "contents": "AssetPostprocessor.LogError(${1:String warning}, ${2:Object context = null});" },
		{ "trigger": "AssetPostprocessor.OnPreprocessAudio()", "contents": "AssetPostprocessor.OnPreprocessAudio();" },
		{ "trigger": "AssetPostprocessor.GetPostprocessOrder()", "contents": "AssetPostprocessor.GetPostprocessOrder();" },
		{ "trigger": "AssetPostprocessor.OnPostprocessTexture(texture)", "contents": "AssetPostprocessor.OnPostprocessTexture(${1:Texture2D texture});" },
		{ "trigger": "AssetPostprocessor.OnPostprocessModel(root)", "contents": "AssetPostprocessor.OnPostprocessModel(${1:GameObject root});" },
		{ "trigger": "AssetPostprocessor.LogWarning(warning, context)", "contents": "AssetPostprocessor.LogWarning(${1:String warning}, ${2:Object context = null});" },
		{ "trigger": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(root, propNames, values)", "contents": "AssetPostprocessor.OnPostprocessGameObjectWithUserProperties(${1:GameObject root}, ${2:string[] propNames}, ${3:object[] values});" },
		{ "trigger": "AssetPostprocessor.GetVersion()", "contents": "AssetPostprocessor.GetVersion();" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAudio(clip)", "contents": "AssetPostprocessor.OnPostprocessAudio(${1:AudioClip clip});" },
		{ "trigger": "AssetPostprocessor.OnPostprocessAllAssets(importedAssets, deletedAssets, movedAssets, movedFromPath)", "contents": "AssetPostprocessor.OnPostprocessAllAssets(${1:string[] importedAssets}, ${2:string[] deletedAssets}, ${3:string[] movedAssets}, ${4:string[] movedFromPath});" },
		{ "trigger": "AssetPostprocessor.OnAssignMaterialModel(material, renderer)", "contents": "AssetPostprocessor.OnAssignMaterialModel(${1:Material material}, ${2:Renderer renderer});" },
		{ "trigger": "HandleUtility", "contents": "HandleUtility" },
		{ "trigger": "HandleUtility.CalcLineTranslation(src, dest, srcPosition, constraintDir)", "contents": "HandleUtility.CalcLineTranslation(${1:Vector2 src}, ${2:Vector2 dest}, ${3:Vector3 srcPosition}, ${4:Vector3 constraintDir});" },
		{ "trigger": "HandleUtility.PopCamera(camera)", "contents": "HandleUtility.PopCamera(${1:Camera camera});" },
		{ "trigger": "HandleUtility.ClosestPointToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.ClosestPointToArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius});" },
		{ "trigger": "HandleUtility.PointOnLineParameter(point, linePoint, lineDirection)", "contents": "HandleUtility.PointOnLineParameter(${1:Vector3 point}, ${2:Vector3 linePoint}, ${3:Vector3 lineDirection});" },
		{ "trigger": "HandleUtility.DistancePointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.DistancePointLine(${1:Vector3 point}, ${2:Vector3 lineStart}, ${3:Vector3 lineEnd});" },
		{ "trigger": "HandleUtility.DistanceToPolyLine(params points)", "contents": "HandleUtility.DistanceToPolyLine(${1:Vector3[] params points});" },
		{ "trigger": "HandleUtility.AddControl(controlId, distance)", "contents": "HandleUtility.AddControl(${1:int controlId}, ${2:float distance});" },
		{ "trigger": "HandleUtility.DistanceToDisc(center, normal, radius)", "contents": "HandleUtility.DistanceToDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius});" },
		{ "trigger": "HandleUtility.acceleration", "contents": "HandleUtility.acceleration" },
		{ "trigger": "HandleUtility.DistancePointToLineSegment(p, a, b)", "contents": "HandleUtility.DistancePointToLineSegment(${1:Vector2 p}, ${2:Vector2 a}, ${3:Vector2 b});" },
		{ "trigger": "HandleUtility.PickRectObjects(rect)", "contents": "HandleUtility.PickRectObjects(${1:Rect rect});" },
		{ "trigger": "HandleUtility.WorldPointToSizedRect(position, content, style)", "contents": "HandleUtility.WorldPointToSizedRect(${1:Vector3 position}, ${2:GUIContent content}, ${3:GUIStyle style});" },
		{ "trigger": "HandleUtility.DistanceToCircle(position, radius)", "contents": "HandleUtility.DistanceToCircle(${1:Vector3 position}, ${2:float radius});" },
		{ "trigger": "HandleUtility.ClosestPointToDisc(center, normal, radius)", "contents": "HandleUtility.ClosestPointToDisc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:float radius});" },
		{ "trigger": "HandleUtility.ClosestPointToPolyLine(params vertices)", "contents": "HandleUtility.ClosestPointToPolyLine(${1:Vector3[] params vertices});" },
		{ "trigger": "HandleUtility.Repaint()", "contents": "HandleUtility.Repaint();" },
		{ "trigger": "HandleUtility.DistancePointBezier(point, startPosition, endPosition, startTangent, endTangent)", "contents": "HandleUtility.DistancePointBezier(${1:Vector3 point}, ${2:Vector3 startPosition}, ${3:Vector3 endPosition}, ${4:Vector3 startTangent}, ${5:Vector3 endTangent});" },
		{ "trigger": "HandleUtility.ProjectPointLine(point, lineStart, lineEnd)", "contents": "HandleUtility.ProjectPointLine(${1:Vector3 point}, ${2:Vector3 lineStart}, ${3:Vector3 lineEnd});" },
		{ "trigger": "HandleUtility.DistanceToLine(p1, p2)", "contents": "HandleUtility.DistanceToLine(${1:Vector3 p1}, ${2:Vector3 p2});" },
		{ "trigger": "HandleUtility.niceMouseDeltaZoom", "contents": "HandleUtility.niceMouseDeltaZoom" },
		{ "trigger": "HandleUtility.DistancePointToLine(p, a, b)", "contents": "HandleUtility.DistancePointToLine(${1:Vector2 p}, ${2:Vector2 a}, ${3:Vector2 b});" },
		{ "trigger": "HandleUtility.AddDefaultControl(controlId)", "contents": "HandleUtility.AddDefaultControl(${1:int controlId});" },
		{ "trigger": "HandleUtility.DistanceToRectangle(position, rotation, size)", "contents": "HandleUtility.DistanceToRectangle(${1:Vector3 position}, ${2:Quaternion rotation}, ${3:float size});" },
		{ "trigger": "HandleUtility.DistanceToArc(center, normal, from, angle, radius)", "contents": "HandleUtility.DistanceToArc(${1:Vector3 center}, ${2:Vector3 normal}, ${3:Vector3 from}, ${4:float angle}, ${5:float radius});" },
		{ "trigger": "HandleUtility.niceMouseDelta", "contents": "HandleUtility.niceMouseDelta" },
		{ "trigger": "HandleUtility.WorldToGUIPoint(world)", "contents": "HandleUtility.WorldToGUIPoint(${1:Vector3 world});" },
		{ "trigger": "HandleUtility.PickGameObject(position, selectPrefabRoot)", "contents": "HandleUtility.PickGameObject(${1:Vector2 position}, ${2:boolean selectPrefabRoot});" },
		{ "trigger": "HandleUtility.RaySnap(ray)", "contents": "HandleUtility.RaySnap(${1:Ray ray});" },
		{ "trigger": "HandleUtility.PushCamera(camera)", "contents": "HandleUtility.PushCamera(${1:Camera camera});" },
		{ "trigger": "HandleUtility.GetHandleSize(position)", "contents": "HandleUtility.GetHandleSize(${1:Vector3 position});" },
		{ "trigger": "HandleUtility.GUIPointToWorldRay(position)", "contents": "HandleUtility.GUIPointToWorldRay(${1:Vector2 position});" },
		{ "trigger": "GenericMenu", "contents": "GenericMenu" },
		{ "trigger": "GenericMenu.ShowAsContext()", "contents": "GenericMenu.ShowAsContext();" },
		{ "trigger": "GenericMenu.AddSeparator(path)", "contents": "GenericMenu.AddSeparator(${1:String path});" },
		{ "trigger": "GenericMenu.DropDown(position)", "contents": "GenericMenu.DropDown(${1:Rect position});" },
		{ "trigger": "GenericMenu.MenuFunction2(userData)", "contents": "GenericMenu.MenuFunction2(${1:object userData});" },
		{ "trigger": "GenericMenu.AddItem(content, on, func)", "contents": "GenericMenu.AddItem(${1:GUIContent content}, ${2:boolean on}, ${3:MenuFunction func});" },
		{ "trigger": "GenericMenu.AddItem(content, on, func, userData)", "contents": "GenericMenu.AddItem(${1:GUIContent content}, ${2:boolean on}, ${3:MenuFunction2 func}, ${4:object userData});" },
		{ "trigger": "GenericMenu.MenuFunction()", "contents": "GenericMenu.MenuFunction();" },
		{ "trigger": "GenericMenu.AddDisabledItem(content)", "contents": "GenericMenu.AddDisabledItem(${1:GUIContent content});" },
		{ "trigger": "GenericMenu.GetItemCount()", "contents": "GenericMenu.GetItemCount();" },
		{ "trigger": "PropertyModification", "contents": "PropertyModification" },
		{ "trigger": "PropertyModification.propertyPath", "contents": "PropertyModification.propertyPath" },
		{ "trigger": "PropertyModification.objectReference", "contents": "PropertyModification.objectReference" },
		{ "trigger": "PropertyModification.target", "contents": "PropertyModification.target" },
		{ "trigger": "PropertyModification.value", "contents": "PropertyModification.value" },
		{ "trigger": "Help", "contents": "Help" },
		{ "trigger": "Help.BrowseURL(url)", "contents": "Help.BrowseURL(${1:String url});" },
		{ "trigger": "Help.ShowHelpPage(page)", "contents": "Help.ShowHelpPage(${1:String page});" },
		{ "trigger": "Help.ShowHelpForObject(obj)", "contents": "Help.ShowHelpForObject(${1:Object obj});" },
		{ "trigger": "Help.HasHelpForObject(obj)", "contents": "Help.HasHelpForObject(${1:Object obj});" },
		{ "trigger": "Selection", "contents": "Selection" },
		{ "trigger": "Selection.activeInstanceID", "contents": "Selection.activeInstanceID" },
		{ "trigger": "Selection.activeGameObject", "contents": "Selection.activeGameObject" },
		{ "trigger": "Selection.GetTransforms(mode)", "contents": "Selection.GetTransforms(${1:SelectionMode mode});" },
		{ "trigger": "Selection.activeObject", "contents": "Selection.activeObject" },
		{ "trigger": "Selection.Contains(instanceID)", "contents": "Selection.Contains(${1:int instanceID});" },
		{ "trigger": "Selection.Contains(obj)", "contents": "Selection.Contains(${1:Object obj});" },
		{ "trigger": "Selection.gameObjects", "contents": "Selection.gameObjects" },
		{ "trigger": "Selection.instanceIDs", "contents": "Selection.instanceIDs" },
		{ "trigger": "Selection.objects", "contents": "Selection.objects" },
		{ "trigger": "Selection.transforms", "contents": "Selection.transforms" },
		{ "trigger": "Selection.activeTransform", "contents": "Selection.activeTransform" },
		{ "trigger": "Selection.GetFiltered(type, mode)", "contents": "Selection.GetFiltered(${1:Type type}, ${2:SelectionMode mode});" },
		{ "trigger": "SubstanceArchive", "contents": "SubstanceArchive" },
		{ "trigger": "LODUtility", "contents": "LODUtility" },
		{ "trigger": "LODUtility.CalculateLODGroupBoundingBox(group)", "contents": "LODUtility.CalculateLODGroupBoundingBox(${1:LODGroup group});" },
		{ "trigger": "TextureImporter", "contents": "TextureImporter" },
		{ "trigger": "TextureImporter.textureFormat", "contents": "TextureImporter.textureFormat" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceEnd", "contents": "TextureImporter.mipmapFadeDistanceEnd" },
		{ "trigger": "TextureImporter.mipmapFilter", "contents": "TextureImporter.mipmapFilter" },
		{ "trigger": "TextureImporter.heightmapScale", "contents": "TextureImporter.heightmapScale" },
		{ "trigger": "TextureImporter.convertToNormalmap", "contents": "TextureImporter.convertToNormalmap" },
		{ "trigger": "TextureImporter.grayscaleToAlpha", "contents": "TextureImporter.grayscaleToAlpha" },
		{ "trigger": "TextureImporter.generateCubemap", "contents": "TextureImporter.generateCubemap" },
		{ "trigger": "TextureImporter.compressionQuality", "contents": "TextureImporter.compressionQuality" },
		{ "trigger": "TextureImporter.DoesSourceTextureHaveAlpha()", "contents": "TextureImporter.DoesSourceTextureHaveAlpha();" },
		{ "trigger": "TextureImporter.borderMipmap", "contents": "TextureImporter.borderMipmap" },
		{ "trigger": "TextureImporter.normalmap", "contents": "TextureImporter.normalmap" },
		{ "trigger": "TextureImporter.wrapMode", "contents": "TextureImporter.wrapMode" },
		{ "trigger": "TextureImporter.ClearPlatformTextureSettings(platform)", "contents": "TextureImporter.ClearPlatformTextureSettings(${1:String platform});" },
		{ "trigger": "TextureImporter.linearTexture", "contents": "TextureImporter.linearTexture" },
		{ "trigger": "TextureImporter.isReadable", "contents": "TextureImporter.isReadable" },
		{ "trigger": "TextureImporter.anisoLevel", "contents": "TextureImporter.anisoLevel" },
		{ "trigger": "TextureImporter.DoesSourceTextureHaveColor()", "contents": "TextureImporter.DoesSourceTextureHaveColor();" },
		{ "trigger": "TextureImporter.maxTextureSize", "contents": "TextureImporter.maxTextureSize" },
		{ "trigger": "TextureImporter.normalmapFilter", "contents": "TextureImporter.normalmapFilter" },
		{ "trigger": "TextureImporter.generateMipsInLinearSpace", "contents": "TextureImporter.generateMipsInLinearSpace" },
		{ "trigger": "TextureImporter.mipmapFadeDistanceStart", "contents": "TextureImporter.mipmapFadeDistanceStart" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, out maxTextureSize, out textureFormat, out compressionQuality)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:String platform}, ${2:int out maxTextureSize}, ${3:TextureImporterFormat out textureFormat}, ${4:int out compressionQuality});" },
		{ "trigger": "TextureImporter.GetPlatformTextureSettings(platform, out maxTextureSize, out textureFormat)", "contents": "TextureImporter.GetPlatformTextureSettings(${1:String platform}, ${2:int out maxTextureSize}, ${3:TextureImporterFormat out textureFormat});" },
		{ "trigger": "TextureImporter.mipMapBias", "contents": "TextureImporter.mipMapBias" },
		{ "trigger": "TextureImporter.fadeout", "contents": "TextureImporter.fadeout" },
		{ "trigger": "TextureImporter.textureType", "contents": "TextureImporter.textureType" },
		{ "trigger": "TextureImporter.mipmapEnabled", "contents": "TextureImporter.mipmapEnabled" },
		{ "trigger": "TextureImporter.SetTextureSettings(src)", "contents": "TextureImporter.SetTextureSettings(${1:TextureImporterSettings src});" },
		{ "trigger": "TextureImporter.npotScale", "contents": "TextureImporter.npotScale" },
		{ "trigger": "TextureImporter.ReadTextureSettings(dest)", "contents": "TextureImporter.ReadTextureSettings(${1:TextureImporterSettings dest});" },
		{ "trigger": "TextureImporter.lightmap", "contents": "TextureImporter.lightmap" },
		{ "trigger": "TextureImporter.filterMode", "contents": "TextureImporter.filterMode" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat, compressionQuality)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:String platform}, ${2:int maxTextureSize}, ${3:TextureImporterFormat textureFormat}, ${4:int compressionQuality});" },
		{ "trigger": "TextureImporter.SetPlatformTextureSettings(platform, maxTextureSize, textureFormat)", "contents": "TextureImporter.SetPlatformTextureSettings(${1:String platform}, ${2:int maxTextureSize}, ${3:TextureImporterFormat textureFormat});" },
		{ "trigger": "ProceduralTexture", "contents": "ProceduralTexture" },
		{ "trigger": "ProceduralTexture.GetProceduralOutputType()", "contents": "ProceduralTexture.GetProceduralOutputType();" },
		{ "trigger": "ModelImporterClipAnimation", "contents": "ModelImporterClipAnimation" },
		{ "trigger": "ModelImporterClipAnimation.takeName", "contents": "ModelImporterClipAnimation.takeName" },
		{ "trigger": "ModelImporterClipAnimation.keepAdditionalBonesAnimation", "contents": "ModelImporterClipAnimation.keepAdditionalBonesAnimation" },
		{ "trigger": "ModelImporterClipAnimation.lockRootHeightY", "contents": "ModelImporterClipAnimation.lockRootHeightY" },
		{ "trigger": "ModelImporterClipAnimation.rotationOffset", "contents": "ModelImporterClipAnimation.rotationOffset" },
		{ "trigger": "ModelImporterClipAnimation.lastFrame", "contents": "ModelImporterClipAnimation.lastFrame" },
		{ "trigger": "ModelImporterClipAnimation.lockRootRotation", "contents": "ModelImporterClipAnimation.lockRootRotation" },
		{ "trigger": "ModelImporterClipAnimation.cycleOffset", "contents": "ModelImporterClipAnimation.cycleOffset" },
		{ "trigger": "ModelImporterClipAnimation.loopPose", "contents": "ModelImporterClipAnimation.loopPose" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionY", "contents": "ModelImporterClipAnimation.keepOriginalPositionY" },
		{ "trigger": "ModelImporterClipAnimation.name", "contents": "ModelImporterClipAnimation.name" },
		{ "trigger": "ModelImporterClipAnimation.heightFromFeet", "contents": "ModelImporterClipAnimation.heightFromFeet" },
		{ "trigger": "ModelImporterClipAnimation.heightOffset", "contents": "ModelImporterClipAnimation.heightOffset" },
		{ "trigger": "ModelImporterClipAnimation.wrapMode", "contents": "ModelImporterClipAnimation.wrapMode" },
		{ "trigger": "ModelImporterClipAnimation.mirror", "contents": "ModelImporterClipAnimation.mirror" },
		{ "trigger": "ModelImporterClipAnimation.lockRootPositionXZ", "contents": "ModelImporterClipAnimation.lockRootPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalOrientation", "contents": "ModelImporterClipAnimation.keepOriginalOrientation" },
		{ "trigger": "ModelImporterClipAnimation.keepOriginalPositionXZ", "contents": "ModelImporterClipAnimation.keepOriginalPositionXZ" },
		{ "trigger": "ModelImporterClipAnimation.loop", "contents": "ModelImporterClipAnimation.loop" },
		{ "trigger": "ModelImporterClipAnimation.firstFrame", "contents": "ModelImporterClipAnimation.firstFrame" },
		{ "trigger": "PrefabUtility", "contents": "PrefabUtility" },
		{ "trigger": "PrefabUtility.CreateEmptyPrefab(path)", "contents": "PrefabUtility.CreateEmptyPrefab(${1:String path});" },
		{ "trigger": "PrefabUtility.SetPropertyModifications(targetPrefab, modifications)", "contents": "PrefabUtility.SetPropertyModifications(${1:Object targetPrefab}, ${2:PropertyModification[] modifications});" },
		{ "trigger": "PrefabUtility.RecordPrefabInstancePropertyModifications(targetObject)", "contents": "PrefabUtility.RecordPrefabInstancePropertyModifications(${1:Object targetObject});" },
		{ "trigger": "PrefabUtility.GetPrefabParent(source)", "contents": "PrefabUtility.GetPrefabParent(${1:Object source});" },
		{ "trigger": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(target)", "contents": "PrefabUtility.FindRootGameObjectWithSameParentPrefab(${1:GameObject target});" },
		{ "trigger": "PrefabUtility.FindPrefabRoot(source)", "contents": "PrefabUtility.FindPrefabRoot(${1:GameObject source});" },
		{ "trigger": "PrefabUtility.MergeAllPrefabInstances(targetObject)", "contents": "PrefabUtility.MergeAllPrefabInstances(${1:Object targetObject});" },
		{ "trigger": "PrefabUtility.GetPrefabType(target)", "contents": "PrefabUtility.GetPrefabType(${1:Object target});" },
		{ "trigger": "PrefabUtility.IsComponentAddedToPrefabInstance(source)", "contents": "PrefabUtility.IsComponentAddedToPrefabInstance(${1:Object source});" },
		{ "trigger": "PrefabUtility.GetPropertyModifications(targetPrefab)", "contents": "PrefabUtility.GetPropertyModifications(${1:Object targetPrefab});" },
		{ "trigger": "PrefabUtility.ResetToPrefabState(obj)", "contents": "PrefabUtility.ResetToPrefabState(${1:Object obj});" },
		{ "trigger": "PrefabUtility.GetPrefabObject(targetObject)", "contents": "PrefabUtility.GetPrefabObject(${1:Object targetObject});" },
		{ "trigger": "PrefabUtility.ReplacePrefab(go, targetPrefab, options)", "contents": "PrefabUtility.ReplacePrefab(${1:GameObject go}, ${2:Object targetPrefab}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default});" },
		{ "trigger": "PrefabUtility.FindValidUploadPrefabInstanceRoot(target)", "contents": "PrefabUtility.FindValidUploadPrefabInstanceRoot(${1:GameObject target});" },
		{ "trigger": "PrefabUtility.CreatePrefab(path, go, options)", "contents": "PrefabUtility.CreatePrefab(${1:String path}, ${2:GameObject go}, ${3:ReplacePrefabOptions options = ReplacePrefabOptions.Default});" },
		{ "trigger": "PrefabUtility.InstantiatePrefab(target)", "contents": "PrefabUtility.InstantiatePrefab(${1:Object target});" },
		{ "trigger": "PrefabUtility.RevertPrefabInstance(go)", "contents": "PrefabUtility.RevertPrefabInstance(${1:GameObject go});" },
		{ "trigger": "PrefabUtility.DisconnectPrefabInstance(targetObject)", "contents": "PrefabUtility.DisconnectPrefabInstance(${1:Object targetObject});" },
		{ "trigger": "PrefabUtility.InstantiateAttachedAsset(targetObject)", "contents": "PrefabUtility.InstantiateAttachedAsset(${1:Object targetObject});" },
		{ "trigger": "PrefabUtility.ReconnectToLastPrefab(go)", "contents": "PrefabUtility.ReconnectToLastPrefab(${1:GameObject go});" },
		{ "trigger": "AssetModificationProcessor", "contents": "AssetModificationProcessor" },
		{ "trigger": "AssetModificationProcessor.IsOpenForEdit(assetPath, out message)", "contents": "AssetModificationProcessor.IsOpenForEdit(${1:String assetPath}, ${2:String out message});" },
		{ "trigger": "AssetModificationProcessor.OnWillMoveAsset(oldPath, newPath)", "contents": "AssetModificationProcessor.OnWillMoveAsset(${1:String oldPath}, ${2:String newPath});" },
		{ "trigger": "AssetModificationProcessor.OnWillCreateAsset(path)", "contents": "AssetModificationProcessor.OnWillCreateAsset(${1:String path});" },
		{ "trigger": "AssetModificationProcessor.OnWillDeleteAsset(assetPath, option)", "contents": "AssetModificationProcessor.OnWillDeleteAsset(${1:String assetPath}, ${2:RemoveAssetOptions option});" },
		{ "trigger": "AssetModificationProcessor.OnWillSaveAssets(paths)", "contents": "AssetModificationProcessor.OnWillSaveAssets(${1:string[] paths});" },
		{ "trigger": "AnimationClipCurveData", "contents": "AnimationClipCurveData" },
		{ "trigger": "AnimationClipCurveData.path", "contents": "AnimationClipCurveData.path" },
		{ "trigger": "AnimationClipCurveData.propertyName", "contents": "AnimationClipCurveData.propertyName" },
		{ "trigger": "AnimationClipCurveData.type", "contents": "AnimationClipCurveData.type" },
		{ "trigger": "AnimationClipCurveData.curve", "contents": "AnimationClipCurveData.curve" },
		{ "trigger": "AnimationClipCurveData.target", "contents": "AnimationClipCurveData.target" },
		{ "trigger": "MenuCommand", "contents": "MenuCommand" },
		{ "trigger": "MenuCommand.userData", "contents": "MenuCommand.userData" },
		{ "trigger": "MenuCommand.context", "contents": "MenuCommand.context" },
		{ "trigger": "MenuCommand(inContext, inUserData)", "contents": "MenuCommand(${1:Object inContext}, ${2:int inUserData});" },
		{ "trigger": "MenuCommand(inContext)", "contents": "MenuCommand(${1:Object inContext});" },
		{ "trigger": "EditorGUILayout", "contents": "EditorGUILayout" },
		{ "trigger": "EditorGUILayout.Space()", "contents": "EditorGUILayout.Space();" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:System.Enum selected}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumPopup(selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:System.Enum selected}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:String label}, ${2:System.Enum selected}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:String label}, ${2:System.Enum selected}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, params options)", "contents": "EditorGUILayout.EnumPopup(${1:GUIContent label}, ${2:System.Enum selected}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumPopup(label, selected, style, params options)", "contents": "EditorGUILayout.EnumPopup(${1:GUIContent label}, ${2:System.Enum selected}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(value, params options)", "contents": "EditorGUILayout.FloatField(${1:float value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:float value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, params options)", "contents": "EditorGUILayout.FloatField(${1:String label}, ${2:float value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:String label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, params options)", "contents": "EditorGUILayout.FloatField(${1:GUIContent label}, ${2:float value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.FloatField(label, value, style, params options)", "contents": "EditorGUILayout.FloatField(${1:GUIContent label}, ${2:float value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(ref minValue, ref maxValue, minLimit, maxLimit, params options)", "contents": "EditorGUILayout.MinMaxSlider(${1:float ref minValue}, ${2:float ref maxValue}, ${3:float minLimit}, ${4:float maxLimit}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MinMaxSlider(label, ref minValue, ref maxValue, minLimit, maxLimit, params options)", "contents": "EditorGUILayout.MinMaxSlider(${1:GUIContent label}, ${2:float ref minValue}, ${3:float ref maxValue}, ${4:float minLimit}, ${5:float maxLimit}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BoundsField(value, params options)", "contents": "EditorGUILayout.BoundsField(${1:Bounds value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, params options)", "contents": "EditorGUILayout.BoundsField(${1:String label}, ${2:Bounds value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BoundsField(label, value, params options)", "contents": "EditorGUILayout.BoundsField(${1:GUIContent label}, ${2:Bounds value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, params options)", "contents": "EditorGUILayout.LabelField(${1:String label}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, params options)", "contents": "EditorGUILayout.LabelField(${1:String label}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, style, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, params options)", "contents": "EditorGUILayout.LabelField(${1:String label}, ${2:String label2}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, params options)", "contents": "EditorGUILayout.LabelField(${1:String label}, ${2:String label2}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIContent label2}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LabelField(label, label2, style, params options)", "contents": "EditorGUILayout.LabelField(${1:GUIContent label}, ${2:GUIContent label2}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, params options)", "contents": "EditorGUILayout.SelectableLabel(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.SelectableLabel(text, style, params options)", "contents": "EditorGUILayout.SelectableLabel(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:boolean alwaysShowHorizontal}, ${3:boolean alwaysShowVertical}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, horizontalScrollbar, verticalScrollbar, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle horizontalScrollbar}, ${3:GUIStyle verticalScrollbar}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, style)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:GUIStyle style});" },
		{ "trigger": "EditorGUILayout.BeginScrollView(scrollPosition, alwaysShowHorizontal, alwaysShowVertical, horizontalScrollbar, verticalScrollbar, background, params options)", "contents": "EditorGUILayout.BeginScrollView(${1:Vector2 scrollPosition}, ${2:boolean alwaysShowHorizontal}, ${3:boolean alwaysShowVertical}, ${4:GUIStyle horizontalScrollbar}, ${5:GUIStyle verticalScrollbar}, ${6:GUIStyle background}, ${7:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ColorField(value, params options)", "contents": "EditorGUILayout.ColorField(${1:Color value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, params options)", "contents": "EditorGUILayout.ColorField(${1:String label}, ${2:Color value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ColorField(label, value, params options)", "contents": "EditorGUILayout.ColorField(${1:GUIContent label}, ${2:Color value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(text, params options)", "contents": "EditorGUILayout.TextField(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(text, style, params options)", "contents": "EditorGUILayout.TextField(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(label, text, params options)", "contents": "EditorGUILayout.TextField(${1:String label}, ${2:String text}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, params options)", "contents": "EditorGUILayout.TextField(${1:String label}, ${2:String text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(label, text, params options)", "contents": "EditorGUILayout.TextField(${1:GUIContent label}, ${2:String text}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextField(label, text, style, params options)", "contents": "EditorGUILayout.TextField(${1:GUIContent label}, ${2:String text}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type)", "contents": "EditorGUILayout.HelpBox(${1:String message}, ${2:MessageType type});" },
		{ "trigger": "EditorGUILayout.HelpBox(message, type, wide)", "contents": "EditorGUILayout.HelpBox(${1:String message}, ${2:MessageType type}, ${3:boolean wide});" },
		{ "trigger": "EditorGUILayout.PropertyField(property, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PropertyField(property, includeChildren, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:boolean includeChildren}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PropertyField(property, label, includeChildren, params options)", "contents": "EditorGUILayout.PropertyField(${1:SerializedProperty property}, ${2:GUIContent label}, ${3:boolean includeChildren}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EndToggleGroup()", "contents": "EditorGUILayout.EndToggleGroup();" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:string[] displayedOptions}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:string[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:GUIContent[] displayedOptions}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:int selectedIndex}, ${2:GUIContent[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:String label}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:String label}, ${2:int selectedIndex}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, params options)", "contents": "EditorGUILayout.Popup(${1:GUIContent label}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Popup(label, selectedIndex, displayedOptions, style, params options)", "contents": "EditorGUILayout.Popup(${1:GUIContent label}, ${2:int selectedIndex}, ${3:GUIContent[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:String label}, ${2:boolean toggle});" },
		{ "trigger": "EditorGUILayout.BeginToggleGroup(label, toggle)", "contents": "EditorGUILayout.BeginToggleGroup(${1:GUIContent label}, ${2:boolean toggle});" },
		{ "trigger": "EditorGUILayout.TextArea(text, params options)", "contents": "EditorGUILayout.TextArea(${1:String text}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TextArea(text, style, params options)", "contents": "EditorGUILayout.TextArea(${1:String text}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.RectField(value, params options)", "contents": "EditorGUILayout.RectField(${1:Rect value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.RectField(label, value, params options)", "contents": "EditorGUILayout.RectField(${1:String label}, ${2:Rect value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.RectField(label, value, params options)", "contents": "EditorGUILayout.RectField(${1:GUIContent label}, ${2:Rect value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObj)", "contents": "EditorGUILayout.InspectorTitlebar(${1:boolean foldout}, ${2:Object targetObj});" },
		{ "trigger": "EditorGUILayout.InspectorTitlebar(foldout, targetObjs)", "contents": "EditorGUILayout.InspectorTitlebar(${1:boolean foldout}, ${2:Object[] targetObjs});" },
		{ "trigger": "EditorGUILayout.Slider(value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:float value}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:String label}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Slider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:GUIContent label}, ${2:float value}, ${3:float leftValue}, ${4:float rightValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:String label}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Slider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.Slider(${1:SerializedProperty property}, ${2:float leftValue}, ${3:float rightValue}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EndVertical()", "contents": "EditorGUILayout.EndVertical();" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:string[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:string[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:int selectedValue}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:String label}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:String label}, ${2:int selectedValue}, ${3:string[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:GUIContent label}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(label, selectedValue, displayedOptions, optionValues, style, params options)", "contents": "EditorGUILayout.IntPopup(${1:GUIContent label}, ${2:int selectedValue}, ${3:GUIContent[] displayedOptions}, ${4:int[] optionValues}, ${5:GUIStyle style}, ${6:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, params options)", "contents": "EditorGUILayout.IntPopup(${1:SerializedProperty property}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntPopup(property, displayedOptions, optionValues, label, params options)", "contents": "EditorGUILayout.IntPopup(${1:SerializedProperty property}, ${2:GUIContent[] displayedOptions}, ${3:int[] optionValues}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(password, params options)", "contents": "EditorGUILayout.PasswordField(${1:String password}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:String password}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, params options)", "contents": "EditorGUILayout.PasswordField(${1:String label}, ${2:String password}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:String label}, ${2:String password}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, params options)", "contents": "EditorGUILayout.PasswordField(${1:GUIContent label}, ${2:String password}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.PasswordField(label, password, style, params options)", "contents": "EditorGUILayout.PasswordField(${1:GUIContent label}, ${2:String password}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(value, params options)", "contents": "EditorGUILayout.CurveField(${1:AnimationCurve value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, params options)", "contents": "EditorGUILayout.CurveField(${1:String label}, ${2:AnimationCurve value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, params options)", "contents": "EditorGUILayout.CurveField(${1:GUIContent label}, ${2:AnimationCurve value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:AnimationCurve value}, ${2:Color color}, ${3:Rect ranges}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:String label}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.CurveField(label, value, color, ranges, params options)", "contents": "EditorGUILayout.CurveField(${1:GUIContent label}, ${2:AnimationCurve value}, ${3:Color color}, ${4:Rect ranges}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginVertical(params options)", "contents": "EditorGUILayout.BeginVertical(${1:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginVertical(style, params options)", "contents": "EditorGUILayout.BeginVertical(${1:GUIStyle style}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:GUIContent label}, ${2:System.Enum enumValue}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:String label}, ${2:System.Enum enumValue}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:GUIContent label}, ${2:System.Enum enumValue}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(label, enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:String label}, ${2:System.Enum enumValue}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, style, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:System.Enum enumValue}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EnumMaskField(enumValue, params options)", "contents": "EditorGUILayout.EnumMaskField(${1:System.Enum enumValue}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(params options)", "contents": "EditorGUILayout.BeginHorizontal(${1:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.BeginHorizontal(style, params options)", "contents": "EditorGUILayout.BeginHorizontal(${1:GUIStyle style}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Vector4Field(label, value, params options)", "contents": "EditorGUILayout.Vector4Field(${1:String label}, ${2:Vector4 value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ObjectField(obj, objType, allowSceneObjects, params options)", "contents": "EditorGUILayout.ObjectField(${1:Object obj}, ${2:System.Type objType}, ${3:boolean allowSceneObjects}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, params options)", "contents": "EditorGUILayout.ObjectField(${1:String label}, ${2:Object obj}, ${3:System.Type objType}, ${4:boolean allowSceneObjects}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.ObjectField(label, obj, objType, allowSceneObjects, params options)", "contents": "EditorGUILayout.ObjectField(${1:GUIContent label}, ${2:Object obj}, ${3:System.Type objType}, ${4:boolean allowSceneObjects}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:boolean foldout}, ${2:String content}, ${3:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUILayout.Foldout(foldout, content, style)", "contents": "EditorGUILayout.Foldout(${1:boolean foldout}, ${2:GUIContent content}, ${3:GUIStyle style = EditorStyles.foldout});" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:String label}, ${2:GUIStyle followingStyle = \"Button\"});" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:String label}, ${2:GUIStyle followingStyle}, ${3:GUIStyle labelStyle});" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:GUIContent label}, ${2:GUIStyle followingStyle = \"Button\"});" },
		{ "trigger": "EditorGUILayout.PrefixLabel(label, followingStyle, labelStyle)", "contents": "EditorGUILayout.PrefixLabel(${1:GUIContent label}, ${2:GUIStyle followingStyle}, ${3:GUIStyle labelStyle});" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:GUIContent label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:String label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUIStyle style}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:GUIContent label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MaskField(label, mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:String label}, ${2:int mask}, ${3:string[] displayedOptions}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, style, params options)", "contents": "EditorGUILayout.MaskField(${1:int mask}, ${2:string[] displayedOptions}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.MaskField(mask, displayedOptions, params options)", "contents": "EditorGUILayout.MaskField(${1:int mask}, ${2:string[] displayedOptions}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(tag, params options)", "contents": "EditorGUILayout.TagField(${1:String tag}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:String tag}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, params options)", "contents": "EditorGUILayout.TagField(${1:String label}, ${2:String tag}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:String label}, ${2:String tag}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, params options)", "contents": "EditorGUILayout.TagField(${1:GUIContent label}, ${2:String tag}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.TagField(label, tag, style, params options)", "contents": "EditorGUILayout.TagField(${1:GUIContent label}, ${2:String tag}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EndHorizontal()", "contents": "EditorGUILayout.EndHorizontal();" },
		{ "trigger": "EditorGUILayout.IntField(value, params options)", "contents": "EditorGUILayout.IntField(${1:int value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntField(value, style, params options)", "contents": "EditorGUILayout.IntField(${1:int value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntField(label, value, params options)", "contents": "EditorGUILayout.IntField(${1:String label}, ${2:int value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, params options)", "contents": "EditorGUILayout.IntField(${1:String label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntField(label, value, params options)", "contents": "EditorGUILayout.IntField(${1:GUIContent label}, ${2:int value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntField(label, value, style, params options)", "contents": "EditorGUILayout.IntField(${1:GUIContent label}, ${2:int value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(value, params options)", "contents": "EditorGUILayout.Toggle(${1:boolean value}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, params options)", "contents": "EditorGUILayout.Toggle(${1:String label}, ${2:boolean value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, params options)", "contents": "EditorGUILayout.Toggle(${1:GUIContent label}, ${2:boolean value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:boolean value}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:String label}, ${2:boolean value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Toggle(label, value, style, params options)", "contents": "EditorGUILayout.Toggle(${1:GUIContent label}, ${2:boolean value}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.Vector3Field(label, value, params options)", "contents": "EditorGUILayout.Vector3Field(${1:String label}, ${2:Vector3 value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(layer, params options)", "contents": "EditorGUILayout.LayerField(${1:int layer}, ${2:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:int layer}, ${2:GUIStyle style}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, params options)", "contents": "EditorGUILayout.LayerField(${1:String label}, ${2:int layer}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:String label}, ${2:int layer}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, params options)", "contents": "EditorGUILayout.LayerField(${1:GUIContent label}, ${2:int layer}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.LayerField(label, layer, style, params options)", "contents": "EditorGUILayout.LayerField(${1:GUIContent label}, ${2:int layer}, ${3:GUIStyle style}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:int value}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:String label}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(label, value, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:GUIContent label}, ${2:int value}, ${3:int leftValue}, ${4:int rightValue}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:String label}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.IntSlider(property, leftValue, rightValue, label, params options)", "contents": "EditorGUILayout.IntSlider(${1:SerializedProperty property}, ${2:int leftValue}, ${3:int rightValue}, ${4:GUIContent label}, ${5:GUILayoutOption[] params options});" },
		{ "trigger": "EditorGUILayout.EndScrollView()", "contents": "EditorGUILayout.EndScrollView();" },
		{ "trigger": "EditorGUILayout.Vector2Field(label, value, params options)", "contents": "EditorGUILayout.Vector2Field(${1:String label}, ${2:Vector2 value}, ${3:GUILayoutOption[] params options});" },
		{ "trigger": "MeshUtility", "contents": "MeshUtility" },
		{ "trigger": "MeshUtility.Optimize(mesh)", "contents": "MeshUtility.Optimize(${1:Mesh mesh});" },
		{ "trigger": "Tools", "contents": "Tools" },
		{ "trigger": "Tools.viewTool", "contents": "Tools.viewTool" },
		{ "trigger": "Tools.handleRotation", "contents": "Tools.handleRotation" },
		{ "trigger": "Tools.handlePosition", "contents": "Tools.handlePosition" },
		{ "trigger": "Tools.visibleLayers", "contents": "Tools.visibleLayers" },
		{ "trigger": "SerializedObject", "contents": "SerializedObject" },
		{ "trigger": "SerializedObject.SetIsDifferentCacheDirty()", "contents": "SerializedObject.SetIsDifferentCacheDirty();" },
		{ "trigger": "SerializedObject.targetObjects", "contents": "SerializedObject.targetObjects" },
		{ "trigger": "SerializedObject.GetIterator()", "contents": "SerializedObject.GetIterator();" },
		{ "trigger": "SerializedObject.isEditingMultipleObjects", "contents": "SerializedObject.isEditingMultipleObjects" },
		{ "trigger": "SerializedObject.Update()", "contents": "SerializedObject.Update();" },
		{ "trigger": "SerializedObject.CopyFromSerializedProperty(prop)", "contents": "SerializedObject.CopyFromSerializedProperty(${1:SerializedProperty prop});" },
		{ "trigger": "SerializedObject(obj)", "contents": "SerializedObject(${1:Object obj});" },
		{ "trigger": "SerializedObject(objs)", "contents": "SerializedObject(${1:Object[] objs});" },
		{ "trigger": "SerializedObject.ApplyModifiedProperties()", "contents": "SerializedObject.ApplyModifiedProperties();" },
		{ "trigger": "SerializedObject.FindProperty(propertyPath)", "contents": "SerializedObject.FindProperty(${1:String propertyPath});" },
		{ "trigger": "SerializedObject.UpdateIfDirtyOrScript()", "contents": "SerializedObject.UpdateIfDirtyOrScript();" },
		{ "trigger": "SerializedObject.targetObject", "contents": "SerializedObject.targetObject" },
		{ "trigger": "TextureImporterSettings", "contents": "TextureImporterSettings" },
		{ "trigger": "TextureImporterSettings.CopyTo(target)", "contents": "TextureImporterSettings.CopyTo(${1:TextureImporterSettings target});" },
		{ "trigger": "TextureImporterSettings.ApplyTextureType(type, applyAll)", "contents": "TextureImporterSettings.ApplyTextureType(${1:TextureImporterType type}, ${2:boolean applyAll});" },
		{ "trigger": "TextureImporterSettings.Equal(a, b)", "contents": "TextureImporterSettings.Equal(${1:TextureImporterSettings a}, ${2:TextureImporterSettings b});" },

		// Runtime Attributes
		{ "trigger": "NotConvertedAttribute", "contents": "NotConvertedAttribute" },
		{ "trigger": "ExecuteInEditMode", "contents": "ExecuteInEditMode" },
		{ "trigger": "NonSerialized", "contents": "NonSerialized" },
		{ "trigger": "ContextMenu", "contents": "ContextMenu" },
		{ "trigger": "ContextMenu(name)", "contents": "ContextMenu(${1:String name});" },
		{ "trigger": "SerializeField", "contents": "SerializeField" },
		{ "trigger": "AddComponentMenu", "contents": "AddComponentMenu" },
		{ "trigger": "AddComponentMenu(menuName)", "contents": "AddComponentMenu(${1:String menuName});" },
		{ "trigger": "PropertyAttribute", "contents": "PropertyAttribute" },
		{ "trigger": "RPC", "contents": "RPC" },
		{ "trigger": "RequireComponent", "contents": "RequireComponent" },
		{ "trigger": "RequireComponent(requiredComponent)", "contents": "RequireComponent(${1:Type requiredComponent});" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2)", "contents": "RequireComponent(${1:Type requiredComponent}, ${2:Type requiredComponent2});" },
		{ "trigger": "RequireComponent(requiredComponent, requiredComponent2, requiredComponent3)", "contents": "RequireComponent(${1:Type requiredComponent}, ${2:Type requiredComponent2}, ${3:Type requiredComponent3});" },
		{ "trigger": "ImageEffectTransformsToLDR", "contents": "ImageEffectTransformsToLDR" },
		{ "trigger": "NotRenamedAttribute", "contents": "NotRenamedAttribute" },
		{ "trigger": "HideInInspector", "contents": "HideInInspector" },
		{ "trigger": "ImageEffectOpaque", "contents": "ImageEffectOpaque" },
		{ "trigger": "Serializable", "contents": "Serializable" },
		{ "trigger": "NotFlashValidatedAttribute", "contents": "NotFlashValidatedAttribute" },

		// Editor Enumerations
		{ "trigger": "XboxBuildSubtarget", "contents": "XboxBuildSubtarget" },
		{ "trigger": "XboxBuildSubtarget.Development", "contents": "XboxBuildSubtarget.Development" },
		{ "trigger": "XboxBuildSubtarget.Debug", "contents": "XboxBuildSubtarget.Debug" },
		{ "trigger": "XboxBuildSubtarget.Master", "contents": "XboxBuildSubtarget.Master" },
		{ "trigger": "FlashBuildSubtarget", "contents": "FlashBuildSubtarget" },
		{ "trigger": "FlashBuildSubtarget.Flash11dot4", "contents": "FlashBuildSubtarget.Flash11dot4" },
		{ "trigger": "FlashBuildSubtarget.Flash11dot2", "contents": "FlashBuildSubtarget.Flash11dot2" },
		{ "trigger": "FlashBuildSubtarget.Flash11dot3", "contents": "FlashBuildSubtarget.Flash11dot3" },
		{ "trigger": "TextureImporterFormat", "contents": "TextureImporterFormat" },
		{ "trigger": "TextureImporterFormat.ATF_RGBA_JPG", "contents": "TextureImporterFormat.ATF_RGBA_JPG" },
		{ "trigger": "TextureImporterFormat.AutomaticTruecolor", "contents": "TextureImporterFormat.AutomaticTruecolor" },
		{ "trigger": "TextureImporterFormat.RGBA16", "contents": "TextureImporterFormat.RGBA16" },
		{ "trigger": "TextureImporterFormat.DXT5", "contents": "TextureImporterFormat.DXT5" },
		{ "trigger": "TextureImporterFormat.Alpha8", "contents": "TextureImporterFormat.Alpha8" },
		{ "trigger": "TextureImporterFormat.DXT1", "contents": "TextureImporterFormat.DXT1" },
		{ "trigger": "TextureImporterFormat.RGBA32", "contents": "TextureImporterFormat.RGBA32" },
		{ "trigger": "TextureImporterFormat.ETC_RGB4", "contents": "TextureImporterFormat.ETC_RGB4" },
		{ "trigger": "TextureImporterFormat.ATF_RGB_DXT1", "contents": "TextureImporterFormat.ATF_RGB_DXT1" },
		{ "trigger": "TextureImporterFormat.ATF_RGB_JPG", "contents": "TextureImporterFormat.ATF_RGB_JPG" },
		{ "trigger": "TextureImporterFormat.ATC_RGBA8", "contents": "TextureImporterFormat.ATC_RGBA8" },
		{ "trigger": "TextureImporterFormat.ARGB16", "contents": "TextureImporterFormat.ARGB16" },
		{ "trigger": "TextureImporterFormat.RGB24", "contents": "TextureImporterFormat.RGB24" },
		{ "trigger": "TextureImporterFormat.ARGB32", "contents": "TextureImporterFormat.ARGB32" },
		{ "trigger": "TextureImporterFormat.Automatic16bit", "contents": "TextureImporterFormat.Automatic16bit" },
		{ "trigger": "TextureImporterFormat.AutomaticCompressed", "contents": "TextureImporterFormat.AutomaticCompressed" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB2", "contents": "TextureImporterFormat.PVRTC_RGB2" },
		{ "trigger": "TextureImporterFormat.ATC_RGB4", "contents": "TextureImporterFormat.ATC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGB4", "contents": "TextureImporterFormat.PVRTC_RGB4" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA2", "contents": "TextureImporterFormat.PVRTC_RGBA2" },
		{ "trigger": "TextureImporterFormat.RGB16", "contents": "TextureImporterFormat.RGB16" },
		{ "trigger": "TextureImporterFormat.PVRTC_RGBA4", "contents": "TextureImporterFormat.PVRTC_RGBA4" },
		{ "trigger": "AndroidTargetDevice", "contents": "AndroidTargetDevice" },
		{ "trigger": "AndroidTargetDevice.ARMv7", "contents": "AndroidTargetDevice.ARMv7" },
		{ "trigger": "ReplacePrefabOptions", "contents": "ReplacePrefabOptions" },
		{ "trigger": "ReplacePrefabOptions.Default", "contents": "ReplacePrefabOptions.Default" },
		{ "trigger": "ReplacePrefabOptions.ConnectToPrefab", "contents": "ReplacePrefabOptions.ConnectToPrefab" },
		{ "trigger": "ReplacePrefabOptions.ReplaceNameBased", "contents": "ReplacePrefabOptions.ReplaceNameBased" },
		{ "trigger": "ViewTool", "contents": "ViewTool" },
		{ "trigger": "ViewTool.None", "contents": "ViewTool.None" },
		{ "trigger": "ViewTool.Pan", "contents": "ViewTool.Pan" },
		{ "trigger": "ViewTool.Zoom", "contents": "ViewTool.Zoom" },
		{ "trigger": "ViewTool.FPS", "contents": "ViewTool.FPS" },
		{ "trigger": "ViewTool.Orbit", "contents": "ViewTool.Orbit" },
		{ "trigger": "AssetDeleteResult", "contents": "AssetDeleteResult" },
		{ "trigger": "AssetDeleteResult.FailedDelete", "contents": "AssetDeleteResult.FailedDelete" },
		{ "trigger": "AssetDeleteResult.DidDelete", "contents": "AssetDeleteResult.DidDelete" },
		{ "trigger": "AssetDeleteResult.DidNotDelete", "contents": "AssetDeleteResult.DidNotDelete" },
		{ "trigger": "TextureImporterType", "contents": "TextureImporterType" },
		{ "trigger": "TextureImporterType.Reflection", "contents": "TextureImporterType.Reflection" },
		{ "trigger": "TextureImporterType.Bump", "contents": "TextureImporterType.Bump" },
		{ "trigger": "TextureImporterType.Image", "contents": "TextureImporterType.Image" },
		{ "trigger": "TextureImporterType.Cursor", "contents": "TextureImporterType.Cursor" },
		{ "trigger": "TextureImporterType.Cookie", "contents": "TextureImporterType.Cookie" },
		{ "trigger": "TextureImporterType.Lightmap", "contents": "TextureImporterType.Lightmap" },
		{ "trigger": "TextureImporterType.GUI", "contents": "TextureImporterType.GUI" },
		{ "trigger": "TextureImporterType.Advanced", "contents": "TextureImporterType.Advanced" },
		{ "trigger": "FontRenderingMode", "contents": "FontRenderingMode" },
		{ "trigger": "FontRenderingMode.OSDefault", "contents": "FontRenderingMode.OSDefault" },
		{ "trigger": "FontRenderingMode.HintedRaster", "contents": "FontRenderingMode.HintedRaster" },
		{ "trigger": "FontRenderingMode.Smooth", "contents": "FontRenderingMode.Smooth" },
		{ "trigger": "FontRenderingMode.HintedSmooth", "contents": "FontRenderingMode.HintedSmooth" },
		{ "trigger": "iOSTargetOSVersion", "contents": "iOSTargetOSVersion" },
		{ "trigger": "iOSTargetOSVersion.Unknown", "contents": "iOSTargetOSVersion.Unknown" },
		{ "trigger": "iOSTargetOSVersion.iOS_6_0", "contents": "iOSTargetOSVersion.iOS_6_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_5_1", "contents": "iOSTargetOSVersion.iOS_5_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_5_0", "contents": "iOSTargetOSVersion.iOS_5_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_0", "contents": "iOSTargetOSVersion.iOS_4_0" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_1", "contents": "iOSTargetOSVersion.iOS_4_1" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_2", "contents": "iOSTargetOSVersion.iOS_4_2" },
		{ "trigger": "iOSTargetOSVersion.iOS_4_3", "contents": "iOSTargetOSVersion.iOS_4_3" },
		{ "trigger": "WiiMemoryLabel", "contents": "WiiMemoryLabel" },
		{ "trigger": "WiiMemoryLabel.GLib", "contents": "WiiMemoryLabel.GLib" },
		{ "trigger": "WiiMemoryLabel.WiiVI", "contents": "WiiMemoryLabel.WiiVI" },
		{ "trigger": "WiiMemoryLabel.BatchedGeometry", "contents": "WiiMemoryLabel.BatchedGeometry" },
		{ "trigger": "WiiMemoryLabel.PoolAlloc", "contents": "WiiMemoryLabel.PoolAlloc" },
		{ "trigger": "WiiMemoryLabel.ImmediateGeometry", "contents": "WiiMemoryLabel.ImmediateGeometry" },
		{ "trigger": "WiiMemoryLabel.Transform", "contents": "WiiMemoryLabel.Transform" },
		{ "trigger": "WiiMemoryLabel.Texture", "contents": "WiiMemoryLabel.Texture" },
		{ "trigger": "WiiMemoryLabel.Particles", "contents": "WiiMemoryLabel.Particles" },
		{ "trigger": "WiiMemoryLabel.Permanent", "contents": "WiiMemoryLabel.Permanent" },
		{ "trigger": "WiiMemoryLabel.Resource", "contents": "WiiMemoryLabel.Resource" },
		{ "trigger": "WiiMemoryLabel.ScriptManager", "contents": "WiiMemoryLabel.ScriptManager" },
		{ "trigger": "WiiMemoryLabel.DynamicGeometry", "contents": "WiiMemoryLabel.DynamicGeometry" },
		{ "trigger": "WiiMemoryLabel.WiiRVLAux2", "contents": "WiiMemoryLabel.WiiRVLAux2" },
		{ "trigger": "WiiMemoryLabel.PVS", "contents": "WiiMemoryLabel.PVS" },
		{ "trigger": "WiiMemoryLabel.Navigation", "contents": "WiiMemoryLabel.Navigation" },
		{ "trigger": "WiiMemoryLabel.MallocFree", "contents": "WiiMemoryLabel.MallocFree" },
		{ "trigger": "WiiMemoryLabel.WiiStrapReminder", "contents": "WiiMemoryLabel.WiiStrapReminder" },
		{ "trigger": "WiiMemoryLabel.Default", "contents": "WiiMemoryLabel.Default" },
		{ "trigger": "WiiMemoryLabel.WiiDefault2", "contents": "WiiMemoryLabel.WiiDefault2" },
		{ "trigger": "WiiMemoryLabel.Serialization", "contents": "WiiMemoryLabel.Serialization" },
		{ "trigger": "WiiMemoryLabel.GLibImage", "contents": "WiiMemoryLabel.GLibImage" },
		{ "trigger": "WiiMemoryLabel.WiiDefault1", "contents": "WiiMemoryLabel.WiiDefault1" },
		{ "trigger": "WiiMemoryLabel.UTF16String", "contents": "WiiMemoryLabel.UTF16String" },
		{ "trigger": "WiiMemoryLabel.WiiMovie", "contents": "WiiMemoryLabel.WiiMovie" },
		{ "trigger": "WiiMemoryLabel.VertexData", "contents": "WiiMemoryLabel.VertexData" },
		{ "trigger": "WiiMemoryLabel.WiiSkinning", "contents": "WiiMemoryLabel.WiiSkinning" },
		{ "trigger": "WiiMemoryLabel.BaseObject", "contents": "WiiMemoryLabel.BaseObject" },
		{ "trigger": "WiiMemoryLabel.WiiHBM", "contents": "WiiMemoryLabel.WiiHBM" },
		{ "trigger": "WiiMemoryLabel.Geometry", "contents": "WiiMemoryLabel.Geometry" },
		{ "trigger": "WiiMemoryLabel.Mono", "contents": "WiiMemoryLabel.Mono" },
		{ "trigger": "WiiMemoryLabel.NewDelete", "contents": "WiiMemoryLabel.NewDelete" },
		{ "trigger": "WiiMemoryLabel.WiiRVLAux1", "contents": "WiiMemoryLabel.WiiRVLAux1" },
		{ "trigger": "WiiMemoryLabel.AudioProcessing", "contents": "WiiMemoryLabel.AudioProcessing" },
		{ "trigger": "WiiMemoryLabel.WiiRenderTexture", "contents": "WiiMemoryLabel.WiiRenderTexture" },
		{ "trigger": "WiiMemoryLabel.STL", "contents": "WiiMemoryLabel.STL" },
		{ "trigger": "WiiMemoryLabel.Audio", "contents": "WiiMemoryLabel.Audio" },
		{ "trigger": "WiiMemoryLabel.Physics", "contents": "WiiMemoryLabel.Physics" },
		{ "trigger": "WiiMemoryLabel.Animation", "contents": "WiiMemoryLabel.Animation" },
		{ "trigger": "WiiMemoryLabel.GarbageCollector", "contents": "WiiMemoryLabel.GarbageCollector" },
		{ "trigger": "WiiMemoryLabel.WiiNand", "contents": "WiiMemoryLabel.WiiNand" },
		{ "trigger": "WiiMemoryLabel.AudioData", "contents": "WiiMemoryLabel.AudioData" },
		{ "trigger": "WiiMemoryLabel.WiiInput", "contents": "WiiMemoryLabel.WiiInput" },
		{ "trigger": "WiiMemoryLabel.MonoCode", "contents": "WiiMemoryLabel.MonoCode" },
		{ "trigger": "WiiMemoryLabel.Terrain", "contents": "WiiMemoryLabel.Terrain" },
		{ "trigger": "WiiMemoryLabel.Skinning", "contents": "WiiMemoryLabel.Skinning" },
		{ "trigger": "WiiMemoryLabel.ThreadStack", "contents": "WiiMemoryLabel.ThreadStack" },
		{ "trigger": "WiiMemoryLabel.Renderer", "contents": "WiiMemoryLabel.Renderer" },
		{ "trigger": "WiiMemoryLabel.File", "contents": "WiiMemoryLabel.File" },
		{ "trigger": "WiiMemoryLabel.WiiPThreads", "contents": "WiiMemoryLabel.WiiPThreads" },
		{ "trigger": "WiiMemoryLabel.Font", "contents": "WiiMemoryLabel.Font" },
		{ "trigger": "WiiMemoryLabel.Utility", "contents": "WiiMemoryLabel.Utility" },
		{ "trigger": "MessageType", "contents": "MessageType" },
		{ "trigger": "MessageType.Info", "contents": "MessageType.Info" },
		{ "trigger": "MessageType.None", "contents": "MessageType.None" },
		{ "trigger": "MessageType.Warning", "contents": "MessageType.Warning" },
		{ "trigger": "MessageType.Error", "contents": "MessageType.Error" },
		{ "trigger": "AudioImporterFormat", "contents": "AudioImporterFormat" },
		{ "trigger": "AudioImporterFormat.Compressed", "contents": "AudioImporterFormat.Compressed" },
		{ "trigger": "AudioImporterFormat.Native", "contents": "AudioImporterFormat.Native" },
		{ "trigger": "MouseCursor", "contents": "MouseCursor" },
		{ "trigger": "MouseCursor.MoveArrow", "contents": "MouseCursor.MoveArrow" },
		{ "trigger": "MouseCursor.FPS", "contents": "MouseCursor.FPS" },
		{ "trigger": "MouseCursor.ResizeVertical", "contents": "MouseCursor.ResizeVertical" },
		{ "trigger": "MouseCursor.Text", "contents": "MouseCursor.Text" },
		{ "trigger": "MouseCursor.ResizeUpRight", "contents": "MouseCursor.ResizeUpRight" },
		{ "trigger": "MouseCursor.ArrowMinus", "contents": "MouseCursor.ArrowMinus" },
		{ "trigger": "MouseCursor.Orbit", "contents": "MouseCursor.Orbit" },
		{ "trigger": "MouseCursor.Zoom", "contents": "MouseCursor.Zoom" },
		{ "trigger": "MouseCursor.ResizeHorizontal", "contents": "MouseCursor.ResizeHorizontal" },
		{ "trigger": "MouseCursor.Link", "contents": "MouseCursor.Link" },
		{ "trigger": "MouseCursor.Arrow", "contents": "MouseCursor.Arrow" },
		{ "trigger": "MouseCursor.SlideArrow", "contents": "MouseCursor.SlideArrow" },
		{ "trigger": "MouseCursor.ScaleArrow", "contents": "MouseCursor.ScaleArrow" },
		{ "trigger": "MouseCursor.CustomCursor", "contents": "MouseCursor.CustomCursor" },
		{ "trigger": "MouseCursor.ResizeUpLeft", "contents": "MouseCursor.ResizeUpLeft" },
		{ "trigger": "MouseCursor.ArrowPlus", "contents": "MouseCursor.ArrowPlus" },
		{ "trigger": "MouseCursor.Pan", "contents": "MouseCursor.Pan" },
		{ "trigger": "MouseCursor.RotateArrow", "contents": "MouseCursor.RotateArrow" },
		{ "trigger": "AspectRatio", "contents": "AspectRatio" },
		{ "trigger": "AspectRatio.Aspect4by3", "contents": "AspectRatio.Aspect4by3" },
		{ "trigger": "AspectRatio.Aspect16by9", "contents": "AspectRatio.Aspect16by9" },
		{ "trigger": "AspectRatio.Aspect5by4", "contents": "AspectRatio.Aspect5by4" },
		{ "trigger": "AspectRatio.AspectOthers", "contents": "AspectRatio.AspectOthers" },
		{ "trigger": "AspectRatio.Aspect16by10", "contents": "AspectRatio.Aspect16by10" },
		{ "trigger": "PivotRotation", "contents": "PivotRotation" },
		{ "trigger": "PivotRotation.Global", "contents": "PivotRotation.Global" },
		{ "trigger": "PivotRotation.Local", "contents": "PivotRotation.Local" },
		{ "trigger": "iOSStatusBarStyle", "contents": "iOSStatusBarStyle" },
		{ "trigger": "iOSStatusBarStyle.Default", "contents": "iOSStatusBarStyle.Default" },
		{ "trigger": "iOSStatusBarStyle.BlackOpaque", "contents": "iOSStatusBarStyle.BlackOpaque" },
		{ "trigger": "iOSStatusBarStyle.BlackTranslucent", "contents": "iOSStatusBarStyle.BlackTranslucent" },
		{ "trigger": "StaticOcclusionCullingMode", "contents": "StaticOcclusionCullingMode" },
		{ "trigger": "WiiBuildSubtarget", "contents": "WiiBuildSubtarget" },
		{ "trigger": "WiiBuildSubtarget.WiiWare", "contents": "WiiBuildSubtarget.WiiWare" },
		{ "trigger": "WiiBuildSubtarget.WiiWareLibrary", "contents": "WiiBuildSubtarget.WiiWareLibrary" },
		{ "trigger": "WiiBuildSubtarget.DVDLibrary", "contents": "WiiBuildSubtarget.DVDLibrary" },
		{ "trigger": "WiiBuildSubtarget.DVD", "contents": "WiiBuildSubtarget.DVD" },
		{ "trigger": "TextureImporterGenerateCubemap", "contents": "TextureImporterGenerateCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.None", "contents": "TextureImporterGenerateCubemap.None" },
		{ "trigger": "TextureImporterGenerateCubemap.SimpleSpheremap", "contents": "TextureImporterGenerateCubemap.SimpleSpheremap" },
		{ "trigger": "TextureImporterGenerateCubemap.Spheremap", "contents": "TextureImporterGenerateCubemap.Spheremap" },
		{ "trigger": "TextureImporterGenerateCubemap.Cylindrical", "contents": "TextureImporterGenerateCubemap.Cylindrical" },
		{ "trigger": "TextureImporterGenerateCubemap.FullCubemap", "contents": "TextureImporterGenerateCubemap.FullCubemap" },
		{ "trigger": "TextureImporterGenerateCubemap.NiceSpheremap", "contents": "TextureImporterGenerateCubemap.NiceSpheremap" },
		{ "trigger": "ModelImporterMeshCompression", "contents": "ModelImporterMeshCompression" },
		{ "trigger": "ModelImporterMeshCompression.High", "contents": "ModelImporterMeshCompression.High" },
		{ "trigger": "ModelImporterMeshCompression.Medium", "contents": "ModelImporterMeshCompression.Medium" },
		{ "trigger": "ModelImporterMeshCompression.Off", "contents": "ModelImporterMeshCompression.Off" },
		{ "trigger": "ModelImporterMeshCompression.Low", "contents": "ModelImporterMeshCompression.Low" },
		{ "trigger": "BuildAssetBundleOptions", "contents": "BuildAssetBundleOptions" },
		{ "trigger": "BuildAssetBundleOptions.DisableWriteTypeTree", "contents": "BuildAssetBundleOptions.DisableWriteTypeTree" },
		{ "trigger": "BuildAssetBundleOptions.DeterministicAssetBundle", "contents": "BuildAssetBundleOptions.DeterministicAssetBundle" },
		{ "trigger": "BuildAssetBundleOptions.CompleteAssets", "contents": "BuildAssetBundleOptions.CompleteAssets" },
		{ "trigger": "BuildAssetBundleOptions.CollectDependencies", "contents": "BuildAssetBundleOptions.CollectDependencies" },
		{ "trigger": "BuildAssetBundleOptions.UncompressedAssetBundle", "contents": "BuildAssetBundleOptions.UncompressedAssetBundle" },
		{ "trigger": "EditorSkin", "contents": "EditorSkin" },
		{ "trigger": "EditorSkin.Game", "contents": "EditorSkin.Game" },
		{ "trigger": "EditorSkin.Inspector", "contents": "EditorSkin.Inspector" },
		{ "trigger": "EditorSkin.Scene", "contents": "EditorSkin.Scene" },
		{ "trigger": "DragAndDropVisualMode", "contents": "DragAndDropVisualMode" },
		{ "trigger": "DragAndDropVisualMode.None", "contents": "DragAndDropVisualMode.None" },
		{ "trigger": "DragAndDropVisualMode.Generic", "contents": "DragAndDropVisualMode.Generic" },
		{ "trigger": "DragAndDropVisualMode.Move", "contents": "DragAndDropVisualMode.Move" },
		{ "trigger": "DragAndDropVisualMode.Rejected", "contents": "DragAndDropVisualMode.Rejected" },
		{ "trigger": "DragAndDropVisualMode.Link", "contents": "DragAndDropVisualMode.Link" },
		{ "trigger": "DragAndDropVisualMode.Copy", "contents": "DragAndDropVisualMode.Copy" },
		{ "trigger": "AssetMoveResult", "contents": "AssetMoveResult" },
		{ "trigger": "AssetMoveResult.DidNotMove", "contents": "AssetMoveResult.DidNotMove" },
		{ "trigger": "AssetMoveResult.FailedMove", "contents": "AssetMoveResult.FailedMove" },
		{ "trigger": "AssetMoveResult.DidMove", "contents": "AssetMoveResult.DidMove" },
		{ "trigger": "WiiRegion", "contents": "WiiRegion" },
		{ "trigger": "WiiRegion.Europe", "contents": "WiiRegion.Europe" },
		{ "trigger": "WiiRegion.Korea", "contents": "WiiRegion.Korea" },
		{ "trigger": "WiiRegion.USA", "contents": "WiiRegion.USA" },
		{ "trigger": "WiiRegion.China", "contents": "WiiRegion.China" },
		{ "trigger": "WiiRegion.Japan", "contents": "WiiRegion.Japan" },
		{ "trigger": "WiiRegion.Taiwan", "contents": "WiiRegion.Taiwan" },
		{ "trigger": "PS3BuildSubtarget", "contents": "PS3BuildSubtarget" },
		{ "trigger": "PS3BuildSubtarget.HddTitle", "contents": "PS3BuildSubtarget.HddTitle" },
		{ "trigger": "PS3BuildSubtarget.BluRayTitle", "contents": "PS3BuildSubtarget.BluRayTitle" },
		{ "trigger": "PS3BuildSubtarget.PCHosted", "contents": "PS3BuildSubtarget.PCHosted" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading", "contents": "AndroidShowActivityIndicatorOnLoading" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Large", "contents": "AndroidShowActivityIndicatorOnLoading.Large" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedLarge", "contents": "AndroidShowActivityIndicatorOnLoading.InversedLarge" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.InversedSmall", "contents": "AndroidShowActivityIndicatorOnLoading.InversedSmall" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.Small", "contents": "AndroidShowActivityIndicatorOnLoading.Small" },
		{ "trigger": "AndroidShowActivityIndicatorOnLoading.DontShow", "contents": "AndroidShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "TextureImporterMipFilter", "contents": "TextureImporterMipFilter" },
		{ "trigger": "TextureImporterMipFilter.BoxFilter", "contents": "TextureImporterMipFilter.BoxFilter" },
		{ "trigger": "TextureImporterMipFilter.KaiserFilter", "contents": "TextureImporterMipFilter.KaiserFilter" },
		{ "trigger": "GizmoType", "contents": "GizmoType" },
		{ "trigger": "GizmoType.Active", "contents": "GizmoType.Active" },
		{ "trigger": "GizmoType.Selected", "contents": "GizmoType.Selected" },
		{ "trigger": "GizmoType.NotSelected", "contents": "GizmoType.NotSelected" },
		{ "trigger": "GizmoType.Pickable", "contents": "GizmoType.Pickable" },
		{ "trigger": "GizmoType.SelectedOrChild", "contents": "GizmoType.SelectedOrChild" },
		{ "trigger": "iOSTargetResolution", "contents": "iOSTargetResolution" },
		{ "trigger": "iOSTargetResolution.Resolution640p", "contents": "iOSTargetResolution.Resolution640p" },
		{ "trigger": "iOSTargetResolution.Resolution320p", "contents": "iOSTargetResolution.Resolution320p" },
		{ "trigger": "iOSTargetResolution.ResolutionAutoPerformance", "contents": "iOSTargetResolution.ResolutionAutoPerformance" },
		{ "trigger": "iOSTargetResolution.Resolution768p", "contents": "iOSTargetResolution.Resolution768p" },
		{ "trigger": "iOSTargetResolution.ResolutionAutoQuality", "contents": "iOSTargetResolution.ResolutionAutoQuality" },
		{ "trigger": "iOSTargetResolution.Native", "contents": "iOSTargetResolution.Native" },
		{ "trigger": "ModelImporterMaterialName", "contents": "ModelImporterMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName", "contents": "ModelImporterMaterialName.BasedOnModelNameAndMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnMaterialName", "contents": "ModelImporterMaterialName.BasedOnMaterialName" },
		{ "trigger": "ModelImporterMaterialName.BasedOnTextureName", "contents": "ModelImporterMaterialName.BasedOnTextureName" },
		{ "trigger": "FontTextureCase", "contents": "FontTextureCase" },
		{ "trigger": "FontTextureCase.CustomSet", "contents": "FontTextureCase.CustomSet" },
		{ "trigger": "FontTextureCase.Dynamic", "contents": "FontTextureCase.Dynamic" },
		{ "trigger": "FontTextureCase.ASCIIUpperCase", "contents": "FontTextureCase.ASCIIUpperCase" },
		{ "trigger": "FontTextureCase.ASCIILowerCase", "contents": "FontTextureCase.ASCIILowerCase" },
		{ "trigger": "FontTextureCase.Unicode", "contents": "FontTextureCase.Unicode" },
		{ "trigger": "FontTextureCase.ASCII", "contents": "FontTextureCase.ASCII" },
		{ "trigger": "ResolutionDialogSetting", "contents": "ResolutionDialogSetting" },
		{ "trigger": "ResolutionDialogSetting.Disabled", "contents": "ResolutionDialogSetting.Disabled" },
		{ "trigger": "ResolutionDialogSetting.HiddenByDefault", "contents": "ResolutionDialogSetting.HiddenByDefault" },
		{ "trigger": "ResolutionDialogSetting.Enabled", "contents": "ResolutionDialogSetting.Enabled" },
		{ "trigger": "ModelImporterGenerateAnimations", "contents": "ModelImporterGenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.InOriginalRoots", "contents": "ModelImporterGenerateAnimations.InOriginalRoots" },
		{ "trigger": "ModelImporterGenerateAnimations.None", "contents": "ModelImporterGenerateAnimations.None" },
		{ "trigger": "ModelImporterGenerateAnimations.InNodes", "contents": "ModelImporterGenerateAnimations.InNodes" },
		{ "trigger": "ModelImporterGenerateAnimations.GenerateAnimations", "contents": "ModelImporterGenerateAnimations.GenerateAnimations" },
		{ "trigger": "ModelImporterGenerateAnimations.InRoot", "contents": "ModelImporterGenerateAnimations.InRoot" },
		{ "trigger": "AndroidBuildSubtarget", "contents": "AndroidBuildSubtarget" },
		{ "trigger": "AndroidBuildSubtarget.Generic", "contents": "AndroidBuildSubtarget.Generic" },
		{ "trigger": "AndroidBuildSubtarget.ETC", "contents": "AndroidBuildSubtarget.ETC" },
		{ "trigger": "AndroidBuildSubtarget.PVRTC", "contents": "AndroidBuildSubtarget.PVRTC" },
		{ "trigger": "AndroidBuildSubtarget.DXT", "contents": "AndroidBuildSubtarget.DXT" },
		{ "trigger": "AndroidBuildSubtarget.ATC", "contents": "AndroidBuildSubtarget.ATC" },
		{ "trigger": "RemoveAssetOptions", "contents": "RemoveAssetOptions" },
		{ "trigger": "RemoveAssetOptions.DeleteAssets", "contents": "RemoveAssetOptions.DeleteAssets" },
		{ "trigger": "RemoveAssetOptions.MoveAssetToTrash", "contents": "RemoveAssetOptions.MoveAssetToTrash" },
		{ "trigger": "WiiBuildDebugLevel", "contents": "WiiBuildDebugLevel" },
		{ "trigger": "WiiBuildDebugLevel.None", "contents": "WiiBuildDebugLevel.None" },
		{ "trigger": "WiiBuildDebugLevel.Full", "contents": "WiiBuildDebugLevel.Full" },
		{ "trigger": "WiiBuildDebugLevel.Minimal", "contents": "WiiBuildDebugLevel.Minimal" },
		{ "trigger": "WiiHio2Usage", "contents": "WiiHio2Usage" },
		{ "trigger": "WiiHio2Usage.None", "contents": "WiiHio2Usage.None" },
		{ "trigger": "WiiHio2Usage.Automation", "contents": "WiiHio2Usage.Automation" },
		{ "trigger": "WiiHio2Usage.Profiler", "contents": "WiiHio2Usage.Profiler" },
		{ "trigger": "DrawCameraMode", "contents": "DrawCameraMode" },
		{ "trigger": "DrawCameraMode.Normal", "contents": "DrawCameraMode.Normal" },
		{ "trigger": "DrawCameraMode.Wireframe", "contents": "DrawCameraMode.Wireframe" },
		{ "trigger": "DrawCameraMode.TexturedWire", "contents": "DrawCameraMode.TexturedWire" },
		{ "trigger": "DrawCameraMode.RenderPaths", "contents": "DrawCameraMode.RenderPaths" },
		{ "trigger": "DrawCameraMode.LightmapResolution", "contents": "DrawCameraMode.LightmapResolution" },
		{ "trigger": "DrawCameraMode.Textured", "contents": "DrawCameraMode.Textured" },
		{ "trigger": "ModelImporterMaterialSearch", "contents": "ModelImporterMaterialSearch" },
		{ "trigger": "ModelImporterMaterialSearch.RecursiveUp", "contents": "ModelImporterMaterialSearch.RecursiveUp" },
		{ "trigger": "ModelImporterMaterialSearch.Everywhere", "contents": "ModelImporterMaterialSearch.Everywhere" },
		{ "trigger": "ModelImporterMaterialSearch.Local", "contents": "ModelImporterMaterialSearch.Local" },
		{ "trigger": "iOSTargetDevice", "contents": "iOSTargetDevice" },
		{ "trigger": "iOSTargetDevice.iPadOnly", "contents": "iOSTargetDevice.iPadOnly" },
		{ "trigger": "iOSTargetDevice.iPhoneOnly", "contents": "iOSTargetDevice.iPhoneOnly" },
		{ "trigger": "iOSTargetDevice.iPhoneAndiPad", "contents": "iOSTargetDevice.iPhoneAndiPad" },
		{ "trigger": "SerializedPropertyType", "contents": "SerializedPropertyType" },
		{ "trigger": "SerializedPropertyType.Vector3", "contents": "SerializedPropertyType.Vector3" },
		{ "trigger": "SerializedPropertyType.AnimationCurve", "contents": "SerializedPropertyType.AnimationCurve" },
		{ "trigger": "SerializedPropertyType.Gradient", "contents": "SerializedPropertyType.Gradient" },
		{ "trigger": "SerializedPropertyType.ObjectReference", "contents": "SerializedPropertyType.ObjectReference" },
		{ "trigger": "SerializedPropertyType.Vector2", "contents": "SerializedPropertyType.Vector2" },
		{ "trigger": "SerializedPropertyType.Float", "contents": "SerializedPropertyType.Float" },
		{ "trigger": "SerializedPropertyType.Character", "contents": "SerializedPropertyType.Character" },
		{ "trigger": "SerializedPropertyType.Bounds", "contents": "SerializedPropertyType.Bounds" },
		{ "trigger": "SerializedPropertyType.Color", "contents": "SerializedPropertyType.Color" },
		{ "trigger": "SerializedPropertyType.Boolean", "contents": "SerializedPropertyType.Boolean" },
		{ "trigger": "SerializedPropertyType.ArraySize", "contents": "SerializedPropertyType.ArraySize" },
		{ "trigger": "SerializedPropertyType.Integer", "contents": "SerializedPropertyType.Integer" },
		{ "trigger": "SerializedPropertyType.Enum", "contents": "SerializedPropertyType.Enum" },
		{ "trigger": "SerializedPropertyType.LayerMask", "contents": "SerializedPropertyType.LayerMask" },
		{ "trigger": "SerializedPropertyType.Rect", "contents": "SerializedPropertyType.Rect" },
		{ "trigger": "SerializedPropertyType.String", "contents": "SerializedPropertyType.String" },
		{ "trigger": "StrippingLevel", "contents": "StrippingLevel" },
		{ "trigger": "StrippingLevel.Disabled", "contents": "StrippingLevel.Disabled" },
		{ "trigger": "StrippingLevel.UseMicroMSCorlib", "contents": "StrippingLevel.UseMicroMSCorlib" },
		{ "trigger": "StrippingLevel.StripAssemblies", "contents": "StrippingLevel.StripAssemblies" },
		{ "trigger": "StrippingLevel.StripByteCode", "contents": "StrippingLevel.StripByteCode" },
		{ "trigger": "ScriptCallOptimizationLevel", "contents": "ScriptCallOptimizationLevel" },
		{ "trigger": "ScriptCallOptimizationLevel.SlowAndSafe", "contents": "ScriptCallOptimizationLevel.SlowAndSafe" },
		{ "trigger": "ScriptCallOptimizationLevel.FastButNoExceptions", "contents": "ScriptCallOptimizationLevel.FastButNoExceptions" },
		{ "trigger": "AndroidSdkVersions", "contents": "AndroidSdkVersions" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel15", "contents": "AndroidSdkVersions.AndroidApiLevel15" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel14", "contents": "AndroidSdkVersions.AndroidApiLevel14" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel17", "contents": "AndroidSdkVersions.AndroidApiLevel17" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel16", "contents": "AndroidSdkVersions.AndroidApiLevel16" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel11", "contents": "AndroidSdkVersions.AndroidApiLevel11" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel10", "contents": "AndroidSdkVersions.AndroidApiLevel10" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel13", "contents": "AndroidSdkVersions.AndroidApiLevel13" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel12", "contents": "AndroidSdkVersions.AndroidApiLevel12" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel7", "contents": "AndroidSdkVersions.AndroidApiLevel7" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel6", "contents": "AndroidSdkVersions.AndroidApiLevel6" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel9", "contents": "AndroidSdkVersions.AndroidApiLevel9" },
		{ "trigger": "AndroidSdkVersions.AndroidApiLevel8", "contents": "AndroidSdkVersions.AndroidApiLevel8" },
		{ "trigger": "TextureImporterNPOTScale", "contents": "TextureImporterNPOTScale" },
		{ "trigger": "TextureImporterNPOTScale.None", "contents": "TextureImporterNPOTScale.None" },
		{ "trigger": "TextureImporterNPOTScale.ToSmaller", "contents": "TextureImporterNPOTScale.ToSmaller" },
		{ "trigger": "TextureImporterNPOTScale.ToLarger", "contents": "TextureImporterNPOTScale.ToLarger" },
		{ "trigger": "TextureImporterNPOTScale.ToNearest", "contents": "TextureImporterNPOTScale.ToNearest" },
		{ "trigger": "LightmapBakeQuality", "contents": "LightmapBakeQuality" },
		{ "trigger": "LightmapBakeQuality.High", "contents": "LightmapBakeQuality.High" },
		{ "trigger": "LightmapBakeQuality.Low", "contents": "LightmapBakeQuality.Low" },
		{ "trigger": "ModelImporterAnimationCompression", "contents": "ModelImporterAnimationCompression" },
		{ "trigger": "ModelImporterAnimationCompression.Off", "contents": "ModelImporterAnimationCompression.Off" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReduction", "contents": "ModelImporterAnimationCompression.KeyframeReduction" },
		{ "trigger": "ModelImporterAnimationCompression.KeyframeReductionAndCompression", "contents": "ModelImporterAnimationCompression.KeyframeReductionAndCompression" },
		{ "trigger": "MacFullscreenMode", "contents": "MacFullscreenMode" },
		{ "trigger": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar", "contents": "MacFullscreenMode.FullscreenWindowWithDockAndMenuBar" },
		{ "trigger": "MacFullscreenMode.FullscreenWindow", "contents": "MacFullscreenMode.FullscreenWindow" },
		{ "trigger": "MacFullscreenMode.CaptureDisplay", "contents": "MacFullscreenMode.CaptureDisplay" },
		{ "trigger": "AndroidPreferredInstallLocation", "contents": "AndroidPreferredInstallLocation" },
		{ "trigger": "AndroidPreferredInstallLocation.Auto", "contents": "AndroidPreferredInstallLocation.Auto" },
		{ "trigger": "AndroidPreferredInstallLocation.ForceInternal", "contents": "AndroidPreferredInstallLocation.ForceInternal" },
		{ "trigger": "AndroidPreferredInstallLocation.PreferExternal", "contents": "AndroidPreferredInstallLocation.PreferExternal" },
		{ "trigger": "PivotMode", "contents": "PivotMode" },
		{ "trigger": "PivotMode.Pivot", "contents": "PivotMode.Pivot" },
		{ "trigger": "PivotMode.Center", "contents": "PivotMode.Center" },
		{ "trigger": "ApiCompatibilityLevel", "contents": "ApiCompatibilityLevel" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0", "contents": "ApiCompatibilityLevel.NET_2_0" },
		{ "trigger": "ApiCompatibilityLevel.NET_2_0_Subset", "contents": "ApiCompatibilityLevel.NET_2_0_Subset" },
		{ "trigger": "ModelImporterAnimationType", "contents": "ModelImporterAnimationType" },
		{ "trigger": "ModelImporterAnimationType.Generic", "contents": "ModelImporterAnimationType.Generic" },
		{ "trigger": "ModelImporterAnimationType.None", "contents": "ModelImporterAnimationType.None" },
		{ "trigger": "ModelImporterAnimationType.Legacy", "contents": "ModelImporterAnimationType.Legacy" },
		{ "trigger": "ModelImporterAnimationType.Human", "contents": "ModelImporterAnimationType.Human" },
		{ "trigger": "ModelImporterTangentSpaceMode", "contents": "ModelImporterTangentSpaceMode" },
		{ "trigger": "ModelImporterTangentSpaceMode.Import", "contents": "ModelImporterTangentSpaceMode.Import" },
		{ "trigger": "ModelImporterTangentSpaceMode.None", "contents": "ModelImporterTangentSpaceMode.None" },
		{ "trigger": "ModelImporterTangentSpaceMode.Calculate", "contents": "ModelImporterTangentSpaceMode.Calculate" },
		{ "trigger": "ExportPackageOptions", "contents": "ExportPackageOptions" },
		{ "trigger": "ExportPackageOptions.Default", "contents": "ExportPackageOptions.Default" },
		{ "trigger": "ExportPackageOptions.IncludeDependencies", "contents": "ExportPackageOptions.IncludeDependencies" },
		{ "trigger": "ExportPackageOptions.Recurse", "contents": "ExportPackageOptions.Recurse" },
		{ "trigger": "ExportPackageOptions.IncludeLibraryAssets", "contents": "ExportPackageOptions.IncludeLibraryAssets" },
		{ "trigger": "ExportPackageOptions.Interactive", "contents": "ExportPackageOptions.Interactive" },
		{ "trigger": "AudioImporterLoadType", "contents": "AudioImporterLoadType" },
		{ "trigger": "AudioImporterLoadType.CompressedInMemory", "contents": "AudioImporterLoadType.CompressedInMemory" },
		{ "trigger": "AudioImporterLoadType.DecompressOnLoad", "contents": "AudioImporterLoadType.DecompressOnLoad" },
		{ "trigger": "AudioImporterLoadType.StreamFromDisc", "contents": "AudioImporterLoadType.StreamFromDisc" },
		{ "trigger": "WiiMemoryArea", "contents": "WiiMemoryArea" },
		{ "trigger": "WiiMemoryArea.Two", "contents": "WiiMemoryArea.Two" },
		{ "trigger": "WiiMemoryArea.One", "contents": "WiiMemoryArea.One" },
		{ "trigger": "ImportAssetOptions", "contents": "ImportAssetOptions" },
		{ "trigger": "ImportAssetOptions.DontDownloadFromCacheServer", "contents": "ImportAssetOptions.DontDownloadFromCacheServer" },
		{ "trigger": "ImportAssetOptions.Default", "contents": "ImportAssetOptions.Default" },
		{ "trigger": "ImportAssetOptions.ImportRecursive", "contents": "ImportAssetOptions.ImportRecursive" },
		{ "trigger": "ImportAssetOptions.ForceUncompressedImport", "contents": "ImportAssetOptions.ForceUncompressedImport" },
		{ "trigger": "ImportAssetOptions.ForceSynchronousImport", "contents": "ImportAssetOptions.ForceSynchronousImport" },
		{ "trigger": "ImportAssetOptions.ForceUpdate", "contents": "ImportAssetOptions.ForceUpdate" },
		{ "trigger": "UIOrientation", "contents": "UIOrientation" },
		{ "trigger": "UIOrientation.Portrait", "contents": "UIOrientation.Portrait" },
		{ "trigger": "UIOrientation.AutoRotation", "contents": "UIOrientation.AutoRotation" },
		{ "trigger": "UIOrientation.PortraitUpsideDown", "contents": "UIOrientation.PortraitUpsideDown" },
		{ "trigger": "UIOrientation.LandscapeRight", "contents": "UIOrientation.LandscapeRight" },
		{ "trigger": "UIOrientation.LandscapeLeft", "contents": "UIOrientation.LandscapeLeft" },
		{ "trigger": "iOSSdkVersion", "contents": "iOSSdkVersion" },
		{ "trigger": "iOSSdkVersion.SimulatorSDK", "contents": "iOSSdkVersion.SimulatorSDK" },
		{ "trigger": "iOSSdkVersion.DeviceSDK", "contents": "iOSSdkVersion.DeviceSDK" },
		{ "trigger": "StaticEditorFlags", "contents": "StaticEditorFlags" },
		{ "trigger": "StaticEditorFlags.NavigationStatic", "contents": "StaticEditorFlags.NavigationStatic" },
		{ "trigger": "StaticEditorFlags.LightmapStatic", "contents": "StaticEditorFlags.LightmapStatic" },
		{ "trigger": "StaticEditorFlags.BatchingStatic", "contents": "StaticEditorFlags.BatchingStatic" },
		{ "trigger": "StaticEditorFlags.OccluderStatic", "contents": "StaticEditorFlags.OccluderStatic" },
		{ "trigger": "StaticEditorFlags.OccludeeStatic", "contents": "StaticEditorFlags.OccludeeStatic" },
		{ "trigger": "StaticEditorFlags.OffMeshLinkGeneration", "contents": "StaticEditorFlags.OffMeshLinkGeneration" },
		{ "trigger": "BuildOptions", "contents": "BuildOptions" },
		{ "trigger": "BuildOptions.Development", "contents": "BuildOptions.Development" },
		{ "trigger": "BuildOptions.None", "contents": "BuildOptions.None" },
		{ "trigger": "BuildOptions.AutoRunPlayer", "contents": "BuildOptions.AutoRunPlayer" },
		{ "trigger": "BuildOptions.SymlinkLibraries", "contents": "BuildOptions.SymlinkLibraries" },
		{ "trigger": "BuildOptions.ConnectWithProfiler", "contents": "BuildOptions.ConnectWithProfiler" },
		{ "trigger": "BuildOptions.AcceptExternalModificationsToPlayer", "contents": "BuildOptions.AcceptExternalModificationsToPlayer" },
		{ "trigger": "BuildOptions.DeployOnline", "contents": "BuildOptions.DeployOnline" },
		{ "trigger": "BuildOptions.BuildAdditionalStreamedScenes", "contents": "BuildOptions.BuildAdditionalStreamedScenes" },
		{ "trigger": "BuildOptions.AllowDebugging", "contents": "BuildOptions.AllowDebugging" },
		{ "trigger": "BuildOptions.UncompressedAssetBundle", "contents": "BuildOptions.UncompressedAssetBundle" },
		{ "trigger": "BuildOptions.ShowBuiltPlayer", "contents": "BuildOptions.ShowBuiltPlayer" },
		{ "trigger": "BuildOptions.WebPlayerOfflineDeployment", "contents": "BuildOptions.WebPlayerOfflineDeployment" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading", "contents": "iOSShowActivityIndicatorOnLoading" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.Gray", "contents": "iOSShowActivityIndicatorOnLoading.Gray" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.White", "contents": "iOSShowActivityIndicatorOnLoading.White" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.DontShow", "contents": "iOSShowActivityIndicatorOnLoading.DontShow" },
		{ "trigger": "iOSShowActivityIndicatorOnLoading.WhiteLarge", "contents": "iOSShowActivityIndicatorOnLoading.WhiteLarge" },
		{ "trigger": "XboxRunMethod", "contents": "XboxRunMethod" },
		{ "trigger": "XboxRunMethod.DiscEmuAccurate", "contents": "XboxRunMethod.DiscEmuAccurate" },
		{ "trigger": "XboxRunMethod.HDD", "contents": "XboxRunMethod.HDD" },
		{ "trigger": "XboxRunMethod.DiscEmuFast", "contents": "XboxRunMethod.DiscEmuFast" },
		{ "trigger": "AndroidSplashScreenScale", "contents": "AndroidSplashScreenScale" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFit", "contents": "AndroidSplashScreenScale.ScaleToFit" },
		{ "trigger": "AndroidSplashScreenScale.ScaleToFill", "contents": "AndroidSplashScreenScale.ScaleToFill" },
		{ "trigger": "AndroidSplashScreenScale.Center", "contents": "AndroidSplashScreenScale.Center" },
		{ "trigger": "TargetGlesGraphics", "contents": "TargetGlesGraphics" },
		{ "trigger": "TargetGlesGraphics.OpenGLES_2_0", "contents": "TargetGlesGraphics.OpenGLES_2_0" },
		{ "trigger": "TargetGlesGraphics.OpenGLES_1_x", "contents": "TargetGlesGraphics.OpenGLES_1_x" },
		{ "trigger": "BuildTargetGroup", "contents": "BuildTargetGroup" },
		{ "trigger": "BuildTargetGroup.GLESEmu", "contents": "BuildTargetGroup.GLESEmu" },
		{ "trigger": "BuildTargetGroup.Unknown", "contents": "BuildTargetGroup.Unknown" },
		{ "trigger": "BuildTargetGroup.Standalone", "contents": "BuildTargetGroup.Standalone" },
		{ "trigger": "BuildTargetGroup.NaCl", "contents": "BuildTargetGroup.NaCl" },
		{ "trigger": "BuildTargetGroup.Wii", "contents": "BuildTargetGroup.Wii" },
		{ "trigger": "BuildTargetGroup.XBOX360", "contents": "BuildTargetGroup.XBOX360" },
		{ "trigger": "BuildTargetGroup.PS3", "contents": "BuildTargetGroup.PS3" },
		{ "trigger": "BuildTargetGroup.Android", "contents": "BuildTargetGroup.Android" },
		{ "trigger": "BuildTargetGroup.WebPlayer", "contents": "BuildTargetGroup.WebPlayer" },
		{ "trigger": "BuildTargetGroup.FlashPlayer", "contents": "BuildTargetGroup.FlashPlayer" },
		{ "trigger": "BuildTargetGroup.iPhone", "contents": "BuildTargetGroup.iPhone" },
		{ "trigger": "ProceduralOutputType", "contents": "ProceduralOutputType" },
		{ "trigger": "ProceduralOutputType.Opacity", "contents": "ProceduralOutputType.Opacity" },
		{ "trigger": "ProceduralOutputType.Normal", "contents": "ProceduralOutputType.Normal" },
		{ "trigger": "ProceduralOutputType.Unknown", "contents": "ProceduralOutputType.Unknown" },
		{ "trigger": "ProceduralOutputType.Emissive", "contents": "ProceduralOutputType.Emissive" },
		{ "trigger": "ProceduralOutputType.Height", "contents": "ProceduralOutputType.Height" },
		{ "trigger": "ProceduralOutputType.Specular", "contents": "ProceduralOutputType.Specular" },
		{ "trigger": "ProceduralOutputType.Diffuse", "contents": "ProceduralOutputType.Diffuse" },
		{ "trigger": "BuildTarget", "contents": "BuildTarget" },
		{ "trigger": "BuildTarget.StandaloneLinux64", "contents": "BuildTarget.StandaloneLinux64" },
		{ "trigger": "BuildTarget.iPhone", "contents": "BuildTarget.iPhone" },
		{ "trigger": "BuildTarget.StandaloneWindows64", "contents": "BuildTarget.StandaloneWindows64" },
		{ "trigger": "BuildTarget.NaCl", "contents": "BuildTarget.NaCl" },
		{ "trigger": "BuildTarget.StandaloneLinux", "contents": "BuildTarget.StandaloneLinux" },
		{ "trigger": "BuildTarget.Wii", "contents": "BuildTarget.Wii" },
		{ "trigger": "BuildTarget.Android", "contents": "BuildTarget.Android" },
		{ "trigger": "BuildTarget.XBOX360", "contents": "BuildTarget.XBOX360" },
		{ "trigger": "BuildTarget.StandaloneLinuxUniversal", "contents": "BuildTarget.StandaloneLinuxUniversal" },
		{ "trigger": "BuildTarget.PS3", "contents": "BuildTarget.PS3" },
		{ "trigger": "BuildTarget.FlashPlayer", "contents": "BuildTarget.FlashPlayer" },
		{ "trigger": "BuildTarget.WebPlayerStreamed", "contents": "BuildTarget.WebPlayerStreamed" },
		{ "trigger": "BuildTarget.WebPlayer", "contents": "BuildTarget.WebPlayer" },
		{ "trigger": "BuildTarget.StandaloneOSXIntel", "contents": "BuildTarget.StandaloneOSXIntel" },
		{ "trigger": "BuildTarget.StandaloneWindows", "contents": "BuildTarget.StandaloneWindows" },
		{ "trigger": "SelectionMode", "contents": "SelectionMode" },
		{ "trigger": "SelectionMode.DeepAssets", "contents": "SelectionMode.DeepAssets" },
		{ "trigger": "SelectionMode.Assets", "contents": "SelectionMode.Assets" },
		{ "trigger": "SelectionMode.Editable", "contents": "SelectionMode.Editable" },
		{ "trigger": "SelectionMode.Deep", "contents": "SelectionMode.Deep" },
		{ "trigger": "SelectionMode.TopLevel", "contents": "SelectionMode.TopLevel" },
		{ "trigger": "SelectionMode.Unfiltered", "contents": "SelectionMode.Unfiltered" },
		{ "trigger": "SelectionMode.ExcludePrefab", "contents": "SelectionMode.ExcludePrefab" },
		{ "trigger": "TextureImporterNormalFilter", "contents": "TextureImporterNormalFilter" },
		{ "trigger": "TextureImporterNormalFilter.Sobel", "contents": "TextureImporterNormalFilter.Sobel" },
		{ "trigger": "TextureImporterNormalFilter.Standard", "contents": "TextureImporterNormalFilter.Standard" },
		{ "trigger": "PrefabType", "contents": "PrefabType" },
		{ "trigger": "PrefabType.Prefab", "contents": "PrefabType.Prefab" },
		{ "trigger": "PrefabType.None", "contents": "PrefabType.None" },
		{ "trigger": "PrefabType.DisconnectedModelPrefabInstance", "contents": "PrefabType.DisconnectedModelPrefabInstance" },
		{ "trigger": "PrefabType.MissingPrefabInstance", "contents": "PrefabType.MissingPrefabInstance" },
		{ "trigger": "PrefabType.ModelPrefab", "contents": "PrefabType.ModelPrefab" },
		{ "trigger": "PrefabType.PrefabInstance", "contents": "PrefabType.PrefabInstance" },
		{ "trigger": "PrefabType.ModelPrefabInstance", "contents": "PrefabType.ModelPrefabInstance" },
		{ "trigger": "PrefabType.DisconnectedPrefabInstance", "contents": "PrefabType.DisconnectedPrefabInstance" },
		{ "trigger": "Tool", "contents": "Tool" },
		{ "trigger": "Tool.None", "contents": "Tool.None" },
		{ "trigger": "Tool.Move", "contents": "Tool.Move" },
		{ "trigger": "Tool.Scale", "contents": "Tool.Scale" },
		{ "trigger": "Tool.Rotate", "contents": "Tool.Rotate" },
		{ "trigger": "Tool.View", "contents": "Tool.View" },
		{ "trigger": "InspectorMode", "contents": "InspectorMode" },
		{ "trigger": "InspectorMode.Debug", "contents": "InspectorMode.Debug" },
		{ "trigger": "InspectorMode.DebugInternal", "contents": "InspectorMode.DebugInternal" },
		{ "trigger": "InspectorMode.Normal", "contents": "InspectorMode.Normal" },

		{}
	]
}
